<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>WindowsBase</name>
	</assembly>
	<members>
		<member name="T:System.Collections.ObjectModel.ObservableCollection`1">
			<summary>Represents a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed.</summary>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"></see> class.</summary>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"></see> class that contains elements copied from the specified list.</summary>
			<param name="list">The list from which the elements are copied.</param>
			<exception cref="T:System.ArgumentNullException">The list parameter cannot be null.</exception>
		</member>
		<member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
			<summary>Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.</summary>
		</member>
		<member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
			<summary>Occurs when a property value changes.</summary>
		</member>
		<member name="E:System.Collections.ObjectModel.ObservableCollection`1.System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
			<summary>Occurs when a property value changes.</summary>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
			<summary>Disallows reentrant attempts to change this collection.</summary>
			<returns>An <see cref="T:System.IDisposable"></see> object that can be used to dispose of the object.</returns>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
			<summary>Checks for reentrant attempts to change this collection.</summary>
			<exception cref="T:System.InvalidOperationException">If there was a call to <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy"></see> of which the <see cref="T:System.IDisposable"></see> return value has not yet been disposed of. Typically, this means when there are additional attempts to change this collection during a <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"></see> event. However, it depends on when derived classes choose to call <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy"></see>.</exception>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
			<summary>Removes all items from the collection.</summary>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
			<summary>Inserts an item into the collection at the specified index.</summary>
			<param name="item">The object to insert.</param>
			<param name="index">The zero-based index at which item should be inserted.</param>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
			<summary>Moves the item at the specified index to a new location in the collection.</summary>
			<param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
			<param name="newIndex">The zero-based index specifying the new location of the item.</param>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
			<summary>Moves the item at the specified index to a new location in the collection.</summary>
			<param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
			<param name="newIndex">The zero-based index specifying the new location of the item.</param>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
			<summary>Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"></see> event with the provided arguments.</summary>
			<param name="e">Arguments of the event being raised.</param>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
			<summary>Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged"></see> event with the provided arguments.</summary>
			<param name="e">Arguments of the event being raised.</param>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
			<summary>Removes the item at the specified index of the collection.</summary>
			<param name="index">The zero-based index of the element to remove.</param>
		</member>
		<member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
			<summary>Replaces the element at the specified index.</summary>
			<param name="item">The new value for the element at the specified index.</param>
			<param name="index">The zero-based index of the element to replace.</param>
		</member>
		<member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
			<summary>Represents a read-only <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"></see>.</summary>
		</member>
		<member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"></see> class that serves as a wrapper around the specified <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"></see>.</summary>
			<param name="list">The <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"></see> with which to create this instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"></see> class.</param>
		</member>
		<member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
			<summary>Occurs when an item is added or removed.</summary>
		</member>
		<member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
			<summary>Occurs when a property value changes.</summary>
		</member>
		<member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
			<summary>Occurs when the collection changes.</summary>
		</member>
		<member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
			<summary>Occurs when a property value changes.</summary>
		</member>
		<member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
			<summary>Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged"></see> event using the provided arguments.</summary>
			<param name="args">Arguments of the event being raised.</param>
		</member>
		<member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
			<summary>Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged"></see> event using the provided arguments.</summary>
			<param name="args">Arguments of the event being raised.</param>
		</member>
		<member name="T:System.Collections.Specialized.CollectionChangedEventManager">
			<summary>Provides a <see cref="T:System.Windows.WeakEventManager"></see> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"></see> event.</summary>
		</member>
		<member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
			<summary>Adds the specified listener to the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"></see> event of the specified source.</summary>
			<param name="source">The object with the event.</param>
			<param name="listener">The object to add as a listener.</param>
		</member>
		<member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
			<summary>Removes the specified listener from the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"></see> event of the specified source.</summary>
			<param name="source">The object with the event.</param>
			<param name="listener">The listener to remove.</param>
		</member>
		<member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
			<summary>Begins listening for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"></see> event on the specified source.</summary>
			<param name="source">The object with the event.</param>
		</member>
		<member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
			<summary>Stops listening for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"></see> event on the specified source.</summary>
			<param name="source">The object with the event.</param>
		</member>
		<member name="T:System.Collections.Specialized.INotifyCollectionChanged">
			<summary>Notifies listeners of dynamic changes, such as when items get added and removed or the whole list is refreshed.</summary>
		</member>
		<member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
			<summary>Occurs when the collection changes.</summary>
		</member>
		<member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
			<summary>Describes the action that caused a <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"></see> event. </summary>
		</member>
		<member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
			<summary>One or more items were added to the collection.</summary>
		</member>
		<member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
			<summary>One or more items were moved within the collection.</summary>
		</member>
		<member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
			<summary>One or more items were removed from the collection.</summary>
		</member>
		<member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
			<summary>One or more items were replaced in the collection.</summary>
		</member>
		<member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
			<summary>The content of the collection changed dramatically.</summary>
		</member>
		<member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
			<summary>Provides data for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"></see> event.</summary>
		</member>
		<member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see> change.</summary>
			<param name="action">The action that caused the event. This must be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see>.</param>
		</member>
		<member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a multi-item change.</summary>
			<param name="changedItems">The items that are affected by the change.</param>
			<param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see>, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"></see>, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"></see>.</param>
		</member>
		<member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a one-item change.</summary>
			<param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see>, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"></see>, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"></see>.</param>
			<param name="changedItem">The item that is affected by the change.</param>
			<exception cref="T:System.ArgumentException">If action is not Reset, Add, or Remove, or if action is Reset and changedItems is not null.</exception>
		</member>
		<member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a multi-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see> change.</summary>
			<param name="oldItems">The original items that are replaced.</param>
			<param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>.</param>
			<param name="newItems">The new items that are replacing the original items.</param>
			<exception cref="T:System.ArgumentNullException">If oldItems or newItems is null.</exception>
			<exception cref="T:System.ArgumentException">If action is not Replace.</exception>
		</member>
		<member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a multi-item change or a reset change.</summary>
			<param name="changedItems">The items affected by the change.</param>
			<param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see>, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"></see>, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"></see>.</param>
			<param name="startingIndex">The index where the change occurred.</param>
			<exception cref="T:System.ArgumentException">If action is not Reset, Add, or Remove, if action is Reset and either changedItems is not null or startingIndex is not -1, or if action is Add or Remove and startingIndex is less than -1.</exception>
			<exception cref="T:System.ArgumentNullException">If action is Add or Remove and changedItems is null.</exception>
		</member>
		<member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a one-item change.</summary>
			<param name="index">The index where the change occurred.</param>
			<param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"></see>, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"></see>, or <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"></see>.</param>
			<param name="changedItem">The item that is affected by the change.</param>
			<exception cref="T:System.ArgumentException">If action is not Reset, Add, or Remove, or if action is Reset and either changedItems is not null or index is not -1.</exception>
		</member>
		<member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a one-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see> change.</summary>
			<param name="newItem">The new item that is replacing the original item.</param>
			<param name="oldItem">The original item that is replaced.</param>
			<param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>.</param>
			<exception cref="T:System.ArgumentException">If action is not Replace.</exception>
		</member>
		<member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a multi-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see> change.</summary>
			<param name="oldItems">The original items that are replaced.</param>
			<param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>.</param>
			<param name="newItems">The new items that are replacing the original items.</param>
			<param name="startingIndex">The index of the first item of the items that are being replaced.</param>
			<exception cref="T:System.ArgumentNullException">If oldItems or newItems is null.</exception>
			<exception cref="T:System.ArgumentException">If action is not Replace.</exception>
		</member>
		<member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a multi-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see> change.</summary>
			<param name="changedItems">The items affected by the change.</param>
			<param name="oldIndex">The old index for the changed items.</param>
			<param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see>.</param>
			<param name="index">The new index for the changed items.</param>
			<exception cref="T:System.ArgumentException">If action is not Move or index is less than 0.</exception>
		</member>
		<member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a multi-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see> change.</summary>
			<param name="index">The new index for the changed item.</param>
			<param name="oldIndex">The old index for the changed item.</param>
			<param name="action">The action that caused the event. This can only be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see>.</param>
			<param name="changedItem">The item affected by the change.</param>
			<exception cref="T:System.ArgumentException">If action is not Move or index is less than 0.</exception>
		</member>
		<member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"></see> class that describes a one-item <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see> change.</summary>
			<param name="newItem">The new item that is replacing the original item.</param>
			<param name="oldItem">The original item that is replaced.</param>
			<param name="action">The action that caused the event. This can be set to <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>.</param>
			<param name="index">The index of the item being replaced.</param>
			<exception cref="T:System.ArgumentException">If action is not Replace.</exception>
		</member>
		<member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
			<summary>Gets the action that caused the event. </summary>
			<returns>A <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"></see> value that describes the action that caused the event.</returns>
		</member>
		<member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
			<summary>Gets the list of new items involved in the change.</summary>
			<returns>The list of new items involved in the change.</returns>
		</member>
		<member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
			<summary>Gets the index at which the change occurred.</summary>
			<returns>The zero-based index at which the change occurred.</returns>
		</member>
		<member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
			<summary>Gets the list of items affected by a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>, Remove, or Move action.</summary>
			<returns>The list of items affected by a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"></see>, Remove, or Move action.</returns>
		</member>
		<member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
			<summary>Gets the index at which a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see>, Remove, ore Replace action occurred.</summary>
			<returns>The zero-based index at which a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"></see>, Remove, or Replace action occurred.</returns>
		</member>
		<member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
			<summary>Represents the method that handles the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"></see> event. </summary>
		</member>
		<member name="T:System.ComponentModel.CurrentChangedEventManager">
			<summary>Provides a <see cref="T:System.Windows.WeakEventManager"></see> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged"></see> event.</summary>
		</member>
		<member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
			<summary>Adds the specified listener to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged"></see> event of the specified source.</summary>
			<param name="source">The object with the event.</param>
			<param name="listener">The object to add as a listener.</param>
		</member>
		<member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
			<summary>Removes the specified listener from the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged"></see> event of the specified source.</summary>
			<param name="source">The object with the event.</param>
			<param name="listener">The listener to remove.</param>
		</member>
		<member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
			<summary>Begins listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged"></see> event on the specified source.</summary>
			<param name="source">The object with the event.</param>
		</member>
		<member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
			<summary>Stops listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged"></see> event on the specified source.</summary>
			<param name="source">The object with the event.</param>
		</member>
		<member name="T:System.ComponentModel.CurrentChangingEventArgs">
			<summary>Provides information for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging"></see> event.</summary>
		</member>
		<member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs"></see> class.</summary>
		</member>
		<member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs"></see> class with the specified isCancelable value.</summary>
			<param name="isCancelable">A value that indicates whether the event is cancelable.</param>
		</member>
		<member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
			<summary>Gets or sets a value that indicates whether to cancel the event.</summary>
			<returns>true if the event is to be canceled; otherwise, false. The default value is false.</returns>
			<exception cref="T:System.InvalidOperationException">If the value of <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable"></see> is false.</exception>
		</member>
		<member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
			<summary>Gets a value that indicates whether the event is cancelable.</summary>
			<returns>true if the event is cancelable, otherwise, false. The default value is true.</returns>
		</member>
		<member name="T:System.ComponentModel.CurrentChangingEventHandler">
			<summary>Represents the method that handles the <see cref="E:System.Windows.Data.CollectionView.CurrentChanging"></see> event.</summary>
		</member>
		<member name="T:System.ComponentModel.CurrentChangingEventManager">
			<summary>Provides a <see cref="T:System.Windows.WeakEventManager"></see> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging"></see> event.</summary>
		</member>
		<member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
			<summary>Adds the specified listener to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging"></see> event of the specified source.</summary>
			<param name="source">The object with the event.</param>
			<param name="listener">The object to add as a listener.</param>
		</member>
		<member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
			<summary>Removes the specified listener from the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging"></see> event of the specified source.</summary>
			<param name="source">The object with the event.</param>
			<param name="listener">The listener to remove.</param>
		</member>
		<member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
			<summary>Begins listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging"></see> event on the specified source.</summary>
			<param name="source">The object with the event.</param>
		</member>
		<member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
			<summary>Stops listening for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging"></see> event on the specified source.</summary>
			<param name="source">The object with the event.</param>
		</member>
		<member name="T:System.ComponentModel.DependencyPropertyDescriptor">
			<summary>Provides an extension of PropertyDescriptor that accounts for the additional property characteristics of a dependency property.</summary>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
			<summary>Enables other objects to be notified when this property changes. </summary>
			<param name="component">The component to add the handler for.</param>
			<param name="handler">The delegate to add as a listener.</param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
			<summary>Returns whether resetting an object changes its value.</summary>
			<returns>true if resetting the component changes its value; otherwise, false.</returns>
			<param name="component">The component to test for reset capability. </param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
			<summary>Compares two <see cref="T:System.ComponentModel.DependencyPropertyDescriptor"></see> instances for equality.</summary>
			<returns>true if the values are equivalent; otherwise, false.</returns>
			<param name="obj">The <see cref="T:System.ComponentModel.DependencyPropertyDescriptor"></see>  to compare with the current instance. </param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
			<summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor"></see> for a provided property name.</summary>
			<returns>The requested <see cref="T:System.ComponentModel.DependencyPropertyDescriptor"></see>.</returns>
			<param name="targetType">The <see cref="T:System.Type"></see> of the object you want to set the property for.</param>
			<param name="name">The registered name of a dependency property or an attached property.</param>
			<param name="ownerType">The <see cref="T:System.Type"></see> of the object that owns the property definition.</param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
			<summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor"></see> for a provided <see cref="T:System.ComponentModel.PropertyDescriptor"></see>.</summary>
			<returns>If the property described by property is a dependency property, returns a valid <see cref="T:System.ComponentModel.DependencyPropertyDescriptor"></see>. Otherwise, returns a null<see cref="T:System.ComponentModel.DependencyPropertyDescriptor"></see>.</returns>
			<param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor"></see> to check.</param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
			<summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor"></see> for a provided dependency property and target type.</summary>
			<returns>A <see cref="T:System.ComponentModel.DependencyPropertyDescriptor"></see> for the provided dependency property.</returns>
			<param name="dependencyProperty">The identifier for a dependency property.</param>
			<param name="targetType">The type of the object where the property is set.</param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
			<summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see>.</summary>
			<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> with the properties that match the specified attributes for the specified component.</returns>
			<param name="filter">An array of type <see cref="T:System.Attribute"></see> to use as a filter. </param>
			<param name="instance">A component to get the properties for.</param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
			<summary>Gets an editor of the specified type.</summary>
			<returns>An instance of the requested editor type, or null if an editor cannot be found.</returns>
			<param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports. </param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
			<summary>Returns the hash code for this <see cref="T:System.ComponentModel.DependencyPropertyDescriptor"></see>.</summary>
			<returns>A 32-bit signed integer hash code. </returns>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
			<summary>Resturns the current value of the property on a component.</summary>
			<returns>The requested value.</returns>
			<param name="component">The component instance.</param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
			<summary>Enables other objects to be notified when this property changes.</summary>
			<param name="component">The component to add the handler for. </param>
			<param name="handler">The delegate to add as a listener. </param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
			<summary>Resets the value for this property of the component to the default value.</summary>
			<param name="component">The component with the property value that is to be reset to the default value. </param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
			<summary>Sets the value of the component to a different value.</summary>
			<param name="component">The component with the property value that is to be set. </param>
			<param name="value">The new value.</param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
			<summary>Indicates whether the value of this property needs to be persisted by serialization processes.</summary>
			<returns>true if the property should be persisted; otherwise, false.</returns>
			<param name="component">The component with the property to be examined for persistence.</param>
		</member>
		<member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
			<summary>Converts the value of this instance to its equivalent string representation.</summary>
			<returns>Returns the <see cref="P:System.ComponentModel.MemberDescriptor.Name"></see> value.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
			<summary>Gets the collection of attributes for this member.</summary>
			<returns>The <see cref="T:System.ComponentModel.AttributeCollection"></see> collection of attributes.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
			<summary>Gets the name of the category that the member belongs to, as specified in the <see cref="T:System.ComponentModel.CategoryAttribute"></see>.</summary>
			<returns>The name of the category to which the member belongs. If there is no <see cref="T:System.ComponentModel.CategoryAttribute"></see>, the category name is set to the default category, Misc.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
			<summary>Gets the type of the component this property is bound to.</summary>
			<returns>A <see cref="T:System.Type"></see> that represents the type of component this property is bound to. When <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)"></see> or <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)"></see> are invoked, the object specified might be an instance of this type.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
			<summary>Gets the type converter for this property.</summary>
			<returns>A <see cref="T:System.ComponentModel.TypeConverter"></see> that is used to convert the <see cref="T:System.Type"></see> of this property.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
			<summary>Returns the dependency property identifier.</summary>
			<returns>The dependency property identifier.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
			<summary>Gets the description of the member, as specified in the <see cref="T:System.ComponentModel.DescriptionAttribute"></see>.</summary>
			<returns>The description of the member. If there is no <see cref="T:System.ComponentModel.DescriptionAttribute"></see>, the property value is set to the default, which is an empty string ("").</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
			<summary>Gets whether this member should be set only at design time, as specified in the <see cref="T:System.ComponentModel.DesignOnlyAttribute"></see>.</summary>
			<returns>true if this member should be set only at design time; false if the member can be set during run time. If there is no <see cref="T:System.ComponentModel.DesignOnlyAttribute"></see>, the return value is the default, which is false.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
			<summary>Gets the name that can be displayed in a window, such as a Properties window.</summary>
			<returns>The name to display for the property.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
			<summary>Gets a value that indicates whether the property is registered as an attached property and is being used through an attached usage.</summary>
			<returns>true if the property is an attached property; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
			<summary>Gets a value that indicates the value of the <see cref="T:System.ComponentModel.BrowsableAttribute"></see> on the property.</summary>
			<returns>true if the <see cref="T:System.ComponentModel.BrowsableAttribute"></see> was specified on the property; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
			<summary>Gets a value indicating whether this property should be localized, as specified in the <see cref="T:System.ComponentModel.LocalizableAttribute"></see>.</summary>
			<returns>true if the member is marked with the <see cref="T:System.ComponentModel.LocalizableAttribute"></see> constructor of the value true; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
			<summary>Gets a value indicating whether this property is read-only.</summary>
			<returns>true if the property is read-only; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
			<summary>Gets the metadata associated with the dependency property.</summary>
			<returns>The dependency property metadata.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
			<summary>Gets the represented <see cref="T:System.Type"></see> of the dependency property.</summary>
			<returns>The <see cref="T:System.Type"></see> of the dependency property.</returns>
		</member>
		<member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
			<summary>Indicates whether value change notifications for this property may originate from outside the property descriptor, such as from the component itself, or whether notifications will only originate from direct calls made to <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)"></see>. </summary>
			<returns>true if notifications for this property may originate from outside the property descriptor, such as from the component itself. false if notifications will only originate from direct calls made to <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)"></see>.</returns>
		</member>
		<member name="T:System.ComponentModel.GroupDescription">
			<summary>Provides an abstract base class for types that describe how to divide the items in a collection into groups.</summary>
		</member>
		<member name="M:System.ComponentModel.GroupDescription.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.GroupDescription"></see> class.</summary>
		</member>
		<member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
			<summary>Occurs when a property value changes.</summary>
		</member>
		<member name="E:System.ComponentModel.GroupDescription.System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
			<summary>Occurs when a property value changes.</summary>
		</member>
		<member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
			<summary>Returns the group name(s) for the given item.</summary>
			<returns>The group name(s) for the given item.</returns>
			<param name="Item">The item to return group names for.</param>
			<param name="culture">The <see cref="T:System.Globalization.CultureInfo"></see> to supply to the converter.</param>
			<param name="level">The level of grouping.</param>
		</member>
		<member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
			<summary>Returns a value that indicates whether the group name and the item name match such that the item belongs to the group.</summary>
			<returns>true if the names match and the item belongs to the group; otherwise, false.</returns>
			<param name="itemName">The name of the item to check.</param>
			<param name="groupName">The name of the group to check.</param>
		</member>
		<member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
			<summary>Raises the <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged"></see> event.</summary>
			<param name="e">Arguments of the event being raised.</param>
		</member>
		<member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
			<summary>Returns whether serialization processes should serialize the effective value of the <see cref="P:System.ComponentModel.GroupDescription.GroupNames"></see> property on instances of this class.</summary>
			<returns>Returns true if the <see cref="P:System.ComponentModel.GroupDescription.GroupNames"></see> property value should be serialized; otherwise, false.</returns>
		</member>
		<member name="T:System.ComponentModel.ICollectionView">
			<summary>Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.</summary>
		</member>
		<member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
			<summary>When implementing this interface, raise this event after the current item has been changed.</summary>
		</member>
		<member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
			<summary>When implementing this interface, raise this event before changing the current item. Event handler can cancel this event.</summary>
		</member>
		<member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
			<summary>Returns a value that indicates whether a given item belongs to this collection view.</summary>
			<returns>true if the item belongs to this collection view; otherwise, false.</returns>
			<param name="item">The object to check.</param>
		</member>
		<member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
			<summary>Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.</summary>
			<returns>An <see cref="T:System.IDisposable"></see> object that you can use to dispose of the calling object.</returns>
		</member>
		<member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
			<summary>Sets the specified item to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> in the view.</summary>
			<returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> is within the view; otherwise, false.</returns>
			<param name="item">The item to set as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see>.</param>
		</member>
		<member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
			<summary>Sets the first item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see>.</summary>
			<returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> is an item within the view; otherwise, false.</returns>
		</member>
		<member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
			<summary>Sets the last item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see>.</summary>
			<returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> is an item within the view; otherwise, false.</returns>
		</member>
		<member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
			<summary>Sets the item after the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see>.</summary>
			<returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> is an item within the view; otherwise, false.</returns>
		</member>
		<member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
			<summary>Sets the item at the specified index to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> in the view.</summary>
			<returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> is an item within the view; otherwise, false.</returns>
			<param name="position">The index to set the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> to.</param>
		</member>
		<member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
			<summary>Sets the item before the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see>.</summary>
			<returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> is an item within the view; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.CanFilter">
			<summary>Gets a value that indicates whether this view supports filtering via the <see cref="P:System.ComponentModel.ICollectionView.Filter"></see> property.</summary>
			<returns>true if this view support filtering; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.CanGroup">
			<summary>Gets a value that indicates whether this view supports grouping via the <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions"></see> property.</summary>
			<returns>true if this view supports grouping; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.CanSort">
			<summary>Gets a value that indicates whether this view supports sorting via the <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions"></see> property.</summary>
			<returns>true if this view supports sorting; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.Culture">
			<summary>Gets or sets the cultural info for any operations of the view that may differ by culture, such as sorting.</summary>
			<returns>The culture to use during sorting.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.CurrentItem">
			<summary>Gets the current item in the view.</summary>
			<returns>The current item of the view or null if there is no current item.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
			<summary>Gets the ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> within the view.</summary>
			<returns>The ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> within the view.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.Filter">
			<summary>Gets or sets a callback used to determine if an item is suitable for inclusion in the view.</summary>
			<returns>A method used to determine if an item is suitable for inclusion in the view.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
			<summary>Gets a collection of <see cref="T:System.ComponentModel.GroupDescription"></see> objects that describe how the items in the collection are grouped in the view.</summary>
			<returns>A collection of <see cref="T:System.ComponentModel.GroupDescription"></see> objects that describe how the items in the collection are grouped in the view.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.Groups">
			<summary>Gets the top-level groups.</summary>
			<returns>A read-only collection of the top-level groups or null if there are no groups.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
			<summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> of the view is beyond the end of the collection.</summary>
			<returns>Returns true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> of the view is beyond the end of the collection; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
			<summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> of the view is beyond the beginning of the collection.</summary>
			<returns>Returns true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"></see> of the view is beyond the beginning of the collection; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.IsEmpty">
			<summary>Returns a value that indicates whether the resulting view is empty.</summary>
			<returns>true if the resulting view is empty; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
			<summary>Gets a collection of <see cref="T:System.ComponentModel.SortDescription"></see> objects that describe how the items in the collection are sorted in the view.</summary>
			<returns>A collection of <see cref="T:System.ComponentModel.SortDescription"></see> objects that describe how the items in the collection are sorted in the view.</returns>
		</member>
		<member name="P:System.ComponentModel.ICollectionView.SourceCollection">
			<summary>Returns the underlying collection.</summary>
			<returns>An <see cref="T:System.Collections.IEnumerable"></see> object that is the underlying collection.</returns>
		</member>
		<member name="T:System.ComponentModel.ICollectionViewFactory">
			<summary>An interface that enables implementing collections to create a view to their data. Normally, user code does not call methods on this interface.</summary>
		</member>
		<member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
			<summary>Creates a new view on the collection that implements this interface. Typically, user code does not call this method.</summary>
			<returns>The newly created view.</returns>
		</member>
		<member name="T:System.ComponentModel.PropertyChangedEventManager">
			<summary>Provides a <see cref="T:System.Windows.WeakEventManager"></see> implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"></see> event.</summary>
		</member>
		<member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
			<summary>Adds the specified listener to the list of listeners on the specified source.</summary>
			<param name="source">The object with the event.</param>
			<param name="propertyName">The name of the property that exists on source upon which to listen for changes. Set to <see cref="F:System.String.Empty"></see> to indicate "any property".</param>
			<param name="listener">The object to add as a listener.</param>
		</member>
		<member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
			<summary>Removes listeners that are no longer active from the data for the provided source. </summary>
			<returns>true if some entries were removed; otherwise, false.</returns>
			<param name="source">Source object to remove all listeners from.</param>
			<param name="data">The data to purge. This is expected to be a <see cref="T:System.Collections.Specialized.HybridDictionary"></see>.</param>
			<param name="purgeAll">Set to true to stop listening and to completely remove all data.</param>
		</member>
		<member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
			<summary>Removes the specified listener from the list of listeners on the provided source.</summary>
			<param name="source">The object to remove the listener from.</param>
			<param name="propertyName">The name of the property that exists on source upon which to stop listening for changes. Set to <see cref="F:System.String.Empty"></see> to indicate "any property".</param>
			<param name="listener">The listener to remove.</param>
		</member>
		<member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
			<summary>Begins listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"></see> event on the provided source.</summary>
			<param name="source">The object on which to start listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"></see>.</param>
		</member>
		<member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
			<summary>Stops listening for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"></see> event on the provided source.</summary>
			<param name="source">The source object on which to stop listening for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"></see>.</param>
		</member>
		<member name="T:System.ComponentModel.PropertyFilterAttribute">
			<summary>Specifies which properties should be reported by type descriptors, specifically the <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)"></see> method.</summary>
		</member>
		<member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
			<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyFilterAttribute"></see> class.</summary>
			<param name="filter">The options that describe this property filter.</param>
		</member>
		<member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
			<summary>This member supports the Microsoft .NET Framework infrastructure and is not intended to be used directly from your code. </summary>
		</member>
		<member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
			<summary>Returns a value that indicates whether the current <see cref="T:System.ComponentModel.PropertyFilterAttribute"></see> .NET Framework attribute is equal to a specified object.</summary>
			<returns>true if the specified <see cref="T:System.ComponentModel.PropertyFilterAttribute"></see> is equal to the current <see cref="T:System.ComponentModel.PropertyFilterAttribute"></see>; otherwise, false. </returns>
			<param name="value">The object to compare to this <see cref="T:System.ComponentModel.PropertyFilterAttribute"></see>.</param>
		</member>
		<member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
			<summary>Returns the hash code for the current <see cref="T:System.ComponentModel.PropertyFilterAttribute"></see> .NET Framework attribute. </summary>
			<returns>A signed 32-bit integer value.</returns>
		</member>
		<member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
			<summary>Returns a value that indicates whether the property filter options of the current <see cref="T:System.ComponentModel.PropertyFilterAttribute"></see> .NET Framework attribute match the property filter options of the provided object. </summary>
			<returns>true if a match exists; otherwise, false.</returns>
			<param name="value">The object to compare. This object is expected to be a <see cref="T:System.ComponentModel.PropertyFilterAttribute"></see>.</param>
		</member>
		<member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
			<summary>Gets the filter options for this <see cref="T:System.ComponentModel.PropertyFilterAttribute"></see> .NET Framework attribute.</summary>
			<returns>The property filter options.</returns>
		</member>
		<member name="T:System.ComponentModel.PropertyFilterOptions">
			<summary>Specifies which properties should be reported by type descriptors, specifically the <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)"></see> method. This enumeration is used to specify the value of the <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter"></see> property.</summary>
		</member>
		<member name="F:System.ComponentModel.PropertyFilterOptions.All">
			<summary>Return all properties.</summary>
		</member>
		<member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
			<summary>Return only those properties that are not valid given the current context of the object. See Remarks.</summary>
		</member>
		<member name="F:System.ComponentModel.PropertyFilterOptions.None">
			<summary>Return no properties</summary>
		</member>
		<member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
			<summary>Return only those properties that have local values currently set.</summary>
		</member>
		<member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
			<summary>Return only those properties whose local values are not set, or do not have properties set in an external expression store (such as binding or deferred resource).</summary>
		</member>
		<member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
			<summary>Return any property that is valid on the  object in the current scope. See Remarks.</summary>
		</member>
		<member name="T:System.ComponentModel.SortDescription">
			<summary>Defines the direction and the property name to be used as the criteria for sorting a collection.</summary>
		</member>
		<member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
			<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescription"></see> structure.</summary>
			<param name="direction">The sort order.</param>
			<param name="propertyName">The name of the property to sort the list by.</param>
			<exception cref="T:System.ArgumentNullException">The propertyName parameter cannot be null.</exception>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The direction parameter does not specify a valid value.</exception>
			<exception cref="T:System.ArgumentException">The propertyName parameter cannot be empty</exception>
		</member>
		<member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
			<summary>Compares the specified instance and the current instance of <see cref="T:System.ComponentModel.SortDescription"></see> for value equality.</summary>
			<returns>true if obj and this instance of <see cref="T:System.ComponentModel.SortDescription"></see> have the same values.</returns>
			<param name="obj">The <see cref="T:System.ComponentModel.SortDescription"></see> instance to compare.</param>
		</member>
		<member name="M:System.ComponentModel.SortDescription.GetHashCode">
			<summary>Returns the hash code for this instance of <see cref="T:System.ComponentModel.SortDescription"></see>.</summary>
			<returns>The hash code for this instance of <see cref="T:System.ComponentModel.SortDescription"></see>.</returns>
		</member>
		<member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
			<summary>Compares two <see cref="T:System.ComponentModel.SortDescription"></see> objects for value equality.</summary>
			<returns>true if the two objects are equal; otherwise, false.</returns>
			<param name="sd1">The first instance to compare.</param>
			<param name="sd2">The second instance to compare.</param>
		</member>
		<member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
			<summary>Compares two <see cref="T:System.ComponentModel.SortDescription"></see> objects for value inequality.</summary>
			<returns>true if the values are not equal; otherwise, false.</returns>
			<param name="sd1">The first instance to compare.</param>
			<param name="sd2">The second instance to compare.</param>
		</member>
		<member name="P:System.ComponentModel.SortDescription.Direction">
			<summary>Gets or sets a value that indicates whether to sort in ascending or descending order.</summary>
			<returns>A <see cref="T:System.ComponentModel.ListSortDirection"></see> value to indicate whether to sort in ascending or descending order.</returns>
		</member>
		<member name="P:System.ComponentModel.SortDescription.IsSealed">
			<summary>Gets a value that indicates whether this object is in an immutable state.</summary>
			<returns>true if this object is in use; otherwise, false.</returns>
		</member>
		<member name="P:System.ComponentModel.SortDescription.PropertyName">
			<summary>Gets or sets the property name being used as the sorting criteria.</summary>
			<returns>The default value is null.</returns>
		</member>
		<member name="T:System.ComponentModel.SortDescriptionCollection">
			<summary>Represents a collection of <see cref="T:System.ComponentModel.SortDescription"></see> objects.</summary>
		</member>
		<member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescriptionCollection"></see> class.</summary>
		</member>
		<member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
			<summary>Occurs when an item is added or removed.</summary>
		</member>
		<member name="E:System.ComponentModel.SortDescriptionCollection.System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
			<summary>Occurs when an item is added or removed.</summary>
		</member>
		<member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
			<summary>Inserts an item into the collection at the specified index.</summary>
			<param name="item">The object to insert.</param>
			<param name="index">The zero-based index where the item is inserted.</param>
		</member>
		<member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
			<summary>Removes the item at the specified index in the collection.</summary>
			<param name="index">The zero-based index of the element to remove.</param>
		</member>
		<member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
			<summary>Replaces the element at the specified index.</summary>
			<param name="item">The new value for the element at the specified index.</param>
			<param name="index">The zero-based index of the element to replace.</param>
		</member>
		<member name="T:System.Diagnostics.PresentationTraceSources">
			<summary>Provides debug tracing support that is specifically targeted for Windows Presentation Foundation (WPF) applications. This is an abstract class.</summary>
		</member>
		<member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
			<summary>Refreshes trace sources, by forcing the app.config file to be re-read</summary>
		</member>
		<member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
			<summary>Gets an animation trace source.</summary>
			<returns>An animation trace source.</returns>
		</member>
		<member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
			<summary>Gets a databinding trace source.</summary>
			<returns>A databinding trace source.</returns>
		</member>
		<member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
			<summary>Gets a dependency property trace source.</summary>
			<returns>A dependency property trace source.</returns>
		</member>
		<member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
			<summary>Gets a document trace source.</summary>
			<returns>A document trace source.</returns>
		</member>
		<member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
			<summary>Gets a Freezable trace source.</summary>
			<returns>A Freezable trace source.</returns>
		</member>
		<member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
			<summary>Gets a markup trace source.</summary>
			<returns>A markup trace source.</returns>
		</member>
		<member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
			<summary>Gets a name scope trace source.</summary>
			<returns>A name scope trace source.</returns>
		</member>
		<member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
			<summary>Gets a resource dictionary trace source.</summary>
			<returns>A resource dictionary trace source.</returns>
		</member>
		<member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
			<summary>Gets a routed event trace source.</summary>
			<returns>A routed event trace source.</returns>
		</member>
		<member name="T:System.IO.FileFormatException">
			<summary>The exception that is thrown when an input file or a data stream that is supposed to conform to a certain file format specification is malformed.</summary>
		</member>
		<member name="M:System.IO.FileFormatException.#ctor">
			<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException"></see> class.</summary>
		</member>
		<member name="M:System.IO.FileFormatException.#ctor(System.String)">
			<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException"></see> class with a specified error message.</summary>
			<param name="message">A <see cref="T:System.String"></see> value that represents the error message.</param>
		</member>
		<member name="M:System.IO.FileFormatException.#ctor(System.Uri)">
			<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException"></see> class with a source URI value.</summary>
			<param name="sourceUri">The <see cref="T:System.Uri"></see> value of the file that caused this error.</param>
		</member>
		<member name="M:System.IO.FileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException"></see> class and initializes it with serialized data. This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. </summary>
			<param name="context">The contextual information about the source or destination.</param>
			<param name="info">The object that holds the serialized object data.</param>
		</member>
		<member name="M:System.IO.FileFormatException.#ctor(System.String,System.Exception)">
			<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException"></see> class with a specified error message and exception type.</summary>
			<param name="message">A <see cref="T:System.String"></see> value that represents the error message.</param>
			<param name="innerException">The value of the <see cref="P:System.Exception.InnerException"></see> property, which represents the cause of the current exception.</param>
		</member>
		<member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.Exception)">
			<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException"></see> class with a source URI value and an exception type.</summary>
			<param name="sourceUri">The <see cref="T:System.Uri"></see> value of the file that caused this error.</param>
			<param name="innerException">The value of the <see cref="P:System.Exception.InnerException"></see> property, which represents the cause of the current exception.</param>
		</member>
		<member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String)">
			<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException"></see> class with a source URI value and a specified error message.</summary>
			<param name="message">A <see cref="T:System.String"></see> value that represents the error message.</param>
			<param name="sourceUri">The <see cref="T:System.Uri"></see> value of the file that caused this error.</param>
		</member>
		<member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String,System.Exception)">
			<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException"></see> class with a source URI value, a specified error message, and an exception type.</summary>
			<param name="message">A <see cref="T:System.String"></see> value that represents the error message.</param>
			<param name="sourceUri">The <see cref="T:System.Uri"></see> value of the file that caused this error.</param>
			<param name="innerException">The value of the <see cref="P:System.Exception.InnerException"></see> property, which represents the cause of the current exception.</param>
		</member>
		<member name="M:System.IO.FileFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> object with the file name and additional exception information.</summary>
			<param name="context">The contextual information about the source or destination.</param>
			<param name="info">The object that holds the serialized object data.</param>
		</member>
		<member name="P:System.IO.FileFormatException.SourceUri">
			<summary>Gets the name of a file that caused the <see cref="T:System.IO.FileFormatException"></see>.</summary>
			<returns>A <see cref="T:System.Uri"></see> that represents the name the file that caused the exception.</returns>
		</member>
		<member name="N:System.IO.Packaging">
			<summary>Provides classes that support storage of multiple data objects in a single container.</summary>
		</member>
		<member name="T:System.IO.Packaging.CertificateEmbeddingOption">
			<summary>Specifies the location where the X.509 certificate that is used in signing is stored.</summary>
		</member>
		<member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
			<summary>The certificate is embedded in its own PackagePart.</summary>
		</member>
		<member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
			<summary>The certificate is embedded in the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart"></see> that is created for the signature being added.</summary>
		</member>
		<member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
			<summary>The certificate in not embedded in the package.</summary>
		</member>
		<member name="T:System.IO.Packaging.CompressionOption">
			<summary>Specifies the compression level for content that is stored in a <see cref="T:System.IO.Packaging.PackagePart"></see>. </summary>
		</member>
		<member name="F:System.IO.Packaging.CompressionOption.Fast">
			<summary>Compression is optimized for performance. </summary>
		</member>
		<member name="F:System.IO.Packaging.CompressionOption.Maximum">
			<summary>Compression is optimized for size. </summary>
		</member>
		<member name="F:System.IO.Packaging.CompressionOption.Normal">
			<summary>Compression is optimized for a balance between size and performance. </summary>
		</member>
		<member name="F:System.IO.Packaging.CompressionOption.NotCompressed">
			<summary>Compression is turned off. </summary>
		</member>
		<member name="F:System.IO.Packaging.CompressionOption.SuperFast">
			<summary>Compression is optimized for high performance.</summary>
		</member>
		<member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
			<summary>Represents an OLE compound file that contains an encrypted package.</summary>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
			<summary>Closes the encrypted package and the OLE compound file that holds it.</summary>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
			<summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see> on the specified stream.</summary>
			<returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see>. </returns>
			<param name="publishLicense">The publish license that is embedded in the compound file.</param>
			<param name="envelopeStream">The stream on which to create the file.</param>
			<param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
			<exception cref="T:System.NotSupportedException">envelopeStream does not provide read/write access.</exception>
			<exception cref="T:System.ArgumentNullException">envelopeStream is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
			<summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see> and gives it the specified file name.</summary>
			<returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see>. </returns>
			<param name="publishLicense">The publish license that is embedded in the compound file.</param>
			<param name="envelopeFileName">The name of the OLE compound file.</param>
			<param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
			<exception cref="T:System.ArgumentNullException">envelopeFileName is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
			<summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see> (on the specified stream) that uses the specified unencrypted package as its content.</summary>
			<returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see>. </returns>
			<param name="packageStream">The stream representing the existing unencrypted package.</param>
			<param name="publishLicense">The publish license that is embedded in the compound file.</param>
			<param name="envelopeStream">The stream on which to create the file.</param>
			<param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
			<exception cref="T:System.NotSupportedException">envelopeStream does not provide read/write access.</exception>
			<exception cref="T:System.ArgumentNullException">envelopeStream or packageStream is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
			<summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see> that uses the specified unencrypted package as its content, and gives it the specified file name.</summary>
			<returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see>.</returns>
			<param name="packageStream">The stream representing the existing unencrypted package.</param>
			<param name="publishLicense">The publish license that is embedded in the compound file.</param>
			<param name="envelopeFileName">The name of the OLE compound file.</param>
			<param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
			<exception cref="T:System.ArgumentNullException">envelopeFileName or packageStream is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
			<summary>Releases all resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see>. </summary>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
			<summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see> and optionally releases the managed resources. </summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
			<summary>Flush the stream for both the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see> and its package content.</summary>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
			<summary>Gets the encrypted package inside the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see>.</summary>
			<returns>The <see cref="T:System.IO.Packaging.Package"></see> in the envelope. </returns>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
			<summary>Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.</summary>
			<returns>true if the specified stream is an OLE compound file with an encrypted package stream; otherwise, false. </returns>
			<param name="stream">The stream that is tested.</param>
			<exception cref="T:System.ArgumentNullException">stream is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
			<summary>Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.</summary>
			<returns>true if the specified file is an OLE compound file with an encrypted package stream; otherwise, false. </returns>
			<param name="fileName">The file that is tested.</param>
			<exception cref="T:System.ArgumentNullException">fileName is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
			<summary>Open the encrypted package in the specified stream.</summary>
			<returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see> that is opened.</returns>
			<param name="envelopeStream">The stream containing the encrypted package.</param>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
			<summary>Open the encrypted package in the specified file as read only and unshared.</summary>
			<returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see> that is opened.</returns>
			<param name="envelopeFileName">The file containing the encrypted package.</param>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
			<summary>Open the encrypted package in the specified file as unshared and with the specified access.</summary>
			<returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see> that is opened.</returns>
			<param name="access">The type of access.</param>
			<param name="envelopeFileName">The file containing the encrypted package.</param>
		</member>
		<member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
			<summary>Open the encrypted package in the specified file and gives it the specified access and sharing.</summary>
			<returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see> that is opened.</returns>
			<param name="sharing">The type of sharing.</param>
			<param name="access">The type of access.</param>
			<param name="envelopeFileName">The file containing the encrypted package.</param>
		</member>
		<member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
			<summary>Gets a value that specifies whether the file was opened with access to read, write, or both.</summary>
			<returns>The <see cref="T:System.IO.FileAccess"></see> value that was used to open the file. </returns>
		</member>
		<member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
			<summary>Gets the core package properties (such as Title and Subject) of the rights managed document.</summary>
			<returns>The <see cref="T:System.IO.Packaging.PackageProperties"></see> for the package.</returns>
		</member>
		<member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
			<summary>Gets the rights management information stored in the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see>; specifically, the <see cref="T:System.Security.RightsManagement.PublishLicense"></see> and the <see cref="T:System.Security.RightsManagement.UseLicense"></see>s stored in the OLE compound file that embodies the rights-management protected package</summary>
			<returns>The <see cref="T:System.IO.Packaging.RightsManagementInformation"></see> for the package.</returns>
		</member>
		<member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
			<summary>Gets an object that provides access to the compound file streams outside the encrypted package.</summary>
			<returns>A <see cref="T:System.IO.Packaging.StorageInfo"></see> representing streams in the OLE compound file that are outside the encrypted package.</returns>
		</member>
		<member name="T:System.IO.Packaging.EncryptionOption">
			<summary>Specifies the encryption option for parts in a <see cref="T:System.IO.Packaging.Package"></see>.</summary>
		</member>
		<member name="F:System.IO.Packaging.EncryptionOption.None">
			<summary>No encryption.</summary>
		</member>
		<member name="F:System.IO.Packaging.EncryptionOption.RightsManagement">
			<summary>Encryption supported through rights management.</summary>
		</member>
		<member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
			<summary>Represents the method that handles the InvalidSignatureEvent that is raised when VerifySignatures detects an invalid signature.</summary>
		</member>
		<member name="T:System.IO.Packaging.Package">
			<summary>Represents a container that can store multiple data objects.</summary>
		</member>
		<member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)">
			<summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.Package"></see> class that uses a given <see cref="T:System.IO.FileAccess"></see>.</summary>
			<param name="openFileAccess">The file IO permissions for the package.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The value for openFileAccess is not valid.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.Package"></see> class that uses a given <see cref="T:System.IO.FileAccess"></see> and streaming option.</summary>
			<param name="openFileAccess">The file IO permissions for the package.</param>
			<param name="streaming">true to open the package for streaming; otherwise, false.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The value for openFileAccess is not valid.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)">
			<summary>Creates a new uncompressed part with a specified URI and content type.</summary>
			<returns>The new created part.</returns>
			<param name="contentType">The content type of the data stream.</param>
			<param name="partUri">The uniform resource identifier (URI) of the new part.</param>
			<exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
			<exception cref="T:System.InvalidOperationException">A part with the specified partUri is already present in the package.</exception>
			<exception cref="T:System.ArgumentNullException">partUri or contentType is null.</exception>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.ArgumentException">partUri is not a valid <see cref="T:System.IO.Packaging.PackagePart"></see> URI.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
			<summary>Creates a new part with a specified URI, content type, and compression option.</summary>
			<returns>The new created part.</returns>
			<param name="contentType">The content type of the data stream.</param>
			<param name="compressionOption">The compression option for the data stream, <see cref="F:System.IO.Packaging.CompressionOption.NotCompressed"></see> or <see cref="F:System.IO.Packaging.CompressionOption.Normal"></see> compression.</param>
			<param name="partUri">The URI of the new part.</param>
			<exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
			<exception cref="T:System.InvalidOperationException">A part with the specified partUri is already present in the package.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The compressionOption value is not valid.</exception>
			<exception cref="T:System.ArgumentNullException">partUri or contentType is null.</exception>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.ArgumentException">partUri is not a valid <see cref="T:System.IO.Packaging.PackagePart"></see> uniform resource identifier (URI).</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
			<summary>When overridden in a derived class, creates a new part in the package.</summary>
			<returns>The created part.</returns>
			<param name="contentType">The content type of the data stream.</param>
			<param name="compressionOption">The compression option for the data stream.</param>
			<param name="partUri">The uniform resource identifier (URI) for the part being created.</param>
		</member>
		<member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
			<summary>Creates a package-level relationship to a specified part with a given URI, target mode, and relationship type. </summary>
			<returns>The package-level relationship to the specified part.</returns>
			<param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
			<param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
			<param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal"></see> or <see cref="F:System.IO.Packaging.TargetMode.External"></see> to the package.</param>
			<exception cref="T:System.ArgumentException">The targetUri part is a <see cref="T:System.IO.Packaging.PackageRelationship"></see>, or targetMode is <see cref="F:System.IO.Packaging.TargetMode.Internal"></see> and targetUri is an absolute URI.</exception>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.IO.IOException">The package is read-only.</exception>
			<exception cref="T:System.ArgumentNullException">targetUri or relationshipType is null.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The value for targetMode is not valid.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
			<summary>Creates a package-level relationship to a specified part with a given URI, target mode, relationship type, and identifier (ID).</summary>
			<returns>The package-level relationship to the specified part.</returns>
			<param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
			<param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
			<param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal"></see> or <see cref="F:System.IO.Packaging.TargetMode.External"></see> to the package.</param>
			<param name="id">A unique XML identifier.</param>
			<exception cref="T:System.Xml.XmlException">id is not a valid XML identifier; or a part with the specified id already occurs in the package.</exception>
			<exception cref="T:System.ArgumentException">The targetUri part is a <see cref="T:System.IO.Packaging.PackageRelationship"></see>, or targetMode is <see cref="F:System.IO.Packaging.TargetMode.Internal"></see> and targetUri is an absolute URI.</exception>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.IO.IOException">The package is read-only.</exception>
			<exception cref="T:System.ArgumentNullException">targetUri or relationshipType is null.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The value for targetMode is not valid.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.DeletePart(System.Uri)">
			<summary>Deletes a part with a specified URI from the package.</summary>
			<param name="partUri">The URI of the part to delete.</param>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.IO.IOException">The package is read-only.</exception>
			<exception cref="T:System.ArgumentException">partUri is not a valid <see cref="T:System.IO.Packaging.PackagePart"></see> URI.</exception>
			<exception cref="T:System.ArgumentNullException">partUri is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)">
			<summary>When overridden in a derived class, deletes a part with a given URI. </summary>
			<param name="partUri">The Uri of the PackagePart to delete.</param>
		</member>
		<member name="M:System.IO.Packaging.Package.DeleteRelationship(System.String)">
			<summary>Deletes a package-level relationship.</summary>
			<param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id"></see> of the <see cref="T:System.IO.Packaging.PackageRelationship"></see> to delete.</param>
			<exception cref="T:System.Xml.XmlException">id is not a valid XML identifier.</exception>
			<exception cref="T:System.ArgumentNullException">id is null.</exception>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.IO.IOException">The package is read-only.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.Dispose(System.Boolean)">
			<summary>Flushes and saves the content of all parts and relationships, closes the package, and releases all resources.</summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
		</member>
		<member name="M:System.IO.Packaging.Package.Flush">
			<summary>Saves the contents of all parts and relationships that are contained in the package.</summary>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.IO.IOException">The package is read-only and cannot be modified.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.GetPart(System.Uri)">
			<summary>Returns the part with a given URI.</summary>
			<returns>The part with the specified partUri.</returns>
			<param name="partUri">The uniform resource identifier (URI) of the part to return.</param>
			<exception cref="T:System.InvalidOperationException">A part with the specified partUri is not in the package.</exception>
			<exception cref="T:System.IO.IOException">The package is write-only.</exception>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.ArgumentNullException">partUri is null.</exception>
			<exception cref="T:System.ArgumentException">partUri is not a valid <see cref="T:System.IO.Packaging.PackagePart"></see> uniform resource identifier (URI).</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.GetPartCore(System.Uri)">
			<summary>When overridden in a derived class, returns the part addressed by a specified URI.</summary>
			<returns>The requested part; or null, if a part with the specified partUri is not in the package.</returns>
			<param name="partUri">The uniform resource identifier (URI) of the part to retrieve.</param>
		</member>
		<member name="M:System.IO.Packaging.Package.GetParts">
			<summary>Returns a collection of all the parts in the package.</summary>
			<returns>A collection of all the PackagePart elements that are contained in the package.</returns>
			<exception cref="T:System.IO.IOException">The package is write-only.</exception>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.GetPartsCore">
			<summary>When overridden in a derived class, returns an array of all the parts in the package. </summary>
			<returns>An array of all the parts that are contained in the package.</returns>
		</member>
		<member name="M:System.IO.Packaging.Package.GetRelationship(System.String)">
			<summary>Returns the package-level relationship with the specified <see cref="P:System.IO.Packaging.PackageRelationship.Id"></see>.</summary>
			<returns>The package-level relationship with the specified id.</returns>
			<param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id"></see> of the relationship to return.</param>
			<exception cref="T:System.Xml.XmlException">id is not a valid XML identifier.</exception>
			<exception cref="T:System.ArgumentNullException">id is null.</exception>
			<exception cref="T:System.IO.IOException">The package is write-only.</exception>
			<exception cref="T:System.InvalidOperationException">A relationship with the specified id is not in the package.</exception>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.GetRelationships">
			<summary>Returns a collection of all the package-level relationships.</summary>
			<returns>A collection of all the package-level relationships that are contained in the package.</returns>
			<exception cref="T:System.IO.IOException">The package is write-only.</exception>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)">
			<summary>Returns a collection of all the package-level relationships that match a given RelationshipType. </summary>
			<returns>A collection of package-level relationships that match the specified relationshipType.</returns>
			<param name="relationshipType">The RelationshipType to match and return in the collection.</param>
			<exception cref="T:System.IO.IOException">The package is write-only.</exception>
			<exception cref="T:System.ArgumentNullException">relationshipType is null.</exception>
			<exception cref="T:System.ArgumentException">relationshipType is an empty string.</exception>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.Open(System.IO.Stream)">
			<summary>Opens a package on a specified IO stream.</summary>
			<returns>The opened package.</returns>
			<param name="stream">The IO stream on which to open the package.</param>
			<exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified stream is write-only; or, the package to open requires write or read/write permission and the specified stream is read-only.</exception>
			<exception cref="T:System.ArgumentNullException">stream is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.Open(System.String)">
			<summary>Opens a package at a specified path and file name.</summary>
			<returns>The opened package.</returns>
			<param name="path">The path and file name of the package.</param>
			<exception cref="T:System.ArgumentNullException">path is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)">
			<summary>Opens a package with a specified IO stream and file mode.</summary>
			<returns>The opened package.</returns>
			<param name="packageMode">The file mode in which to open the package.</param>
			<param name="stream">The IO stream on which to open the package.</param>
			<exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified stream is write-only; or, the package to open requires write or read/write permission and the specified stream is read-only.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">packageMode value is not valid.</exception>
			<exception cref="T:System.ArgumentNullException">stream is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)">
			<summary>Opens a package at a specified path using a given file mode. </summary>
			<returns>The opened package.</returns>
			<param name="packageMode">The file mode in which to open the package.</param>
			<param name="path">The path and file name of the package.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">Value for packageMode is not valid.</exception>
			<exception cref="T:System.ArgumentNullException">path is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)">
			<summary>Opens a package with a specified IO stream, file mode, and file access setting.</summary>
			<returns>The opened package.</returns>
			<param name="packageMode">The file mode in which to open the package.</param>
			<param name="stream">The IO stream on which to open the package.</param>
			<param name="packageAccess">The file access in which to open the package.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The value for packageMode or packageAccess is not valid.</exception>
			<exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified stream is write-only; or the package to open requires write or read/write permission and the specified stream is read-only.</exception>
			<exception cref="T:System.ArgumentNullException">stream is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
			<summary>Opens a package at a specified path using a given file mode and file access setting.</summary>
			<returns>The opened package.</returns>
			<param name="packageMode">The file mode in which to open the package.</param>
			<param name="packageAccess">The file access in which to open the package.</param>
			<param name="path">The path and file name of the package.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">Value for packageMode or packageAccess is not valid.</exception>
			<exception cref="T:System.ArgumentNullException">path is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
			<summary>Opens a package at a specified path using a given file mode, file access, and file share setting.</summary>
			<returns>The opened package.</returns>
			<param name="packageShare">The file sharing mode in which to open the package.</param>
			<param name="packageMode">The file mode in which to open the package.</param>
			<param name="packageAccess">The file access in which to open the package.</param>
			<param name="path">The path and file name of the package.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The value for packageMode, packageAccess, or packageShare is not valid.</exception>
			<exception cref="T:System.ArgumentNullException">path is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.PartExists(System.Uri)">
			<summary>Determines whether a part with a given URI is in the package.</summary>
			<returns>true if a part with the specified partUri is in the package; otherwise, false.</returns>
			<param name="partUri">The Uri of the part to check for.</param>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.ArgumentNullException">partUri is null.</exception>
			<exception cref="T:System.IO.IOException">The package is write-only (information cannot be read).</exception>
			<exception cref="T:System.ArgumentException">partUri is not a valid <see cref="T:System.IO.Packaging.PackagePart"></see> uniform resource identifier (URI).</exception>
		</member>
		<member name="M:System.IO.Packaging.Package.RelationshipExists(System.String)">
			<summary>Determines whether a package-level relationship with a given ID is contained in the package.</summary>
			<returns>true if a package-level relationship with the specified id is in the package; otherwise, false.</returns>
			<param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id"></see> of the relationship to check for.</param>
			<exception cref="T:System.Xml.XmlException">id is not a valid XML identifier.</exception>
			<exception cref="T:System.ArgumentNullException">id is null.</exception>
			<exception cref="T:System.IO.IOException">The package is write-only.</exception>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="P:System.IO.Packaging.Package.FileOpenAccess">
			<summary>Gets the <see cref="T:System.IO.FileAccess"></see> setting for the package.</summary>
			<returns>The current IO access setting: <see cref="F:System.IO.FileAccess.Read"></see>, <see cref="F:System.IO.FileAccess.Write"></see>, or <see cref="F:System.IO.FileAccess.ReadWrite"></see>.</returns>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="P:System.IO.Packaging.Package.PackageProperties">
			<summary>Gets the core properties of the package.</summary>
			<returns>The core properties of the package.</returns>
			<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="T:System.IO.Packaging.PackageDigitalSignature">
			<summary>Represents a digital signature that is applied to a set of package parts and relationships.</summary>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
			<summary>Returns an ordered list of the Transform operations applied to a given part. </summary>
			<returns>An ordered list of URI strings, such as XmlDsigCanonicalizationUrl or XmlDsigC14NTransformUrl that represent the Canonical XML transformations applied to the part with the given partName URI.</returns>
			<param name="partName">The Uri of the PackagePart to return the transform list for.</param>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
			<summary>Verifies the digital signature against an X.509 certificate. </summary>
			<returns><see cref="F:System.IO.Packaging.VerifyResult.Success"></see> if the verification succeeded; otherwise, one of the <see cref="T:System.IO.Packaging.VerifyResult"></see> enumerations that identifies a problem. </returns>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
			<summary>Verifies the digital signature against a given X.509 certificate. </summary>
			<returns><see cref="F:System.IO.Packaging.VerifyResult.Success"></see> if the verification succeeded; otherwise, one of the <see cref="T:System.IO.Packaging.VerifyResult"></see> enumerations that identify a problem.</returns>
			<param name="signingCertificate">The signer's X.509 certificate to verify the digital signature against.</param>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
			<summary>Gets the X.509 certificate embedding option. </summary>
			<returns>The certificate embedding option for this digital signature.</returns>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
			<summary>Gets or sets the XML digital signature.</summary>
			<returns>The XML digital signature.</returns>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
			<summary>Gets the PackagePart that contains this signature. </summary>
			<returns>The package part that contains this signature.</returns>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
			<summary>Gets the URI string that identifies the signature type. </summary>
			<returns>A URI string that identifies the signature type. The default signature type is XmlDsigC14NTransformUrl.</returns>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
			<summary>Gets the encrypted hash value of the <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see>. </summary>
			<returns>A byte array that contains the encrypted hash value of the <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see>.</returns>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
			<summary>Gets a collection of all the <see cref="T:System.IO.Packaging.PackagePart"></see> objects signed with this signature. </summary>
			<returns>A collection that contains all the package parts signed with this signature.</returns>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
			<summary>Gets the list of the <see cref="T:System.IO.Packaging.PackageRelationship"></see> parts that have been signed with this signature.</summary>
			<returns>The list of the <see cref="T:System.IO.Packaging.PackageRelationship"></see> parts that have been signed with this signature.</returns>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
			<summary>Gets the X.509 certificate of the signer. </summary>
			<returns>The digital certificate of the signer, or null if the certificate is not stored in the <see cref="T:System.IO.Packaging.Package"></see>.</returns>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
			<summary>Gets the date and time that the signature was created. </summary>
			<returns>The date and time that the signature was created.</returns>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
			<summary>Gets the format of the date and time returned by SigningTime. </summary>
			<returns>The format of the date and time returned by SigningTime.</returns>
			<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature"></see> has been deleted.</exception>
		</member>
		<member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
			<summary>Provides a utility class for the creation and verification of digital signatures in a <see cref="T:System.IO.Packaging.Package"></see>.    </summary>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
			<summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager"></see> class for use with a specified <see cref="T:System.IO.Packaging.Package"></see>. </summary>
			<param name="package">The package associated with this signature manager.</param>
		</member>
		<member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
			<summary>Occurs when <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)"></see> encounters an invalid signature. </summary>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
			<summary>Countersigns all the signatures in the package with a user-selected X.509 certificate.</summary>
			<returns>The signature that was added as a countersign; or null if no certificate could be located or the user canceled the certificate selection dialog.</returns>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
			<summary>Countersigns all the signatures in the package with a specified X.509 certificate. </summary>
			<returns>The signature that was added as a countersign.</returns>
			<param name="certificate">The X.509 certificate to add as a countersign signature.</param>
			<exception cref="T:System.ArgumentNullException">certificate is null</exception>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
			<summary>Countersigns a list of signatures with a given X.509 certificate.</summary>
			<returns>The digital signature used to countersign each of the signatures.</returns>
			<param name="certificate">The X.509 certificate to countersign each of the specified signatures.</param>
			<param name="signatures">The list of signatures to countersign.</param>
			<exception cref="T:System.ArgumentException">The package contains no <see cref="T:System.IO.Packaging.PackageDigitalSignature"></see> parts.</exception>
			<exception cref="T:System.InvalidOperationException">The package contains no signed <see cref="T:System.IO.Packaging.PackagePart"></see> objects.</exception>
			<exception cref="T:System.ArgumentNullException">Either the certificate or signatures parameter is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
			<summary>Returns the digital signature for a given signature uniform resource identifier (URI). </summary>
			<returns>The digital signature for the specified signatureUri, or null if a signature for the given signatureUri cannot be found.</returns>
			<param name="signatureUri">The URI of the digital signature to return.</param>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
			<summary>Removes the digital signature with a given signature uniform resource identifier (URI). </summary>
			<param name="signatureUri">The URI of the <see cref="T:System.IO.Packaging.PackageDigitalSignature"></see> to remove.</param>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
			<summary>Prompts the user for an X.509 certificate, which is then used to digitally sign a specified list of package parts.</summary>
			<returns>The digital signature used to sign the list of parts.</returns>
			<param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart"></see> elements to sign.</param>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
			<summary>Signs a list of package parts with a given X.509 certificate. </summary>
			<returns>The digital signature used to sign the given list of parts; or null if no certificate could be found or the user clicked "Cancel" in the certificate selection dialog box.</returns>
			<param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart"></see> elements to sign.</param>
			<param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts.</param>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
			<summary>Signs a list of package parts and package relationships with a given X.509 certificate. </summary>
			<returns>The digital signature used to sign the elements specified in the parts and relationshipSelectors lists.</returns>
			<param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart"></see> objects to sign.</param>
			<param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
			<param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship"></see> objects to sign.</param>
			<exception cref="T:System.ArgumentException">Neither parts nor relationshipSelectors specify any objects to sign.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
			<summary>Signs a list of package parts and package relationships with a given X.509 certificate and identifier (ID).</summary>
			<returns>The digital signature used to sign the elements specified in the parts and relationshipSelectors lists.</returns>
			<param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart"></see> objects to sign.</param>
			<param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
			<param name="signatureId">An identification string to associate with the signature.</param>
			<param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship"></see> objects to sign.</param>
			<exception cref="T:System.ArgumentException">Neither parts nor relationshipSelectors specify any elements to sign.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
			<summary>Signs a list of package parts, package relationships, or custom objects with a specified X.509 certificate and signature identifier (ID).</summary>
			<returns>The digital signature used to sign the elements specified in the parts and relationshipSelectors lists.</returns>
			<param name="parts">The list of uniform resource identifiers (URIs) for the <see cref="T:System.IO.Packaging.PackagePart"></see> objects to sign.</param>
			<param name="signatureObjects">A list of custom data objects to sign.</param>
			<param name="certificate">The X.509 certificate to use to digitally sign each of the specified parts and relationships.</param>
			<param name="signatureId">An identification string to associate with the signature.</param>
			<param name="relationshipSelectors">The list of <see cref="T:System.IO.Packaging.PackageRelationship"></see> objects to sign.</param>
			<param name="objectReferences">A list of references to custom objects to sign.</param>
			<exception cref="T:System.InvalidOperationException">A <see cref="P:System.IO.Packaging.PackagePart.ContentType"></see> of a part being signed references an empty, null, or undefined <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping"></see>.</exception>
			<exception cref="T:System.Xml.XmlException">signatureId is not null and is not a valid XML schema ID (for example, begins with a leading numeric digit).</exception>
			<exception cref="T:System.ArgumentException">Neither parts, relationshipSelectors, signatureObjects, nor objectReferences specify any elements to sign.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
			<summary>Verifies a given X.509 certificate. </summary>
			<returns><see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError"></see> (value 0) if the certificate verified successfully; otherwise, a bitwise enumeration of error flags.</returns>
			<param name="certificate">The X.509 certificate to verify.</param>
		</member>
		<member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
			<summary>Verifies the signatures on all signed parts within the package. </summary>
			<returns><see cref="F:System.IO.Packaging.VerifyResult.Success"></see> (value 0) if all signatures are verified successfully; otherwise, an enumeration that identifies the error.</returns>
			<param name="exitOnFailure">true to exit on first failure; otherwise, false to continue and check all signatures.</param>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
			<summary>Gets or sets the X.509 certificate embedding option used by the <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})"></see> method to digitally sign package parts. </summary>
			<returns>One of the <see cref="T:System.IO.Packaging.CertificateEmbeddingOption"></see> values. </returns>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
			<summary>Gets a URI string that identifies the default hash algorithm used to create and verify signatures. </summary>
			<returns>A URI string that identifies the default hash algorithm used to create and verify signatures.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
			<summary>Gets or sets the URI identifier for the <see cref="T:System.Security.Cryptography.HashAlgorithm"></see> instance used to create and verify signatures. </summary>
			<returns>The <see cref="T:System.Security.Cryptography.Xml.SignedXml"></see> URI identifier for the <see cref="T:System.Security.Cryptography.HashAlgorithm"></see> instance used to create and verify signatures.</returns>
			<exception cref="T:System.ArgumentNullException">The string for the URI to set is null.</exception>
			<exception cref="T:System.ArgumentException">The string for the URI to set is empty.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
			<summary>Gets a value that indicates whether the package contains any signatures. </summary>
			<returns>true if the package contains signatures; otherwise, false.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
			<summary>Gets or sets a handle to the parent window for displaying a certificate selection dialog box. </summary>
			<returns>The handle of the parent window to use to display the certificate selection dialog box.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
			<summary>Gets the uniform resource identifier (URI) of the signature origin part.</summary>
			<returns>The URI of the signature origin part.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
			<summary>Gets the type of default signature origin relationship.</summary>
			<returns>The type of default signature origin relationship.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
			<summary>Gets a collection of all the signatures contained in the package. </summary>
			<returns>A collection of all the <see cref="T:System.IO.Packaging.PackageDigitalSignature"></see> objects.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
			<summary>Gets or sets the date/time format used to create a signature SigningTime. </summary>
			<returns>The date/time format used to create a signature SigningTime.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
			<summary>Gets a dictionary that contains each defined ContentType and its associated XMLTransform.Algorithm identifier. </summary>
			<returns>A dictionary that contains each defined ContentType and its associated XMLTransform.Algorithm identifier.</returns>
		</member>
		<member name="T:System.IO.Packaging.PackagePart">
			<summary>Provides a base class for parts stored in a <see cref="T:System.IO.Packaging.Package"></see>.  This class is abstract.</summary>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)">
			<summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart"></see> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package"></see> and part URI.</summary>
			<param name="package">The parent <see cref="T:System.IO.Packaging.Package"></see> of the part.</param>
			<param name="partUri">The URIof the part, relative to the parent <see cref="T:System.IO.Packaging.Package"></see> root.</param>
			<exception cref="T:System.ArgumentNullException">package or partUri is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart"></see> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package"></see>, part URI, and MIME content type.</summary>
			<param name="contentType">The MIME content type of the part data stream.</param>
			<param name="package">The parent <see cref="T:System.IO.Packaging.Package"></see> of the part.</param>
			<param name="partUri">The URIof the part, relative to the parent <see cref="T:System.IO.Packaging.Package"></see> root.</param>
			<exception cref="T:System.ArgumentNullException">package or partUri is null.</exception>
			<exception cref="T:System.ArgumentException">partUri is not a valid <see cref="T:System.IO.Packaging.PackagePart"></see> URI.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)">
			<summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackagePart"></see> class with a specified parent <see cref="P:System.IO.Packaging.PackagePart.Package"></see>, part URI, MIME content type, and <see cref="T:System.IO.Packaging.CompressionOption"></see>.</summary>
			<param name="compressionOption">The compression option of the part data stream.</param>
			<param name="contentType">The MIME content type of the part's data stream.</param>
			<param name="package">The parent Package of the part.</param>
			<param name="partUri">The URI of the part, relative to the parent <see cref="T:System.IO.Packaging.Package"></see> root.</param>
			<exception cref="T:System.ArgumentException">partUri is not a valid <see cref="T:System.IO.Packaging.PackagePart"></see> </exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The compressionOption value is not valid.</exception>
			<exception cref="T:System.ArgumentNullException">package or partUri is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
			<summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart"></see> to a specified target <see cref="T:System.IO.Packaging.PackagePart"></see> or external resource.</summary>
			<returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart"></see> to the target <see cref="T:System.IO.Packaging.PackagePart"></see> or external resource.</returns>
			<param name="targetUri">The URIof the target part.</param>
			<param name="relationshipType">The role of the relationship.</param>
			<param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal"></see> if the target part is inside the <see cref="T:System.IO.Packaging.Package"></see>; or <see cref="F:System.IO.Packaging.TargetMode.External"></see> if the target is a resource outside the <see cref="T:System.IO.Packaging.Package"></see>.</param>
			<exception cref="T:System.ArgumentException">The part identified by the targetUri is a relationship (the target of a relationship cannot be another relationship).-or-targetMode is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal"></see> but targetUri is an absolute external URI.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The targetMode parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode"></see> enumeration value.</exception>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception>
			<exception cref="T:System.ArgumentNullException">targetUri or relationshipType is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
			<summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart"></see> to a specified target <see cref="T:System.IO.Packaging.PackagePart"></see> or external resource.</summary>
			<returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart"></see> to the target <see cref="T:System.IO.Packaging.PackagePart"></see> or external resource.</returns>
			<param name="targetUri">The URIof the target part.</param>
			<param name="relationshipType">The role of the relationship.</param>
			<param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal"></see> if the target part is inside the <see cref="T:System.IO.Packaging.Package"></see>; or <see cref="F:System.IO.Packaging.TargetMode.External"></see> if the target is a resource outside the <see cref="T:System.IO.Packaging.Package"></see>.</param>
			<param name="id">A unique ID for the relationship.</param>
			<exception cref="T:System.ArgumentException">The part identified by the targetUri is a relationship (the target of a relationship cannot be another relationship).-or-targetMode is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal"></see> but targetUri is an absolute external URI.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The targetMode parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode"></see> enumeration value.</exception>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception>
			<exception cref="T:System.Xml.XmlException">id is not a valid XML identifier.-or-A part with the specified id already exists.</exception>
			<exception cref="T:System.ArgumentNullException">targetUri or relationshipType is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)">
			<summary>Deletes a specified part-level <see cref="T:System.IO.Packaging.PackageRelationship"></see>.</summary>
			<param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id"></see> of the relationship to delete.</param>
			<exception cref="T:System.Xml.XmlException">id is not a valid XML identifier.</exception>
			<exception cref="T:System.ArgumentNullException">id is null.</exception>
			<exception cref="T:System.IO.IOException">The package is read-only (relationships cannot be deleted).</exception>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.GetContentTypeCore">
			<summary>When overridden in a derived class, returns the MIME type of the part content.</summary>
			<returns>The MIME type of the part content.</returns>
			<exception cref="T:System.NotSupportedException">The derived class does not provide an override implementation required for the <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore"></see> method.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)">
			<summary>Returns the relationship that has a specified Id. </summary>
			<returns>The relationship that matches the specified id.</returns>
			<param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id"></see> of the relationship to return.</param>
			<exception cref="T:System.Xml.XmlException">id is not a valid XML identifier.</exception>
			<exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
			<exception cref="T:System.ArgumentNullException">id is null.</exception>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).-or-A relationship with the specified id does not exist in the package.</exception>
			<exception cref="T:System.ArgumentException">relationshipType is an empty string.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.GetRelationships">
			<summary>Returns a collection of all the relationships that are owned by this part.</summary>
			<returns>A collection of all the relationships that are owned by the part.</returns>
			<exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)">
			<summary>Returns a collection of the relationships that match a specified <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType"></see>.</summary>
			<returns>A collection of the relationships that match the specified relationshipType.</returns>
			<param name="relationshipType">The RelationshipType of the relationships to locate and return in the collection.</param>
			<exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
			<exception cref="T:System.ArgumentNullException">relationshipType is null.</exception>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.ArgumentException">relationshipType is an empty string.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.GetStream">
			<summary>Returns the part content data stream.</summary>
			<returns>The content data stream for the part.</returns>
			<exception cref="T:System.IO.IOException">The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)"></see> method of the derived subclass is null.</exception>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)">
			<summary>Returns the content stream opened in a specified I/O <see cref="T:System.IO.FileMode"></see>.</summary>
			<returns>The content stream of the part.</returns>
			<param name="mode">The I/O mode in which to open the content stream.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The mode parameter is not a valid <see cref="T:System.IO.FileMode"></see> enumeration value.</exception>
			<exception cref="T:System.IO.IOException">The mode parameter is not compatible with the package and part stream.-or-The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)"></see> method of the derived subclass is null.</exception>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
			<summary>Returns the part content stream opened with a specified <see cref="T:System.IO.FileMode"></see> and <see cref="T:System.IO.FileAccess"></see>.</summary>
			<returns>The content stream for the part.</returns>
			<param name="mode">The I/O mode in which to open the content stream.</param>
			<param name="access">The access permissions to use in opening the content stream.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The mode parameter is not a valid <see cref="T:System.IO.FileMode"></see> enumeration value.-or-The access parameter is not a valid <see cref="T:System.IO.FileAccess"></see> enumeration value.</exception>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
			<exception cref="T:System.IO.IOException">mode or access is not compatible with the package and part stream.-or-The access parameter is specified as <see cref="F:System.IO.FileAccess.Read"></see> but the mode parameter requires write access.  (<see cref="T:System.IO.FileMode"></see> values of <see cref="F:System.IO.FileMode.Create"></see>, <see cref="F:System.IO.FileMode.CreateNew"></see>, <see cref="F:System.IO.FileMode.Truncate"></see>, and <see cref="F:System.IO.FileMode.Append"></see> require <see cref="F:System.IO.FileAccess.Write"></see> or <see cref="F:System.IO.FileAccess.ReadWrite"></see> access.)-or-The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)"></see> method of the derived subclass is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)">
			<summary>When overridden in a derived class, returns the part content stream opened with a specified <see cref="T:System.IO.FileMode"></see> and <see cref="T:System.IO.FileAccess"></see>.</summary>
			<returns>The content data stream of the part.</returns>
			<param name="mode">The I/O mode in which to open the content stream.</param>
			<param name="access">The access permissions to use in opening the content stream.</param>
		</member>
		<member name="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)">
			<summary>Returns a value that indicates whether this part owns a relationship with a specified <see cref="P:System.IO.Packaging.PackageRelationship.Id"></see>.</summary>
			<returns>true if this part owns a relationship with the specified id; otherwise, false.</returns>
			<param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id"></see> of the relationship to check for.</param>
			<exception cref="T:System.Xml.XmlException">id is not a valid XML identifier.</exception>
			<exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
			<exception cref="T:System.ArgumentNullException">id is null.</exception>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="P:System.IO.Packaging.PackagePart.CompressionOption">
			<summary>Gets the compression option of the part content stream.</summary>
			<returns>The compression option of the part content stream.</returns>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="P:System.IO.Packaging.PackagePart.ContentType">
			<summary>Gets the MIME type of the content stream.</summary>
			<returns>The MIME type of the content data stream for the part.</returns>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).-or-The string returned by the derived class <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore"></see> method is empty.</exception>
		</member>
		<member name="P:System.IO.Packaging.PackagePart.Package">
			<summary>Gets the parent <see cref="T:System.IO.Packaging.Package"></see> of the part.</summary>
			<returns>The parent package of the part.</returns>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="P:System.IO.Packaging.PackagePart.Uri">
			<summary>Gets the URI of the part.</summary>
			<returns>The URI of the part relative to the package root.</returns>
			<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package"></see> is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)"></see> or <see cref="M:System.IO.Packaging.Package.Close"></see> has been called).</exception>
		</member>
		<member name="T:System.IO.Packaging.PackagePartCollection">
			<summary>Represents a collection of <see cref="T:System.IO.Packaging.PackagePart"></see> objects.</summary>
		</member>
		<member name="M:System.IO.Packaging.PackagePartCollection.GetEnumerator">
			<summary>Returns an enumerator for iterating through the parts in the collection. </summary>
			<returns>An enumerator for iterating through the <see cref="T:System.IO.Packaging.PackagePart"></see> elements in the collection.</returns>
		</member>
		<member name="M:System.IO.Packaging.PackagePartCollection.System.Collections.IEnumerable.GetEnumerator">
			<summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
			<returns>Do not use—use <see cref="M:System.IO.Packaging.PackagePartCollection.GetEnumerator"></see>.</returns>
		</member>
		<member name="T:System.IO.Packaging.PackageProperties">
			<summary>Represents the core properties of a <see cref="T:System.IO.Packaging.Package"></see>.    </summary>
		</member>
		<member name="M:System.IO.Packaging.PackageProperties.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageProperties"></see> class. </summary>
		</member>
		<member name="M:System.IO.Packaging.PackageProperties.Dispose">
			<summary>Releases all resources used by the <see cref="T:System.IO.Packaging.PackageProperties"></see> instance.</summary>
		</member>
		<member name="M:System.IO.Packaging.PackageProperties.Dispose(System.Boolean)">
			<summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Packaging.PackageProperties"></see> instance and optionally releases the managed resources. </summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Category">
			<summary>When overridden in a derived class, gets or sets the category of the <see cref="T:System.IO.Packaging.Package"></see>.</summary>
			<returns>The category of the content that is contained in the <see cref="T:System.IO.Packaging.Package"></see>.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.ContentStatus">
			<summary>When overridden in a derived class, gets or sets a value that represents the status of the <see cref="T:System.IO.Packaging.Package"></see>.</summary>
			<returns>The status of the <see cref="T:System.IO.Packaging.Package"></see> content.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.ContentType">
			<summary>When overridden in a derived class, gets or sets a value that represents the type of content that is contained in the <see cref="T:System.IO.Packaging.Package"></see>.</summary>
			<returns>The type of content that is contained in the <see cref="T:System.IO.Packaging.Package"></see>.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Created">
			<summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package"></see> was created.</summary>
			<returns>The date and time the <see cref="T:System.IO.Packaging.Package"></see> was initially created.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Creator">
			<summary>When overridden in a derived class, gets or sets a value that identifies the individual or entity that created the <see cref="T:System.IO.Packaging.Package"></see> and its content.</summary>
			<returns>The individual or entity that created the <see cref="T:System.IO.Packaging.Package"></see> and its content.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Description">
			<summary>When overridden in a derived class, gets or sets a description of the content contained in the <see cref="T:System.IO.Packaging.Package"></see>.</summary>
			<returns>A description of the content contained in the <see cref="T:System.IO.Packaging.Package"></see>.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Identifier">
			<summary>When overridden in a derived class, gets or sets a value that unambiguously identifies the <see cref="T:System.IO.Packaging.Package"></see> and its content.</summary>
			<returns>A value that unambiguously identifies the <see cref="T:System.IO.Packaging.Package"></see> and its content.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Keywords">
			<summary>When overridden in a derived class, gets or sets a value that define a delimited set of keywords to support searching and indexing the <see cref="T:System.IO.Packaging.Package"></see> and its content.</summary>
			<returns>A delimited set of keywords to support searching and indexing the <see cref="T:System.IO.Packaging.Package"></see> and content.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Language">
			<summary>When overridden in a derived class, gets or sets a value that identifies the language of the <see cref="T:System.IO.Packaging.Package"></see> content.</summary>
			<returns>A value that identifies the <see cref="T:System.IO.Packaging.Package"></see> content language.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.LastModifiedBy">
			<summary>When overridden in a derived class, gets or sets a value that identifies the user who last modified the <see cref="T:System.IO.Packaging.Package"></see> content.</summary>
			<returns>The user who last modified the <see cref="T:System.IO.Packaging.Package"></see> content.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.LastPrinted">
			<summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package"></see> content was last printed.</summary>
			<returns>The date and time the <see cref="T:System.IO.Packaging.Package"></see> content was last printed.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Modified">
			<summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package"></see> was last changed.</summary>
			<returns>The date and time the <see cref="T:System.IO.Packaging.Package"></see> was last changed.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Revision">
			<summary>When overridden in a derived class, gets or sets the revision number of the <see cref="T:System.IO.Packaging.Package"></see>.</summary>
			<returns>The revision number of the <see cref="T:System.IO.Packaging.Package"></see>.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Subject">
			<summary>When overridden in a derived class, gets or sets the topic of the <see cref="T:System.IO.Packaging.Package"></see> content.</summary>
			<returns>The topic of the <see cref="T:System.IO.Packaging.Package"></see> content.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Title">
			<summary>When overridden in a derived class, gets or sets the name given to the <see cref="T:System.IO.Packaging.Package"></see> and its content.</summary>
			<returns>The name given to the <see cref="T:System.IO.Packaging.Package"></see> and its content.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageProperties.Version">
			<summary>When overridden in a derived class, gets or sets the version number of the <see cref="T:System.IO.Packaging.Package"></see>.</summary>
			<returns>The version number of the <see cref="T:System.IO.Packaging.Package"></see>.</returns>
		</member>
		<member name="T:System.IO.Packaging.PackageRelationship">
			<summary>Represents an association between a source <see cref="T:System.IO.Packaging.Package"></see> or <see cref="T:System.IO.Packaging.PackagePart"></see>, and a target object which can be a <see cref="T:System.IO.Packaging.PackagePart"></see> or external resource.</summary>
		</member>
		<member name="P:System.IO.Packaging.PackageRelationship.Id">
			<summary>Gets a string that identifies the relationship.</summary>
			<returns>A string that identifies the relationship.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageRelationship.Package">
			<summary>Gets the <see cref="T:System.IO.Packaging.Package"></see> that contains this relationship.</summary>
			<returns>The package that contains this relationship.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageRelationship.RelationshipType">
			<summary>Gets the qualified type name of the relationship. </summary>
			<returns>The qualified type name of the relationship.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageRelationship.SourceUri">
			<summary>Gets the URI of the package or part that owns the relationship.</summary>
			<returns>The URI of the <see cref="T:System.IO.Packaging.Package"></see> or <see cref="T:System.IO.Packaging.PackagePart"></see> that owns the relationship.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageRelationship.TargetMode">
			<summary>Gets a value that indicates whether the target of the relationship is <see cref="F:System.IO.Packaging.TargetMode.Internal"></see> or <see cref="F:System.IO.Packaging.TargetMode.External"></see> to the <see cref="T:System.IO.Packaging.Package"></see>.</summary>
			<returns>An enumeration value that indicates whether <see cref="P:System.IO.Packaging.PackageRelationship.TargetUri"></see> references a resource <see cref="F:System.IO.Packaging.TargetMode.Internal"></see> or <see cref="F:System.IO.Packaging.TargetMode.External"></see> to the <see cref="T:System.IO.Packaging.Package"></see>.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageRelationship.TargetUri">
			<summary>Gets the URI of the target resource of the relationship.</summary>
			<returns>The URI of the target resource.</returns>
		</member>
		<member name="T:System.IO.Packaging.PackageRelationshipCollection">
			<summary>Represents a collection of <see cref="T:System.IO.Packaging.PackageRelationship"></see> elements that are owned by a given <see cref="T:System.IO.Packaging.PackagePart"></see> or the <see cref="T:System.IO.Packaging.Package"></see>. </summary>
		</member>
		<member name="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator">
			<summary>Returns an enumerator for iterating through the relationships in the collection. </summary>
			<returns>An enumerator for iterating through the <see cref="T:System.IO.Packaging.PackageRelationship"></see> elements in the collection.</returns>
		</member>
		<member name="M:System.IO.Packaging.PackageRelationshipCollection.System.Collections.IEnumerable.GetEnumerator">
			<summary>This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
			<returns>Do not use—use <see cref="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator"></see>.</returns>
		</member>
		<member name="T:System.IO.Packaging.PackageRelationshipSelector">
			<summary>Defines <see cref="T:System.IO.Packaging.PackageRelationship"></see> criteria to select part-level or package-level relationships.</summary>
		</member>
		<member name="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageRelationshipSelector"></see> class.</summary>
			<param name="sourceUri">The uniform resource identifier (URI) of the <see cref="T:System.IO.Packaging.PackagePart"></see> or the <see cref="T:System.IO.Packaging.Package"></see> (SourceUri="/") that owns the relationship.</param>
			<param name="selectionCriteria">The qualification string that is used to select the relationships based on the selectorType.</param>
			<param name="selectorType">The type of the selectionCriteria, either by relationship <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id"></see> or relationship <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type"></see>.</param>
			<exception cref="T:System.ArgumentNullException">sourceUri or selectionCriteria is null.</exception>
			<exception cref="T:System.ArgumentException">The selectionCriteria is not valid for the specified selectorType.</exception>
			<exception cref="T:System.ArgumentException">The sourceUri is not the <see cref="T:System.IO.Packaging.Package"></see> root ("/") and is also not a valid <see cref="T:System.IO.Packaging.PackagePart"></see> URI.</exception>
			<exception cref="T:System.Xml.XmlException">The selectorType parameter is <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id"></see> but selectionCriteria is not a valid XML Schema Definition (XSD) identifier (ID).</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">The selectorType parameter is not valid.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackageRelationshipSelector.Select(System.IO.Packaging.Package)">
			<summary>Returns a list of <see cref="T:System.IO.Packaging.PackageRelationship"></see> objects that match the defined <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri"></see>, <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType"></see>, and <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria"></see>.</summary>
			<returns>A list of relationships that match the selection parameters specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)"></see> constructor.</returns>
			<param name="package">The package from which to select the relationships based on the selection criteria.</param>
		</member>
		<member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria">
			<summary>Gets the selection criteria specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)"></see> constructor.</summary>
			<returns>The selection criteria based on the <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType"></see> of <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id"></see> or <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type"></see> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)"></see> constructor.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType">
			<summary>Gets the <see cref="T:System.IO.Packaging.PackageRelationshipSelectorType"></see> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)"></see> constructor.</summary>
			<returns>The selector type of <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id"></see> or <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type"></see> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)"></see> constructor.</returns>
		</member>
		<member name="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri">
			<summary>Gets the root package URI ("/") or part <see cref="P:System.IO.Packaging.PackagePart.Uri"></see> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)"></see> constructor as the owner of the relationship.</summary>
			<returns>The root package URI ("/") or part <see cref="P:System.IO.Packaging.PackagePart.Uri"></see> specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)"></see> constructor as the owner of the relationship.</returns>
		</member>
		<member name="T:System.IO.Packaging.PackageRelationshipSelectorType">
			<summary>Specifies the type of selection criteria that is used to match and return <see cref="T:System.IO.Packaging.PackageRelationship"></see> selections through a <see cref="T:System.IO.Packaging.PackageRelationshipSelector"></see>.     </summary>
		</member>
		<member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Id">
			<summary><see cref="T:System.IO.Packaging.PackageRelationship"></see> selections are by <see cref="P:System.IO.Packaging.PackageRelationship.Id"></see>.</summary>
		</member>
		<member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Type">
			<summary><see cref="T:System.IO.Packaging.PackageRelationship"></see> selections are by <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType"></see>.</summary>
		</member>
		<member name="T:System.IO.Packaging.PackUriHelper">
			<summary>Provides utility methods to compose and parse pack URI objects.</summary>
		</member>
		<member name="F:System.IO.Packaging.PackUriHelper.UriSchemePack">
			<summary>Defines the pack URI scheme name "pack".</summary>
			<returns>The pack URI scheme name string "pack".</returns>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.ComparePackUri(System.Uri,System.Uri)">
			<summary>Returns a value that indicates whether two pack URIs are equivalent.</summary>
			<returns>A signed integer indicating the relationship between firstPackUri and secondPackUri.ValueMeaningLess than zerofirstPackUri is less than secondPackUri.ZerofirstPackUri is equivalent to secondPackUri.Greater than zerofirstPackUri is greater than secondPackUri.</returns>
			<param name="secondPackUri">The second pack URI.</param>
			<param name="firstPackUri">The first pack URI.</param>
			<exception cref="T:System.ArgumentException">Either firstPackUri or secondPackUri is not an absolute URI.-or-Either firstPackUri or secondPackUri do not begin with a "pack://" scheme.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)">
			<summary>Returns a value that indicates whether two package part URIs are equivalent.</summary>
			<returns>A value that indicates the relationship between firstPartUri and secondPartUri.ValueMeaningLess than zerofirstPartUri is less than secondPartUri.ZerofirstPartUri is equivalent to secondPartUri.Greater than zerofirstPartUri is greater than secondPartUri.</returns>
			<param name="secondPartUri">The URI of the second PackagePart.</param>
			<param name="firstPartUri">The URI of the first PackagePart.</param>
			<exception cref="T:System.ArgumentException">firstPartUri or secondPartUri is not a valid part URI syntax.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri)">
			<summary>Creates a new pack URI that points to a package. </summary>
			<returns>The pack URI for the <see cref="T:System.IO.Packaging.Package"></see> referenced by the given packageUri.</returns>
			<param name="packageUri">The URI of the referenced Package.</param>
			<exception cref="T:System.ArgumentException">packageUri is not an absolute URI.</exception>
			<exception cref="T:System.ArgumentNullException">packageUri is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri)">
			<summary>Creates a pack URI given a <see cref="T:System.IO.Packaging.Package"></see> URI and the URI of a part in the package.</summary>
			<returns>The pack URI of the given PackagePart.</returns>
			<param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart"></see> in the package.</param>
			<param name="packageUri">The URI of the <see cref="T:System.IO.Packaging.Package"></see>.</param>
			<exception cref="T:System.ArgumentException">packageUri is not an absolute URI; orpartUri is not a valid part URI syntax.</exception>
			<exception cref="T:System.ArgumentNullException">packageUri is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri,System.String)">
			<summary>Creates a pack URI given a Package URI, the URI of a part in the package, and a "#" fragment to append.</summary>
			<returns>The pack URI that identifies the specified package, package part, and fragment.</returns>
			<param name="fragment">A "#" reference identifying an element within the package part.</param>
			<param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart"></see> in the package.</param>
			<param name="packageUri">The URI of the <see cref="T:System.IO.Packaging.Package"></see>.</param>
			<exception cref="T:System.ArgumentException">packageUri is not an absolute URI; orpartUri is not a valid part URI syntax; orfragment is empty or does begin with "#".</exception>
			<exception cref="T:System.ArgumentNullException">packageUri is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)">
			<summary>Creates a formatted PackagePart URI. </summary>
			<returns>A formatted PackagePart URI.</returns>
			<param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart"></see> within the package.</param>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.GetNormalizedPartUri(System.Uri)">
			<summary>Returns the normalized form of a specified PackagePart URI. </summary>
			<returns>The normalized form of the given partUri.</returns>
			<param name="partUri">The PackagePart URI to normalize.</param>
			<exception cref="T:System.ArgumentNullException">partUri is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.GetPackageUri(System.Uri)">
			<summary>Returns the inner URI that points to the entire package of a specified pack URI. </summary>
			<returns>The URI of the Package from the specified packUri.</returns>
			<param name="packUri">The pack URI from which to return the URI of the Package.</param>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)">
			<summary>Returns the URI of a PackagePart within a specified pack URI. </summary>
			<returns>The URI of the PackagePart in the given packUri; or null, if packUri points to a package instead of a PackagePart (case 3 in the examples that follow). </returns>
			<param name="packUri">The pack URI from which to return the PackagePart URI.</param>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.GetRelationshipPartUri(System.Uri)">
			<summary>Returns the URI of the relationship part associated with a specified <see cref="T:System.IO.Packaging.PackagePart"></see>.</summary>
			<returns>The URI of the <see cref="T:System.IO.Packaging.PackageRelationship"></see> part associated with the <see cref="T:System.IO.Packaging.PackagePart"></see> identified by partUri.</returns>
			<param name="partUri">The <see cref="P:System.IO.Packaging.PackagePart.Uri"></see> of the <see cref="T:System.IO.Packaging.PackagePart"></see> to return the URI for the associated <see cref="T:System.IO.Packaging.PackageRelationship"></see>.</param>
			<exception cref="T:System.ArgumentException">partUri syntax is not valid for a package part URI; orpartUri is an absolute URI; orpartUri references a relationship part.</exception>
			<exception cref="T:System.ArgumentNullException">partUri is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.GetRelativeUri(System.Uri,System.Uri)">
			<summary>Returns the relative URI between two specified <see cref="T:System.IO.Packaging.PackagePart"></see> URIs.</summary>
			<returns>The relative URI from sourcePartUri to targetPartUri.</returns>
			<param name="targetPartUri">The URI of the target part.</param>
			<param name="sourcePartUri">The URI of the source part.</param>
			<exception cref="T:System.ArgumentNullException">sourcePartUri or targetPartUri is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.GetSourcePartUriFromRelationshipPartUri(System.Uri)">
			<summary>Returns the <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri"></see> from the <see cref="T:System.IO.Packaging.PackageRelationship"></see> with a specified URI.</summary>
			<returns>The <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri"></see> of the <see cref="T:System.IO.Packaging.PackagePart"></see> from the relationship with the specified relationshipPartUri.</returns>
			<param name="relationshipPartUri">The URI of the relationship part to return the <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri"></see> from.</param>
			<exception cref="T:System.ArgumentException">relationshipPartUri is an absolute URI.-or-relationshipPartUri syntax is not valid for a <see cref="T:System.IO.Packaging.PackagePart"></see>.-or-relationshipPartUri does not reference a relationship part.-or-The <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri"></see> of the relationship part references another relationship part (invalid, see Remarks).</exception>
			<exception cref="T:System.ArgumentNullException">relationshipPartUri is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.IsRelationshipPartUri(System.Uri)">
			<summary>Returns a value that indicates whether a specified URI is the URI of a <see cref="T:System.IO.Packaging.PackageRelationship"></see> part.</summary>
			<returns>true if partUri identifies a <see cref="T:System.IO.Packaging.PackageRelationship"></see> part; otherwise, false.</returns>
			<param name="partUri">The URI to check for a <see cref="T:System.IO.Packaging.PackageRelationship"></see> part.</param>
			<exception cref="T:System.ArgumentException">partUri is an absolute URI.-or-partUri is an invalid <see cref="T:System.IO.Packaging.PackagePart"></see> syntax.</exception>
			<exception cref="T:System.ArgumentNullException">partUri is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)">
			<summary>Returns a part URI given a source part URI and a URI with a relative path to a target part.</summary>
			<returns>The URI of the target part resolved between the specified SourcePartUri and the targetUri parameters.</returns>
			<param name="targetUri">The relative URI to the target part.</param>
			<param name="sourcePartUri">The URI of the source part, or "/" to designate the <see cref="T:System.IO.Packaging.Package"></see> root.</param>
			<exception cref="T:System.ArgumentNullException">sourcePartUri or targetUri is null.</exception>
			<exception cref="T:System.ArgumentException">sourcePartUri is not a valid part URI.-or-targetUri is not a valid relative URI.</exception>
		</member>
		<member name="T:System.IO.Packaging.RightsManagementInformation">
			<summary>Represents Digital Rights Management (DRM) information that is stored in an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope"></see>.</summary>
		</member>
		<member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
			<summary>Deletes the <see cref="T:System.Security.RightsManagement.UseLicense"></see> for a specified user from the encrypted rights management data stream.</summary>
			<param name="userKey">The user of the <see cref="T:System.Security.RightsManagement.UseLicense"></see>   to be deleted.</param>
		</member>
		<member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
			<summary>Returns a dictionary collection of user and <see cref="T:System.Security.RightsManagement.UseLicense"></see> key/value pairs from the encrypted rights management data stream.</summary>
			<returns>A collection of user and <see cref="T:System.Security.RightsManagement.UseLicense"></see> key/value pairs that are contained in the rights managed protected package.</returns>
		</member>
		<member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
			<summary>Returns the embedded <see cref="T:System.Security.RightsManagement.PublishLicense"></see> from the encrypted rights management data stream.</summary>
			<returns>The embedded <see cref="T:System.Security.RightsManagement.PublishLicense"></see>; or null, if the package does not contain a <see cref="T:System.Security.RightsManagement.PublishLicense"></see>.</returns>
			<exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
		</member>
		<member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
			<summary>Returns a specified user's embedded <see cref="T:System.Security.RightsManagement.UseLicense"></see> from the encrypted rights management data stream.</summary>
			<returns>The <see cref="T:System.Security.RightsManagement.UseLicense"></see> for the specified user; or null, if the package does not contain a <see cref="T:System.Security.RightsManagement.UseLicense"></see> that matches the given userKey.</returns>
			<param name="userKey">The user or user group to return the <see cref="T:System.Security.RightsManagement.UseLicense"></see> for.</param>
			<exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
			<exception cref="T:System.ArgumentNullException">The userKey parameter is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
			<summary>Saves a given <see cref="T:System.Security.RightsManagement.PublishLicense"></see> to the encrypted rights management data stream.</summary>
			<param name="publishLicense">The publish license to store and embed in the package.</param>
			<exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
			<exception cref="T:System.ArgumentNullException">The publishLicense parameter is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
			<summary>Saves a given <see cref="T:System.Security.RightsManagement.UseLicense"></see> for a specified user to the encrypted rights management data stream.</summary>
			<param name="useLicense">The use license to store and embed in the package.</param>
			<param name="userKey">The user of the <see cref="T:System.Security.RightsManagement.UseLicense"></see>.</param>
			<exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
			<exception cref="T:System.ArgumentNullException">Either the userKey or useLicense parameter is null.</exception>
		</member>
		<member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
			<summary>Gets or sets the <see cref="T:System.Security.RightsManagement.CryptoProvider"></see> for accessing the package's encrypted rights management data stream.</summary>
			<returns>The <see cref="T:System.Security.RightsManagement.CryptoProvider"></see> for accessing the rights management information.</returns>
		</member>
		<member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
			<summary> Specifies the event args provided to the <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler"></see>. </summary>
		</member>
		<member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
			<summary> Gets the digital signature being verified. </summary>
			<returns>The digital signature being verified.</returns>
		</member>
		<member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
			<summary> Gets the signature verification error. </summary>
			<returns>The signature verification error.</returns>
		</member>
		<member name="T:System.IO.Packaging.StorageInfo">
			<summary>Provides access and information for manipulating data stores in a <see cref="T:System.IO.Packaging.Package"></see>.    </summary>
		</member>
		<member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
			<summary>Creates a new stream with a given name.</summary>
			<returns>The new stream with the specified name.</returns>
			<param name="name">The name for the new stream.</param>
		</member>
		<member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
			<summary>Creates a new stream with a given name, <see cref="T:System.IO.Packaging.CompressionOption"></see>, and <see cref="T:System.IO.Packaging.EncryptionOption"></see>.</summary>
			<returns>The new stream with the specified name, compressionOption, and encryptionOption.</returns>
			<param name="name">The name for the new stream.</param>
			<param name="encryptionOption">The encryption option for the data stream.</param>
			<param name="compressionOption">The compression option for the data stream.</param>
		</member>
		<member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
			<summary>Creates a new child <see cref="T:System.IO.Packaging.StorageInfo"></see> with this <see cref="T:System.IO.Packaging.StorageInfo"></see> as the parent.</summary>
			<returns>The new child data store.</returns>
			<param name="name">The name for the new child data store.</param>
			<exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
			<summary>Deletes the stream with a specified name. </summary>
			<param name="name">The <see cref="T:System.IO.Packaging.StreamInfo"></see> name of the stream to delete.</param>
			<exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
			<summary>Deletes a specified sub-store.</summary>
			<param name="name">The name of the sub-store to delete.</param>
			<exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
			<summary>Returns the <see cref="T:System.IO.Packaging.StreamInfo"></see> instance with the given name.</summary>
			<returns>The stream with the specified name.</returns>
			<param name="name">The name of the <see cref="T:System.IO.Packaging.StreamInfo"></see> instance to return.</param>
			<exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.StorageInfo.GetStreams">
			<summary>Returns an array of the <see cref="T:System.IO.Packaging.StreamInfo"></see> instances that are currently contained in this store.</summary>
			<returns>An array of the <see cref="T:System.IO.Packaging.StreamInfo"></see> objects, each pointing to an I/O steam defined within this store.</returns>
		</member>
		<member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
			<summary>Returns the child sub-store with a given name.</summary>
			<returns>The child sub-store with the specified name.</returns>
			<param name="name">The name of the sub-store to return.</param>
			<exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
		</member>
		<member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
			<summary>Returns an array of the child sub-stores that are currently contained in this store.</summary>
			<returns>An array of <see cref="T:System.IO.Packaging.StorageInfo"></see> objects, each pointing to a sub-store defined within this store.</returns>
		</member>
		<member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
			<summary>Returns a value that indicates whether a given stream exists.</summary>
			<returns>true if a stream with the specified name exists; otherwise, false.</returns>
			<param name="name">The <see cref="T:System.IO.Packaging.StreamInfo"></see> name to check for.</param>
		</member>
		<member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
			<summary>Returns a value that indicates whether a given child sub-store exists.</summary>
			<returns>true if a child sub-store with the specified name exists; otherwise, false.</returns>
			<param name="name">The child <see cref="T:System.IO.Packaging.StorageInfo"></see> name to check for.</param>
		</member>
		<member name="P:System.IO.Packaging.StorageInfo.Name">
			<summary>Gets the name of the store.</summary>
			<returns>The name of this store.</returns>
		</member>
		<member name="T:System.IO.Packaging.StreamInfo">
			<summary>Provides access and information for manipulating I/O streams within a <see cref="T:System.IO.Packaging.Package"></see>.    </summary>
		</member>
		<member name="M:System.IO.Packaging.StreamInfo.GetStream">
			<summary>Returns a stream opened in a default <see cref="T:System.IO.FileMode"></see> and <see cref="T:System.IO.FileAccess"></see>.</summary>
			<returns>The I/O stream opened in a default <see cref="T:System.IO.Packaging.Package"></see> root <see cref="T:System.IO.FileMode"></see> and <see cref="T:System.IO.FileAccess"></see>..</returns>
		</member>
		<member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
			<summary>Returns an I/O stream opened in a specified <see cref="T:System.IO.FileMode"></see>.</summary>
			<returns>The stream opened in the specified file mode.</returns>
			<param name="mode">The file mode in which to open the stream.</param>
		</member>
		<member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
			<summary>Returns an I/O stream opened in a specified <see cref="T:System.IO.FileMode"></see> and with a given <see cref="T:System.IO.FileAccess"></see>.</summary>
			<returns>The I/O stream opened in the specified <see cref="T:System.IO.FileMode"></see> and with a given <see cref="T:System.IO.FileAccess"></see>.</returns>
			<param name="mode">The file mode in which to open the stream.</param>
			<param name="access">The file access mode in which to read or write to the stream.</param>
		</member>
		<member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
			<summary>Gets the <see cref="T:System.IO.Packaging.CompressionOption"></see> setting for the stream.</summary>
			<returns>The compression option setting for the package stream.</returns>
		</member>
		<member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
			<summary>Gets the <see cref="T:System.IO.Packaging.EncryptionOption"></see> setting for the stream.</summary>
			<returns>The encryption option setting for the package stream.</returns>
		</member>
		<member name="P:System.IO.Packaging.StreamInfo.Name">
			<summary>Gets the name of the stream.</summary>
			<returns>The name of this stream.</returns>
		</member>
		<member name="T:System.IO.Packaging.TargetMode">
			<summary>Specifies whether the target of a <see cref="T:System.IO.Packaging.PackageRelationship"></see> is inside or outside the <see cref="T:System.IO.Packaging.Package"></see>. </summary>
		</member>
		<member name="F:System.IO.Packaging.TargetMode.External">
			<summary>The relationship references a resource that is external to the package. </summary>
		</member>
		<member name="F:System.IO.Packaging.TargetMode.Internal">
			<summary>The relationship references a part that is inside the package. </summary>
		</member>
		<member name="T:System.IO.Packaging.VerifyResult">
			<summary>Specifies the result of a certificate or signature verification.</summary>
		</member>
		<member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
			<summary>The X.509 certificate is not available to verify the signature.</summary>
		</member>
		<member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
			<summary>The X.509 certificate is not valid.</summary>
		</member>
		<member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
			<summary>The signature is not valid.</summary>
		</member>
		<member name="F:System.IO.Packaging.VerifyResult.NotSigned">
			<summary>The specified package or part has no signature.</summary>
		</member>
		<member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
			<summary>A reference relationship to the signature was not found.</summary>
		</member>
		<member name="F:System.IO.Packaging.VerifyResult.Success">
			<summary>The verification was successful.</summary>
		</member>
		<member name="T:System.IO.Packaging.ZipPackage">
			<summary>Implements a derived subclass of the abstract <see cref="T:System.IO.Packaging.Package"></see> base class—the <see cref="T:System.IO.Packaging.ZipPackage"></see> class uses a ZIP archive as the container store. This class cannot be inherited.</summary>
		</member>
		<member name="T:System.IO.Packaging.ZipPackagePart">
			<summary>Represents a part that is stored in a <see cref="T:System.IO.Packaging.ZipPackage"></see>. This class cannot be inherited. </summary>
		</member>
		<member name="T:System.Security.Permissions.MediaPermission">
			<summary>The <see cref="T:System.Security.Permissions.MediaPermission"></see> describes a set of security permissions that controls the ability for audio, image, and video media to work in a partial-trust Windows Presentation Foundation (WPF) application.</summary>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission"></see> class.</summary>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission"></see> class by specifying the audio permission level.</summary>
			<param name="permissionAudio">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionAudio"></see>.</param>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionImage)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission"></see> class by specifying the image permission level.</summary>
			<param name="permissionImage">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionImage"></see>.</param>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionVideo)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission"></see> class by specifying the video permission level.</summary>
			<param name="permissionVideo">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionVideo"></see>.</param>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.PermissionState)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission"></see> class by specifying a permission state.</summary>
			<param name="state">An enumerated value of <see cref="T:System.Security.Permissions.PermissionState"></see>.</param>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio,System.Security.Permissions.MediaPermissionVideo,System.Security.Permissions.MediaPermissionImage)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission"></see> class by specifying the audio, video, and image permission levels.</summary>
			<param name="permissionImage">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionImage"></see>.</param>
			<param name="permissionAudio">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionAudio"></see>.</param>
			<param name="permissionVideo">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionVideo"></see>.</param>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.Copy">
			<summary>Creates and returns an identical copy of the current permission.</summary>
			<returns>A copy of the current permission.</returns>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.FromXml(System.Security.SecurityElement)">
			<summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
			<param name="securityElement">The XML encoding to use to reconstruct the permission.</param>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.Intersect(System.Security.IPermission)">
			<summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
			<returns>The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will be valid for the intersected permission.</returns>
			<param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.IsSubsetOf(System.Security.IPermission)">
			<summary>Determines whether the current permission is a subset of the specified permission.</summary>
			<returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
			<param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.IsUnrestricted">
			<summary>Returns a value indicating whether the current permission is unrestricted.</summary>
			<returns>true if the audio, image, and video permissions are all unrestricted; otherwise, false.</returns>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.ToXml">
			<summary>Creates an XML encoding of the permission and its current state.</summary>
			<returns>An XML encoding of the permission, including any state information.</returns>
		</member>
		<member name="M:System.Security.Permissions.MediaPermission.Union(System.Security.IPermission)">
			<summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
			<returns>A new permission that represents the union of the current permission and the specified permission.</returns>
			<param name="target">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
		</member>
		<member name="P:System.Security.Permissions.MediaPermission.Audio">
			<summary>Gets the current value of the audio permission level.</summary>
			<returns>The audio permission level.</returns>
		</member>
		<member name="P:System.Security.Permissions.MediaPermission.Image">
			<summary>Gets the current value of the image permission level.</summary>
			<returns>The image permission level.</returns>
		</member>
		<member name="P:System.Security.Permissions.MediaPermission.Video">
			<summary>Gets the current value of the video permission level.</summary>
			<returns>The media permission level.</returns>
		</member>
		<member name="T:System.Security.Permissions.MediaPermissionAttribute">
			<summary>Allows security actions for <see cref="T:System.Security.Permissions.MediaPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Security.Permissions.MediaPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
			<summary>Initializes a new instance of <see cref="T:System.Security.Permissions.MediaPermissionAttribute"></see>.</summary>
			<param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
		</member>
		<member name="M:System.Security.Permissions.MediaPermissionAttribute.CreatePermission">
			<summary>Creates and returns a new <see cref="T:System.Security.Permissions.MediaPermission"></see>.</summary>
			<returns>A <see cref="T:System.Security.Permissions.MediaPermission"></see> that corresponds to this attribute.</returns>
		</member>
		<member name="P:System.Security.Permissions.MediaPermissionAttribute.Audio">
			<summary>Gets or sets the audio permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute"></see>.</summary>
			<returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionAudio"></see>.</returns>
		</member>
		<member name="P:System.Security.Permissions.MediaPermissionAttribute.Image">
			<summary>Gets or sets the image permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute"></see>.</summary>
			<returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionImage"></see>.</returns>
		</member>
		<member name="P:System.Security.Permissions.MediaPermissionAttribute.Video">
			<summary>Gets or sets the video permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute"></see>.</summary>
			<returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionVideo"></see>.</returns>
		</member>
		<member name="T:System.Security.Permissions.MediaPermissionAudio">
			<summary>Specifies the permission level for audio.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionAudio.AllAudio">
			<summary>Permission that allows unrestricted audio playback.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionAudio.NoAudio">
			<summary>Permission that denies all audio playback.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionAudio.SafeAudio">
			<summary>Permission that allows safe, limited audio playback, which includes denying stream access to the image file.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionAudio.SiteOfOriginAudio">
			<summary>Permission that only allows audio playback of files that are located at the application's site of origin.</summary>
		</member>
		<member name="T:System.Security.Permissions.MediaPermissionImage">
			<summary>Specifies the permission level for images.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionImage.AllImage">
			<summary>Permission that allows unrestricted image display.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionImage.NoImage">
			<summary>Permission that denies all images to be displayed.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionImage.SafeImage">
			<summary>Permission that allows safe, limited image display, which includes denying stream access to the image file.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionImage.SiteOfOriginImage">
			<summary>Permission that only allows display of images that are located at the application's site of origin.</summary>
		</member>
		<member name="T:System.Security.Permissions.MediaPermissionVideo">
			<summary>Specifies the permission level for video.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionVideo.AllVideo">
			<summary>Permission that allows unrestricted video playback.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionVideo.NoVideo">
			<summary>Permission that denies all video playback.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionVideo.SafeVideo">
			<summary>Permission that allows safe, limited video playback, which includes denying stream access to the image file.</summary>
		</member>
		<member name="F:System.Security.Permissions.MediaPermissionVideo.SiteOfOriginVideo">
			<summary>Permission that only allows video playback of files that are located at the application's site of origin.</summary>
		</member>
		<member name="T:System.Security.Permissions.WebBrowserPermission">
			<summary>The <see cref="T:System.Security.Permissions.WebBrowserPermission"></see> object controls the ability to create the WebBrowser control.</summary>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermission.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission"></see> class.</summary>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.PermissionState)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission"></see> class by specifying a permission state.</summary>
			<param name="state">An enumerated value of <see cref="T:System.Security.Permissions.PermissionState"></see>.</param>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.WebBrowserPermissionLevel)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission"></see> class by specifying the Web browser permission level.</summary>
			<param name="webBrowserPermissionLevel">An enumerated value of <see cref="T:System.Security.Permissions.WebBrowserPermissionLevel"></see>.</param>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermission.Copy">
			<summary>Creates and returns an identical copy of the current permission.</summary>
			<returns>A copy of the current permission.</returns>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermission.FromXml(System.Security.SecurityElement)">
			<summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
			<param name="securityElement">The XML encoding to use to reconstruct the permission.</param>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermission.Intersect(System.Security.IPermission)">
			<summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
			<returns>The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will be valid for the intersected permission.</returns>
			<param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermission.IsSubsetOf(System.Security.IPermission)">
			<summary>Determines whether the current permission is a subset of the specified permission.</summary>
			<returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
			<param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermission.IsUnrestricted">
			<summary>Returns a value indicating whether the current permission is unrestricted.</summary>
			<returns>true if the <see cref="P:System.Security.Permissions.WebBrowserPermission.Level"></see> property is set to <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted"></see>; otherwise, false.</returns>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermission.ToXml">
			<summary>Creates an XML encoding of the permission and its current state.</summary>
			<returns>An XML encoding of the permission, including any state information.</returns>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermission.Union(System.Security.IPermission)">
			<summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
			<returns>A new permission that represents the union of the current permission and the specified permission.</returns>
			<param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
		</member>
		<member name="P:System.Security.Permissions.WebBrowserPermission.Level">
			<summary>Gets or sets the current value of the Web browser permission level.</summary>
			<returns>The current value of the Web browser permission level.</returns>
		</member>
		<member name="T:System.Security.Permissions.WebBrowserPermissionAttribute">
			<summary>Allows security actions for <see cref="T:System.Security.Permissions.WebBrowserPermission"></see> to be applied to code using declarative security. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute"></see> class with the specified <see cref="T:System.Security.Permissions.SecurityAction"></see>.</summary>
			<param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"></see> values.</param>
		</member>
		<member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.CreatePermission">
			<summary>Creates and returns a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission"></see> class.</summary>
			<returns>A <see cref="T:System.Security.Permissions.WebBrowserPermission"></see> corresponding to the security declaration.</returns>
		</member>
		<member name="P:System.Security.Permissions.WebBrowserPermissionAttribute.Level">
			<summary>Gets or sets the current Web browser permission level for the <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute"></see>.</summary>
			<returns>The state of the current Web browser permission level.</returns>
		</member>
		<member name="T:System.Security.Permissions.WebBrowserPermissionLevel">
			<summary>Specifies the permission level for a Web browser.</summary>
		</member>
		<member name="F:System.Security.Permissions.WebBrowserPermissionLevel.None">
			<summary>A Web browser that cannot navigate frames to HTML.</summary>
		</member>
		<member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Safe">
			<summary>A Web browser that can safely navigate frames to HTML but with several restrictions.</summary>
		</member>
		<member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted">
			<summary>A Web browser that can navigate without restrictions.</summary>
		</member>
		<member name="N:System.Security.RightsManagement">
			<summary>Provides classes to support rights management of application created content such as stored in a <see cref="T:System.IO.Packaging.Package"></see> or <see cref="T:System.Windows.Xps.Packaging.XpsDocument"></see>.</summary>
		</member>
		<member name="T:System.Security.RightsManagement.AuthenticationType">
			<summary>Specifies the method of rights management authentication.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
			<summary>Implicit authentication to any requesting user.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
			<summary>Windows Live ID authentication.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
			<summary>Windows authentication in a corporate domain environment.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
			<summary>Either Windows authentication or Windows Live ID authentication.</summary>
		</member>
		<member name="T:System.Security.RightsManagement.ContentGrant">
			<summary>Represents a right granted to a user to access information in a rights managed document.</summary>
		</member>
		<member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentGrant"></see> class that grants a specified <see cref="T:System.Security.RightsManagement.ContentUser"></see> a specified <see cref="T:System.Security.RightsManagement.ContentRight"></see>.</summary>
			<param name="right">The access right that is granted.</param>
			<param name="user">The user the access right is granted to.</param>
		</member>
		<member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentGrant"></see> class that grants a specified <see cref="T:System.Security.RightsManagement.ContentUser"></see> a specified <see cref="T:System.Security.RightsManagement.ContentRight"></see> for a specified <see cref="T:System.DateTime"></see> duration.</summary>
			<param name="right">The access right that is granted.</param>
			<param name="validFrom">The starting date and time that the right begins.</param>
			<param name="user">The user the access right is granted to.</param>
			<param name="validUntil">The ending date and time that the right expires.</param>
		</member>
		<member name="P:System.Security.RightsManagement.ContentGrant.Right">
			<summary>Gets the <see cref="T:System.Security.RightsManagement.ContentRight"></see> that is granted.</summary>
			<returns>The access right that is granted to the <see cref="P:System.Security.RightsManagement.ContentGrant.User"></see>, as specified to the <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)"></see> constructor.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.ContentGrant.User">
			<summary>Gets the user who is granted the access <see cref="P:System.Security.RightsManagement.ContentGrant.Right"></see>.</summary>
			<returns>The user that the access <see cref="P:System.Security.RightsManagement.ContentGrant.Right"></see> is granted to, as specified to the <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)"></see> constructor.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
			<summary>Gets the starting date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right"></see> begins.</summary>
			<returns>The start date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right"></see> begins, or <see cref="T:System.DateTime"></see>.<see cref="F:System.DateTime.MinValue"></see> if there is there is no starting limitation.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
			<summary>Gets the ending date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right"></see> expires.</summary>
			<returns>The end date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right"></see> expires, or <see cref="T:System.DateTime"></see>.<see cref="F:System.DateTime.MaxValue"></see> if there is no ending limitation.</returns>
		</member>
		<member name="T:System.Security.RightsManagement.ContentRight">
			<summary>Specifies rights that can be granted to users for accessing content in a rights managed document.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
			<summary>The user can edit the document that contains the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.Edit">
			<summary>The user can edit and encrypt the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.Export">
			<summary>The user can export the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.Extract">
			<summary>The user can extract (copy and paste) the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.Forward">
			<summary>The user can forward the protected content to another user.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
			<summary>The user can control programmed access to the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.Owner">
			<summary>The user is the content owner.  The owner can edit and encrypt the protected content, and decrypt the signed <see cref="T:System.Security.RightsManagement.PublishLicense"></see>.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.Print">
			<summary>The user can print the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.Reply">
			<summary>The user can reply to the sender of the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
			<summary>The user can "reply all" to recipients of the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.Sign">
			<summary>The user can digitally sign the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.View">
			<summary>The user can view the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
			<summary>The user can decrypt and view the rights specified in the signed <see cref="T:System.Security.RightsManagement.PublishLicense"></see>.</summary>
		</member>
		<member name="T:System.Security.RightsManagement.ContentUser">
			<summary>Represents a user or user-group for granting access to rights managed content.     </summary>
		</member>
		<member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentUser"></see> class.</summary>
			<param name="name">The user or group name.</param>
			<param name="authenticationType">The method for authentication.</param>
		</member>
		<member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
			<summary>Returns a value that indicates whether this <see cref="T:System.Security.RightsManagement.ContentUser"></see> is equivalent to another given instance.</summary>
			<returns>true if <see cref="P:System.Security.RightsManagement.ContentUser.Name"></see> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType"></see> are the same for both this user and the given user; otherwise, false.</returns>
			<param name="obj">The user instance to compare for equality.</param>
		</member>
		<member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
			<summary>Returns a computed hash code based on the user <see cref="P:System.Security.RightsManagement.ContentUser.Name"></see> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType"></see>.</summary>
			<returns>A hash code computed from the user <see cref="P:System.Security.RightsManagement.ContentUser.Name"></see> and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType"></see>.</returns>
		</member>
		<member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
			<summary>Returns a value that indicates whether the user is currently authenticated.</summary>
			<returns>true if the user is currently authenticated; otherwise, false.  The default is false until authenticated.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
			<summary>Gets an instance of the "Anyone" <see cref="T:System.Security.RightsManagement.ContentUser"></see> persona.</summary>
			<returns>An instance of the "Anyone" <see cref="T:System.Security.RightsManagement.ContentUser"></see> persona.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
			<summary>Gets the <see cref="T:System.Security.RightsManagement.AuthenticationType"></see> specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)"></see> constructor.</summary>
			<returns>The <see cref="T:System.Security.RightsManagement.AuthenticationType"></see> specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)"></see> constructor.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.ContentUser.Name">
			<summary>Gets the user or group name specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)"></see> constructor.</summary>
			<returns>The user or group name specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)"></see> constructor.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
			<summary>Gets an instance of the "Owner" <see cref="T:System.Security.RightsManagement.ContentUser"></see> persona.</summary>
			<returns>An instance of the "Owner" <see cref="T:System.Security.RightsManagement.ContentUser"></see> persona.</returns>
		</member>
		<member name="T:System.Security.RightsManagement.CryptoProvider">
			<summary>Provides digital rights management services for encrypting and decrypting protected content.     </summary>
		</member>
		<member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
			<summary>Decrypts cipher text to clear text. </summary>
			<returns>The decrypted clear text of cryptoText.</returns>
			<param name="cryptoText">The cipher text to decrypt.</param>
			<exception cref="T:System.ArgumentNullException">cipherText is null.</exception>
			<exception cref="T:System.Security.RightsManagement.RightsManagementException">Decryption right not granted.</exception>
		</member>
		<member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
			<summary>Releases all resources used by the <see cref="T:System.Security.RightsManagement.CryptoProvider"></see>. </summary>
		</member>
		<member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
			<summary>Releases the unmanaged resources used by the <see cref="T:System.Security.RightsManagement.CryptoProvider"></see> and optionally releases the managed resources.  </summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
		</member>
		<member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
			<summary>Encrypts clear text to cipher text. </summary>
			<returns>Encrypted cipher text of the given clearText.</returns>
			<param name="clearText">The clear text content to encrypt.</param>
			<exception cref="T:System.ArgumentNullException">clearText is null.</exception>
			<exception cref="T:System.Security.RightsManagement.RightsManagementException">Encryption is not permitted.</exception>
		</member>
		<member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
			<summary>Frees resources and performs internal cleanup before the instance is reclaimed by garbage collection.</summary>
		</member>
		<member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
			<summary>Gets the cipher block size, in bytes. </summary>
			<returns>The cipher block size, in bytes.  The default block size for Advanced Encryption Standard (AES) is 8.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
			<summary>Gets a collection listing the rights that passed verification and that are granted to the user.</summary>
			<returns>A collection enumerating the rights that passed verification and that are granted to the user.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
			<summary>Gets a value that indicates whether the user has rights to decrypt. </summary>
			<returns>true if the <see cref="T:System.Security.RightsManagement.UseLicense"></see> grants the user rights to decrypt; otherwise, false.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
			<summary>Gets a value that indicates whether the user has rights to encrypt. </summary>
			<returns>true if the <see cref="T:System.Security.RightsManagement.UseLicense"></see> grants the user rights to encrypt; otherwise, false.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
			<summary>Gets a value that indicates whether <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])"></see> and <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])"></see> can accept buffers that are different block sizes in length.</summary>
			<returns>true if the buffer passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])"></see> can be a different length from the buffer passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])"></see>; otherwise, false if the buffers passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])"></see> and <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])"></see> must be the exact same length.  For Advanced Encryption Standard (AES) the default is true.</returns>
		</member>
		<member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
			<summary>Represents an immutable (read-only) pair of "Name" and "Description" strings.    </summary>
		</member>
		<member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair"></see> class.</summary>
			<param name="description">The value for the locale<see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description"></see> property.</param>
			<param name="name">The value for the locale<see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name"></see> property.</param>
			<exception cref="T:System.ArgumentNullException">Either the name parameter or description parameter is null.</exception>
		</member>
		<member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
			<summary>Indicates whether the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name"></see> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description"></see> properties of a given object match those of this <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair"></see>.</summary>
			<returns>true if the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name"></see> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description"></see> properties of the given object match those of this instance; otherwise, false.</returns>
			<param name="obj">The object to compare the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name"></see> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description"></see> properties of.</param>
		</member>
		<member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
			<summary>Gets a computed hash code based on the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name"></see> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description"></see> properties.</summary>
			<returns>A computed hash code based on the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name"></see> and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description"></see> properties of this <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair"></see>.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
			<summary>Gets the locale description.</summary>
			<returns>The locale description.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
			<summary>Gets the locale name.</summary>
			<returns>The locale name.</returns>
		</member>
		<member name="T:System.Security.RightsManagement.PublishLicense">
			<summary>Represents a signed rights managed publish license.</summary>
		</member>
		<member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.PublishLicense"></see> class from a specified serialized and signed <see cref="T:System.Security.RightsManagement.PublishLicense"></see>.</summary>
			<param name="signedPublishLicense">A signed and serialized publish license.</param>
			<exception cref="T:System.Security.RightsManagement.RightsManagementException">The license is invalid.</exception>
			<exception cref="T:System.ArgumentNullException">signedPublishLicense is null.</exception>
		</member>
		<member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
			<summary>Attempts to acquire a <see cref="T:System.Security.RightsManagement.UseLicense"></see> for a user or user group in a specified <see cref="T:System.Security.RightsManagement.SecureEnvironment"></see>.</summary>
			<returns>The <see cref="T:System.Security.RightsManagement.UseLicense"></see> for a user or user group in the specified secureEnvironment.</returns>
			<param name="secureEnvironment">The secure environment for license activation and binding.</param>
			<exception cref="T:System.Security.RightsManagement.RightsManagementException">The authentication failed.</exception>
			<exception cref="T:System.ArgumentNullException">secureEnvironment is null.</exception>
		</member>
		<member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
			<summary>Attempts to acquire a <see cref="T:System.Security.RightsManagement.UseLicense"></see> for a user or user group in a specified <see cref="T:System.Security.RightsManagement.SecureEnvironment"></see>.</summary>
			<returns>The <see cref="T:System.Security.RightsManagement.UseLicense"></see> for a user or user group in the specified secureEnvironment.</returns>
			<param name="secureEnvironment">The secure environment for license activation and binding.</param>
			<exception cref="T:System.Security.RightsManagement.RightsManagementException">The authentication failed.</exception>
			<exception cref="T:System.ArgumentNullException">secureEnvironment is null.</exception>
		</member>
		<member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
			<summary>Returns a decrypted <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense"></see> version of this signed <see cref="T:System.Security.RightsManagement.PublishLicense"></see>.</summary>
			<returns>A decrypted, unsigned version of this license.</returns>
			<param name="cryptoProvider">The rights management service to use for decrypting the license.</param>
			<exception cref="T:System.ArgumentNullException">cryptoProvider is null.</exception>
		</member>
		<member name="M:System.Security.RightsManagement.PublishLicense.ToString">
			<summary>Returns the serialized XrML string that was used to create this license.</summary>
			<returns>The serialized Extensible Rights Markup Language (XrML) string that was used to create this license.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
			<summary>Gets the publisher-created content identifier. </summary>
			<returns>The publisher-created content identifier.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
			<summary>Gets the contact name for the author or publisher of the content.</summary>
			<returns>The contact name for the author or publisher of the content.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
			<summary>Gets the contact URI for the author or publisher of the content.</summary>
			<returns>The contact uniform resource identifier (URI) for the author or publisher of the content.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
			<summary>Gets the URI to use for acquiring a <see cref="T:System.Security.RightsManagement.UseLicense"></see>.</summary>
			<returns>The URI to use for acquiring a <see cref="T:System.Security.RightsManagement.UseLicense"></see>.</returns>
		</member>
		<member name="T:System.Security.RightsManagement.RightsManagementException">
			<summary>Represents an error condition when a rights management operation cannot complete successfully.</summary>
		</member>
		<member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException"></see> class.</summary>
		</member>
		<member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException"></see> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode"></see>.</summary>
			<param name="failureCode">The failure code for the error.</param>
		</member>
		<member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException"></see> class with a given message.</summary>
			<param name="message">A message that describes the error.</param>
		</member>
		<member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException"></see> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode"></see> and <see cref="P:System.Exception.InnerException"></see>.</summary>
			<param name="innerException">The exception instance that caused the error.</param>
			<param name="failureCode">The failure code for the error.</param>
		</member>
		<member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException"></see> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode"></see> and <see cref="P:System.Exception.Message"></see>.</summary>
			<param name="message">A message that describes the error.</param>
			<param name="failureCode">The failure code for the error.</param>
		</member>
		<member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException"></see> class and sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> store with information about the exception.</summary>
			<param name="context">The contextual information about the source or destination.</param>
			<param name="info">The object that holds the serialized data.</param>
		</member>
		<member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException"></see> class with a given <see cref="P:System.Exception.Message"></see> and <see cref="P:System.Exception.InnerException"></see>.</summary>
			<param name="message">A message that describes the error.</param>
			<param name="innerException">The exception instance that caused this exception.</param>
		</member>
		<member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException"></see> class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode"></see>, <see cref="P:System.Exception.Message"></see> and <see cref="P:System.Exception.InnerException"></see>.</summary>
			<param name="message">A message that describes the error.</param>
			<param name="innerException">The exception instance that caused the error.</param>
			<param name="failureCode">The failure code for the error.</param>
		</member>
		<member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> store with the parameter name and information about the exception.</summary>
			<param name="context">The contextual information about the source or destination.</param>
			<param name="info">The object that holds the serialized data.</param>
			<exception cref="T:System.ArgumentNullException">The info parameter is null.</exception>
		</member>
		<member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
			<summary>Gets the <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode"></see> for the error.</summary>
			<returns>The failure code for the error.</returns>
		</member>
		<member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
			<summary>Specifies error conditions that can occur when performing a rights management operation. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
			<summary>Asynchronous operation canceled, or a non-recoverable error has occurred.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
			<summary>License activation failed; rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
			<summary>The current user was not found in the Active Directory (AD) for certification under Windows authentication.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
			<summary>The requested operation is already in progress.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
			<summary>Possible authentication error (HTTP error 401) returned by an Internet request. Or, the current user does not have valid domain credentials in a silent user activation attempt. Or, the certification server in silent user activation is not in the local intranet or trusted sites zone.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
			<summary>An invalid constant was passed.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
			<summary>The access condition is not matched to the enabling principal that is handed into the bind.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
			<summary>The current user does not satisfy the conditions defined in the End Use License (EUL).</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
			<summary>The specified resource is not contained in any WORK node of the license.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
			<summary>The enabling principal does not match the issued principal of the End Use License (EUL).</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
			<summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
			<summary>The current machine is not defined within the rights managed group identity.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
			<summary>The current user does not have rights to access the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
			<summary>The specified rights group is not contained in the End Use License (EUL).</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
			<summary>The current user does not have rights to access the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
			<summary>The license requires that a new revocation list must be acquired.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
			<summary>The current user does not have rights to access the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
			<summary>The current user does not have rights to access the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
			<summary>The current user does not have rights to access the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
			<summary>The current user does not have rights to access the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
			<summary>The End Use License (EUL) contains no WORK node.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
			<summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
			<summary>The rights management certificate chain is broken.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
			<summary>Clock rollback has been detected.  Protected content cannot be accessed.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
			<summary>A cryptographic operation that was requested is not supported. For example, passing an RMS encrypting object for decrypting purposes.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
			<summary>Cannot open or publish content with restricted permissions because a debugger has been detected. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
			<summary>The user's email address cannot be verified.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
			<summary>The specified principal cannot be enabled</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
			<summary>Encryption is not permitted. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
			<summary>The <see cref="T:System.Security.RightsManagement.SecureEnvironment"></see> cannot load.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
			<summary>The <see cref="T:System.Security.RightsManagement.SecureEnvironment"></see> cannot load.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
			<summary>The authorized time period defined in the issuance license template has expired; access is no longer permitted.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
			<summary>The option specified has already been set.  </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
			<summary>A user name was not specified for the client session</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
			<summary>The Hardware ID (HID) used in a machine activation attempt is incorrectly formatted. Rights management services are not properly configured.  </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
			<summary>The Hardware ID (HID) used in a machine activation attempt is invalid. Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
			<summary>The content ID from the license does not match the content ID the license storage session</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
			<summary>An object type passed is incompatible with this operation.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
			<summary>When creating a bound license, an issuance license, not an end-use license, was specified.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
			<summary>Some information is missing.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
			<summary>An installation operation failed.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
			<summary>The algorithm type specified is invalid.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
			<summary>RMS Server email address verification failed.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
			<summary>The specified encoding type is invalid. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
			<summary>Either the environment or the enabling principal handle is invalid. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
			<summary>The Rights Management Services template contains one or more errors.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
			<summary>The key length specified in a key/value pair is invalid.   </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
			<summary>The license structure in one of the certificates is invalid. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
			<summary>Rights management signed digital certificate cannot be validated. (The signed certificate may have been tampered.)</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
			<summary>The numeric value specified is invalid.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
			<summary>The specified registry path is invalid.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
			<summary>The time information specified is invalid.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
			<summary>The rights management version is incorrect.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
			<summary>The key type specified in a key/value pair is not supported.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
			<summary>A library operation failed.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
			<summary>The specified library plug-in is not supported.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
			<summary>An End Use License (EUL) could not be acquired from the rights management server.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
			<summary>The current user credentials are not valid for acquiring a license.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
			<summary>An operation is in violation of the rights management manifest policy.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
			<summary>The specified metadata could net be set.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
			<summary>The user is not activated, or no Rights Account Certificate (RAC) was submitted and none was found in the license store to match the license associated with this session.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
			<summary>The computer must be activated before the user can be activated. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
			<summary>Rights management cannot connect to the URI specified for the license server.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
			<summary>The protected content is corrupted.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
			<summary>A required license is not available.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
			<summary>No license or certificate exists at the specified index. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
			<summary>Rights managed content is corrupted.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
			<summary>The item requested to delete does not exist. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
			<summary>The license server's maximum quota of End Use Licenses (EULs) has been reached.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
			<summary>The document does not contain an Owner License.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
			<summary>No instances of the requested attribute exist. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
			<summary>The specified license was not found. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
			<summary>The Rights Management server does not allow temporary certification of the current user.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
			<summary>Certificate or license revocation information has not been set.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
			<summary>The current user does not have rights to access the protected content.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
			<summary>The requested right was not specified when the content was published with rights management.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
			<summary>Rights management services are not properly configured.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
			<summary>Operation has competed successfully.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
			<summary>The number of certificates has exceeded the maximum number allowed.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
			<summary>Too many <see cref="T:System.Security.RightsManagement.SecureEnvironment"></see> instance have been created.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
			<summary>An unspecified error occurred.  Also thrown when an application runs in debug mode. </summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
			<summary>If a request is made for computer activation or a rights account certificate, receiving <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault"></see> indicates that the application should pass null into the ActServInfo parameter</summary>
		</member>
		<member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
			<summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
		</member>
		<member name="T:System.Security.RightsManagement.SecureEnvironment">
			<summary>Represents a secure client session for user activation, license binding, and other rights management operations.</summary>
		</member>
		<member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
			<summary>Creates a secure client session for a specified user with a given rights manifest.</summary>
			<returns>A secure client session for activation, license binding, and other rights management operations.</returns>
			<param name="user">The user or user-group for granting access to rights managed content.</param>
			<param name="applicationManifest">The application rights manifest.</param>
		</member>
		<member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
			<summary>Creates a secure client session given an application rights manifest, <see cref="T:System.Security.RightsManagement.AuthenticationType"></see>, and <see cref="T:System.Security.RightsManagement.UserActivationMode"></see>.</summary>
			<returns>A secure client session for activation, license binding, and other rights management operations.</returns>
			<param name="userActivationMode">The type of the user rights account certificatehttp://go.microsoft.com/fwlink/?LinkId=74474.</param>
			<param name="authentication">The method of authentication.</param>
			<param name="applicationManifest">The application rights manifest.</param>
		</member>
		<member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
			<summary>Releases the unmanaged resources used by the <see cref="T:System.Security.RightsManagement.SecureEnvironment"></see> and optionally releases the managed resources. </summary>
			<param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
		</member>
		<member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
			<summary>Returns a list of the activated users.</summary>
			<returns>A list of the currently activated users.</returns>
		</member>
		<member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
			<summary>Indicates whether a given user has been activated for accessing rights managed content.</summary>
			<returns>true if the given user has been activated for accessing rights managed content; otherwise, false.</returns>
			<param name="user">The user or user-group for granting access to rights managed content.</param>
		</member>
		<member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
			<summary>Removes the license activation for a specified user.</summary>
			<param name="user">The user to remove the license activation for.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">The given user is not authenticated with either Windows authentication or Passport authentication.</exception>
			<exception cref="T:System.ArgumentNullException">The user parameter is null.</exception>
		</member>
		<member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
			<summary>Gets the <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest"></see> specified when the <see cref="T:System.Security.RightsManagement.SecureEnvironment"></see> was created.</summary>
			<returns>The application manifest specified to the <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create"></see> method when the <see cref="T:System.Security.RightsManagement.SecureEnvironment"></see> is created.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.SecureEnvironment.User">
			<summary>Gets the user or user-group specified when the <see cref="T:System.Security.RightsManagement.SecureEnvironment"></see> was created. </summary>
			<returns>The user or user-group specified to the <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)"></see> method when the <see cref="T:System.Security.RightsManagement.SecureEnvironment"></see> was created.</returns>
		</member>
		<member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
			<summary>Represents an unsigned rights managed <see cref="T:System.Security.RightsManagement.PublishLicense"></see> or an unsigned <see cref="T:System.Security.RightsManagement.PublishLicense"></see> template.</summary>
		</member>
		<member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense"></see> class. </summary>
		</member>
		<member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense"></see> class from a specified template of the XrML<see cref="T:System.Security.RightsManagement.PublishLicense"></see>. </summary>
			<param name="publishLicenseTemplate">A template that is made from an Extensible Rights Markup Language (XrML)<see cref="T:System.Security.RightsManagement.PublishLicense"></see> in order to create this license.</param>
		</member>
		<member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
			<summary>Creates a signed <see cref="T:System.Security.RightsManagement.PublishLicense"></see> and returns a <see cref="T:System.Security.RightsManagement.UseLicense"></see> for the document author.</summary>
			<returns>The signed <see cref="T:System.Security.RightsManagement.PublishLicense"></see> that is created by signing this <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense"></see>.</returns>
			<param name="authorUseLicense">A returned <see cref="T:System.Security.RightsManagement.UseLicense"></see> for the document author.</param>
			<param name="secureEnvironment">The secure environment for license activation and binding.</param>
		</member>
		<member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
			<summary>Returns a serialized template that is made from an XrML<see cref="T:System.Security.RightsManagement.PublishLicense"></see>.</summary>
			<returns>A serialized template that is made from an Extensible Rights Markup Language (XrML)<see cref="T:System.Security.RightsManagement.PublishLicense"></see>.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
			<summary>Gets or sets the publisher-created content identifier. </summary>
			<returns>The publisher-created rights-managed content identifier.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
			<summary>Gets a collection of assigned user rights.</summary>
			<returns>A collection of the assigned user rights that are provided in this license.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
			<summary>Gets a collection of name and description pairs.</summary>
			<returns>A collection of name and description pairs.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
			<summary>Gets or sets the content owner. </summary>
			<returns>The user who owns the published content.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
			<summary>Gets or sets the contact name for the author or publisher of the content.</summary>
			<returns>The contact name for the author or publisher of the content.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
			<summary>Gets or sets the contact URI for the author or publisher of the content.</summary>
			<returns>The contact uniform resource identifier (URI) for the author or publisher of the content.</returns>
		</member>
		<member name="T:System.Security.RightsManagement.UseLicense">
			<summary>Represents a license that enables access to protected rights managed content.    </summary>
		</member>
		<member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UseLicense"></see> class. </summary>
			<param name="useLicense">A use license in serialized Extensible Rights Markup Language (XrML) form.</param>
			<exception cref="T:System.ArgumentNullException">useLicense is null.</exception>
			<exception cref="T:System.Security.RightsManagement.RightsManagementException">useLicense is invalid.</exception>
		</member>
		<member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
			<summary>Binds the license to a given <see cref="T:System.Security.RightsManagement.SecureEnvironment"></see>.</summary>
			<returns>A <see cref="T:System.Security.RightsManagement.CryptoProvider"></see> instance if the license binding succeeded; otherwise, null.</returns>
			<param name="secureEnvironment">The environment to bind the license to.</param>
			<exception cref="T:System.ArgumentNullException">secureEnvironment is null.</exception>
		</member>
		<member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
			<summary>Indicates if this license is equivalent to another given license.</summary>
			<returns>true if both licenses are the equivalent; otherwise, false.</returns>
			<param name="x">The license to compare.</param>
		</member>
		<member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
			<summary>Returns the hash code associated with this license.</summary>
			<returns>A hash code for this license. </returns>
		</member>
		<member name="M:System.Security.RightsManagement.UseLicense.ToString">
			<summary>Returns the serialized XrML string used to create this license.</summary>
			<returns>The serialized Extensible Rights Markup Language (XrML) string originally passed to the <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)"></see> constructor.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
			<summary>Gets the application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.</summary>
			<returns>The application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.UseLicense.ContentId">
			<summary>Gets the content identifier created by the publisher.</summary>
			<returns>The content identifier created by the publisher.</returns>
		</member>
		<member name="P:System.Security.RightsManagement.UseLicense.Owner">
			<summary>Gets the owner of the license. </summary>
			<returns>The owner of the license. </returns>
		</member>
		<member name="T:System.Security.RightsManagement.UserActivationMode">
			<summary>Specifies the type of user Rights Account Certificate to request for rights management activation.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
			<summary>A permanent Rights Account Certificate.</summary>
		</member>
		<member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
			<summary>A temporary Rights Account Certificate.</summary>
		</member>
		<member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
			<summary>Provides a base class for .NET Framework attributes that report the use scope of attached properties.</summary>
		</member>
		<member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute"></see> class.</summary>
		</member>
		<member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
			<summary>Specifies that an attached property is browsable only for elements that derive from a specified type.</summary>
		</member>
		<member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute"></see> class, using the provided targetType.</summary>
			<param name="targetType">The intended type that scopes the use of the attached property.where this .NET Framework attribute applies.</param>
		</member>
		<member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
			<summary>Determines whether the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute"></see> .NET Framework attribute is equal to a specified object.</summary>
			<returns>true if the specified <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute"></see> is equal to the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute"></see>; otherwise, false.</returns>
			<param name="obj">The <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute"></see> to compare to the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute"></see>.</param>
		</member>
		<member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
			<summary>Returns the hash code for this <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute"></see> .NET Framework attribute.</summary>
			<returns>An unsigned 32-bit integer value.</returns>
		</member>
		<member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
			<summary>Gets the base type that scopes the use of the attached property where this .NET Framework attribute applies.</summary>
			<returns>The requested <see cref="T:System.Type"></see>.</returns>
		</member>
		<member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
			<summary>Gets a unique type identifier for this <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute"></see> .NET Framework attribute.</summary>
			<returns>An object that is a unique identifier for the <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute"></see>.</returns>
		</member>
		<member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
			<summary>Specifies that an attached property is only browsable on an element that also has another specific  .NET Framework attribute applied to its class definition.</summary>
		</member>
		<member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute"></see> class.</summary>
			<param name="attributeType">The <see cref="T:System.Type"></see> of the  .NET Framework attribute that must also be applied on a class in order for the attached property to be browsable on the class where <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute"></see> is applied..</param>
		</member>
		<member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
			<summary>Determines whether the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute"></see> .NET Framework attribute is equal to a specified object.</summary>
			<returns>true if the specified <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute"></see> is equal to the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute"></see>; otherwise, false.</returns>
			<param name="obj">The <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute"></see> to compare to the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute"></see>.</param>
		</member>
		<member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
			<summary>Returns the hash code for this <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute"></see> .NET Framework attribute.</summary>
			<returns>An unsigned 32-bit integer value.</returns>
		</member>
		<member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
			<summary>Gets the type of the  .NET Framework attribute that must also be applied on a class.</summary>
			<returns>The  .NET Framework attribute type.</returns>
		</member>
		<member name="T:System.Windows.CoerceValueCallback">
			<summary>Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</summary>
			<returns>The coerced value (with appropriate type). </returns>
		</member>
		<member name="T:System.Windows.DependencyObject">
			<summary>Represents an object that participates in the dependency property system.</summary>
		</member>
		<member name="M:System.Windows.DependencyObject.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyObject"></see> class. </summary>
		</member>
		<member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
			<summary>Clears the local value of a property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty"></see> identifier. </summary>
			<param name="dp">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty"></see> object reference.</param>
			<exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)"></see> on a sealed <see cref="T:System.Windows.DependencyObject"></see>.</exception>
		</member>
		<member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
			<summary>Clears the local value of a property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey"></see>. </summary>
			<param name="key">The key for the dependency property to be cleared.</param>
			<exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)"></see> on a sealed <see cref="T:System.Windows.DependencyObject"></see>.</exception>
		</member>
		<member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
			<summary>Coerces the value of the specified dependency property. This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback"></see> function specified in property metadata for the property on this type.</summary>
			<param name="dp">The identifier for the dependency property to coerce.</param>
			<exception cref="T:System.InvalidOperationException">The specified dp or its value were invalid or do not exist.</exception>
		</member>
		<member name="M:System.Windows.DependencyObject.Equals(System.Object)">
			<summary>Determines whether a provided <see cref="T:System.Windows.DependencyObject"></see> is equivalent to the current <see cref="T:System.Windows.DependencyObject"></see>.</summary>
			<returns>true if the two instances are the same; otherwise, false.</returns>
			<param name="obj">The <see cref="T:System.Windows.DependencyObject"></see>  to compare to the current instance.</param>
		</member>
		<member name="M:System.Windows.DependencyObject.GetHashCode">
			<summary>Gets a hash code for this <see cref="T:System.Windows.DependencyObject"></see>.</summary>
			<returns>A signed 32-bit integer hash code.</returns>
		</member>
		<member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
			<summary>Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject"></see>. </summary>
			<returns>A specialized local value enumerator.</returns>
		</member>
		<member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
			<summary>Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject"></see>. </summary>
			<returns>Returns the current effective value.</returns>
			<param name="dp">The <see cref="T:System.Windows.DependencyProperty"></see> identifier of the property to retrieve the value for.</param>
			<exception cref="T:System.InvalidOperationException">The specified dp or its value were invalid, or the specified dp does not exist.</exception>
		</member>
		<member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
			<summary>Re-evaluates the effective value for the specified dependency property</summary>
			<param name="dp">The <see cref="T:System.Windows.DependencyProperty"></see> identifier of the property to invalidate.</param>
		</member>
		<member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary>Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject"></see> has been updated. The specific dependency property that changed is reported in the event data. </summary>
			<param name="e">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</param>
		</member>
		<member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
			<summary>Returns the local value of a dependency property, if it exists. </summary>
			<returns>Returns the local value, or returns the <see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> if no local value is set.</returns>
			<param name="dp">The <see cref="T:System.Windows.DependencyProperty"></see> identifier of the property to retrieve the value for.</param>
		</member>
		<member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
			<summary>Sets the local value of a dependency property, specified by its dependency property identifier. </summary>
			<param name="dp">The identifier of the dependency property to set.</param>
			<param name="value">The new local value.</param>
			<exception cref="T:System.ArgumentException">value was not the correct type as registered for the dp property.</exception>
			<exception cref="T:System.InvalidOperationException">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject"></see>.</exception>
		</member>
		<member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
			<summary>Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey"></see> identifier of the dependency property. </summary>
			<param name="value">The new local value.</param>
			<param name="key">The <see cref="T:System.Windows.DependencyPropertyKey"></see> identifier of the property to set.</param>
		</member>
		<member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
			<summary>Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</summary>
			<returns>true if the dependency property that is supplied should be value-serialized; otherwise, false.</returns>
			<param name="dp">The identifier for the dependency property that should be serialized.</param>
		</member>
		<member name="P:System.Windows.DependencyObject.DependencyObjectType">
			<summary>Gets the <see cref="T:System.Windows.DependencyObjectType"></see> that wraps the CLR type of this instance. </summary>
			<returns>A <see cref="T:System.Windows.DependencyObjectType"></see> that wraps the CLR type of this instance. </returns>
		</member>
		<member name="P:System.Windows.DependencyObject.IsSealed">
			<summary>Gets a value that declares whether this instance is currently read-only.</summary>
			<returns>true if this instance is sealed; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.DependencyObjectType">
			<summary>Implements an underlying type cache for all <see cref="T:System.Windows.DependencyObject"></see> derived types.</summary>
		</member>
		<member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
			<summary>Returns a <see cref="T:System.Windows.DependencyObjectType"></see> that represents a given system (CLR) type.</summary>
			<returns>A <see cref="T:System.Windows.DependencyObjectType"></see> that represents the system (CLR) type.</returns>
			<param name="systemType">The system (CLR) type to convert.</param>
		</member>
		<member name="M:System.Windows.DependencyObjectType.GetHashCode">
			<summary>Returns the hash code for this <see cref="T:System.Windows.DependencyObjectType"></see>.</summary>
			<returns>A 32-bit signed integer hash code. </returns>
		</member>
		<member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
			<summary>Determines whether the specified object is an instance of the current <see cref="T:System.Windows.DependencyObjectType"></see>.</summary>
			<returns>true if the class represented by the current <see cref="T:System.Windows.DependencyObjectType"></see> is in the inheritance hierarchy of the <see cref="T:System.Windows.DependencyObject"></see> passed as d; otherwise, false.</returns>
			<param name="dependencyObject">The object to compare with the current <see cref="T:System.Windows.DependencyObjectType"></see>.</param>
		</member>
		<member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
			<summary>Determines whether the current <see cref="T:System.Windows.DependencyObjectType"></see> derives from the specified <see cref="T:System.Windows.DependencyObjectType"></see>.</summary>
			<returns>true if the dependencyObjectType parameter and the current <see cref="T:System.Windows.DependencyObjectType"></see> represent types of classes, and the class represented by the current <see cref="T:System.Windows.DependencyObjectType"></see> derives from the class represented by dependencyObjectType. Otherwise, false. This method also returns false if dependencyObjectType and the current <see cref="T:System.Windows.DependencyObjectType"></see> represent the same class.</returns>
			<param name="dependencyObjectType">The <see cref="T:System.Windows.DependencyObjectType"></see> to compare.</param>
		</member>
		<member name="P:System.Windows.DependencyObjectType.BaseType">
			<summary>Gets the <see cref="T:System.Windows.DependencyObjectType"></see> of the immediate base class of the current <see cref="T:System.Windows.DependencyObjectType"></see>. </summary>
			<returns>The type of the base class.</returns>
		</member>
		<member name="P:System.Windows.DependencyObjectType.Id">
			<summary>Gets a zero-based unique identifier for constant-time array lookup operations.</summary>
			<returns>An internal identifier.</returns>
		</member>
		<member name="P:System.Windows.DependencyObjectType.Name">
			<summary>Gets the name of the represented common language runtime (CLR) system type. </summary>
			<returns>The name of the represented CLR system type.</returns>
		</member>
		<member name="P:System.Windows.DependencyObjectType.SystemType">
			<summary> Gets the common language runtime (CLR) system type represented by this <see cref="T:System.Windows.DependencyObjectType"></see>. </summary>
			<returns>The CLR system type represented by this <see cref="T:System.Windows.DependencyObjectType"></see>.</returns>
		</member>
		<member name="T:System.Windows.DependencyProperty">
			<summary>Represents a dependency property that is registered with the Windows Presentation Foundation (WPF) property system. Dependency properties provide support for value expressions, property invalidation and dependent-value coercion, default values, inheritance, data binding, animation, property change notification, and styling.</summary>
		</member>
		<member name="F:System.Windows.DependencyProperty.UnsetValue">
			<summary>Specifies a static value that is used by the property system rather than null to indicate that the property exists, but does not have its value set by the property system.</summary>
			<returns>An unset value. This is effectively the result of a call to the <see cref="T:System.Object"></see> constructor.</returns>
		</member>
		<member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
			<summary>Adds another type as an owner of a dependency property that has already been registered.</summary>
			<returns>A reference to the original <see cref="T:System.Windows.DependencyProperty"></see> identifier that identifies the dependency property. This identifier should be exposed by the adding class as a public static readonly field.</returns>
			<param name="ownerType">The type to add as an owner of this dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
			<summary> Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type. </summary>
			<returns>A reference to the original <see cref="T:System.Windows.DependencyProperty"></see> identifier that identifies the dependency property. This identifier should be exposed by the adding class as a public static readonly field.</returns>
			<param name="typeMetadata">The metadata that qualifies the dependency property as it exists on the provided type.</param>
			<param name="ownerType">The type to add as owner of this dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.GetHashCode">
			<summary>Returns a hash code for this <see cref="T:System.Windows.DependencyProperty"></see>.</summary>
			<returns>The hash code for this <see cref="T:System.Windows.DependencyProperty"></see>.</returns>
		</member>
		<member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
			<summary> Returns the metadata for this dependency property as it exists on the specified object instance. </summary>
			<returns>A property metadata object.</returns>
			<param name="dependencyObject">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
			<summary> Returns the metadata for this dependency property as it exists on a specified type. </summary>
			<returns>A property metadata object.</returns>
			<param name="dependencyObjectType">A specific object that records the dependency object type from which the dependency property metadata is desired.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
			<summary> Returns the metadata for this dependency property as it exists on a specified existing type. </summary>
			<returns>A property metadata object.</returns>
			<param name="forType">The specific type from which to retrieve the dependency property metadata.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
			<summary>Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration. </summary>
			<returns>true if the specified value is the registered property type or an acceptable derived type; otherwise, false.</returns>
			<param name="value">The value to check.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
			<summary> Determines whether the provided value is accepted for the type of property, and also if it is within the allowed range of values for that type, as specified by any <see cref="T:System.Windows.ValidateValueCallback"></see> provided in the dependency property registration. </summary>
			<returns>true if the value is acceptable and is of the correct type or a derived type; otherwise, false.</returns>
			<param name="value">The value to check.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
			<summary>Supplies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the inherited dependency property.</summary>
			<param name="typeMetadata">The metadata to apply to the dependency property on the overriding type.</param>
			<param name="forType">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</param>
			<exception cref="T:System.ArgumentException">Metadata was already established for the dependency property as it exists on the provided type.</exception>
			<exception cref="T:System.InvalidOperationException">An attempt was made to override metadata on a read-only dependency property (cannot be done using this signature).</exception>
		</member>
		<member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
			<summary>Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration. You must pass the <see cref="T:System.Windows.DependencyPropertyKey"></see> for the read-only dependency property to avoid raising an exception.</summary>
			<param name="typeMetadata">The metadata to apply to the dependency property on the overriding type.</param>
			<param name="key">Access key for a read-only dependency property. </param>
			<param name="forType">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
			<summary>Registers a dependency property with the specified property name, property type, and owner type. </summary>
			<returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
			<param name="propertyType">The type of the property.</param>
			<param name="name">The name of the dependency property to register. The name must be unique within the registration namespace of the owner type.</param>
			<param name="ownerType">The owner type that is registering the dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
			<summary> Registers a dependency property with the specified property name, property type, owner type, and property metadata. </summary>
			<returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
			<param name="typeMetadata">Property metadata for the dependency property.</param>
			<param name="propertyType">The type of the property.</param>
			<param name="name">The name of the dependency property to register.</param>
			<param name="ownerType">The owner type that is registering the dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
			<summary> Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property. </summary>
			<returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
			<param name="typeMetadata">Property metadata for the dependency property.</param>
			<param name="propertyType">The type of the property.</param>
			<param name="name">The name of the dependency property to register.</param>
			<param name="validateValueCallback">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
			<param name="ownerType">The owner type that is registering the dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
			<summary> Registers an attached property with the specified property name, property type, and owner type. </summary>
			<returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
			<param name="propertyType">The type of the property.</param>
			<param name="name">The name of the dependency property to register.</param>
			<param name="ownerType">The owner type that is registering the dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
			<summary> Registers an attached property with the specified property name, property type, owner type, and property metadata. </summary>
			<returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
			<param name="propertyType">The type of the property.</param>
			<param name="name">The name of the dependency property to register.</param>
			<param name="defaultMetadata">Property metadata for the dependency property. This can include the default value as well as other characteristics.</param>
			<param name="ownerType">The owner type that is registering the dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
			<summary> Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property. </summary>
			<returns>A dependency property identifier that should be used to set the value of a public static readonly field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
			<param name="propertyType">The type of the property.</param>
			<param name="name">The name of the dependency property to register.</param>
			<param name="defaultMetadata">Property metadata for the dependency property. This can include the default value as well as other characteristics.</param>
			<param name="validateValueCallback">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
			<param name="ownerType">The owner type that is registering the dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
			<summary> Registers a read-only attached property, with the specified property type, owner type, and property metadata. </summary>
			<returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</returns>
			<param name="propertyType">The type of the property.</param>
			<param name="name">The name of the dependency property to register.</param>
			<param name="defaultMetadata">Property metadata for the dependency property.</param>
			<param name="ownerType">The owner type that is registering the dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
			<summary> Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback. </summary>
			<returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</returns>
			<param name="propertyType">The type of the property.</param>
			<param name="name">The name of the dependency property to register.</param>
			<param name="defaultMetadata">Property metadata for the dependency property.</param>
			<param name="validateValueCallback">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
			<param name="ownerType">The owner type that is registering the dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
			<summary> Registers a read-only dependency property, with the specified property type, owner type, and property metadata. </summary>
			<returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</returns>
			<param name="typeMetadata">Property metadata for the dependency property.</param>
			<param name="propertyType">The type of the property.</param>
			<param name="name">The name of the dependency property to register.</param>
			<param name="ownerType">The owner type that is registering the dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
			<summary> Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback. </summary>
			<returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</returns>
			<param name="typeMetadata">Property metadata for the dependency property.</param>
			<param name="propertyType">The type of the property.</param>
			<param name="name">The name of the dependency property to register.</param>
			<param name="validateValueCallback">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
			<param name="ownerType">The owner type that is registering the dependency property.</param>
		</member>
		<member name="M:System.Windows.DependencyProperty.ToString">
			<summary> Returns the string representation of the dependency property. </summary>
			<returns>The string representation of the dependency property.</returns>
		</member>
		<member name="P:System.Windows.DependencyProperty.DefaultMetadata">
			<summary>Gets the default metadata of the dependency property. The default metadata is the property metadata that is available to any <see cref="T:System.Windows.DependencyObject"></see> or a derived type in the event that no specific metadata was supplied by an explicit <see cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)"></see> or <see cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)"></see> call.</summary>
			<returns>The default metadata of the dependency property.</returns>
		</member>
		<member name="P:System.Windows.DependencyProperty.GlobalIndex">
			<summary>Gets an internally generated value that uniquely identifies the dependency property.</summary>
			<returns>A unique numeric identifier.</returns>
		</member>
		<member name="P:System.Windows.DependencyProperty.Name">
			<summary> Gets the name of the dependency property. </summary>
			<returns>The name of the property.</returns>
		</member>
		<member name="P:System.Windows.DependencyProperty.OwnerType">
			<summary>Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property. </summary>
			<returns>The type of the object that registered the property or added itself as owner of the property.</returns>
		</member>
		<member name="P:System.Windows.DependencyProperty.PropertyType">
			<summary>Gets the type that the dependency property uses for its value. </summary>
			<returns>The <see cref="T:System.Type"></see> of the property.</returns>
		</member>
		<member name="P:System.Windows.DependencyProperty.ReadOnly">
			<summary>Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty"></see> instance is a read-only dependency property.</summary>
			<returns>true if the dependency property is read-only; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
			<summary>Gets the value validation callback for the dependency property. </summary>
			<returns>The value validation callback for this dependency property, as provided for the validateValueCallback parameter in the original dependency property registration.</returns>
		</member>
		<member name="T:System.Windows.DependencyPropertyChangedEventArgs">
			<summary>Provides data for various property changed events. Typically these events report effective value changes in the value of a read-only dependency property. Another usage is as part of a <see cref="T:System.Windows.PropertyChangedCallback"></see> implementation.</summary>
		</member>
		<member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> class.</summary>
			<param name="oldValue">The value of the property before the change reported by the relevant event or state change.</param>
			<param name="newValue">The value of the property after the change reported by the relevant event or state change.</param>
			<param name="property">The identifier for the dependency property that changed.</param>
		</member>
		<member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary>Determines whether the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see>.</summary>
			<returns>true if the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see>; otherwise, false.</returns>
			<param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see></param>
		</member>
		<member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
			<summary>Determines whether the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see>.</summary>
			<returns>true if the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see>; otherwise, false.</returns>
			<param name="obj">The object to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see>.</param>
		</member>
		<member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
			<summary>Gets a hash code  for this <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see>. </summary>
			<returns>A signed 32-bit integer hash code. </returns>
		</member>
		<member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
			<summary>Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> objects have the same value.</summary>
			<returns>true if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> instances are equivalent; otherwise, false.</returns>
			<param name="right">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> to compare.</param>
			<param name="left">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
			<summary>Determines whether two specified <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> objects are different.</summary>
			<returns>true if the two <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> instances are different; otherwise, false.</returns>
			<param name="right">The second <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> to compare.</param>
			<param name="left">The first <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"></see> to compare.</param>
		</member>
		<member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
			<summary>Gets the value of the property after the change.</summary>
			<returns>The property value after the change.</returns>
		</member>
		<member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
			<summary>Gets tbe value of the property before the change.</summary>
			<returns>The property value before the change.</returns>
		</member>
		<member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
			<summary>Gets the identifier for the dependency property where the value change occurred.</summary>
			<returns>The identifier field of the dependency property where the value change occurred.</returns>
		</member>
		<member name="T:System.Windows.DependencyPropertyChangedEventHandler">
			<summary> Represents the method that will handle the event raised when a <see cref="T:System.Windows.DependencyProperty"></see> is changed on a <see cref="T:System.Windows.DependencyObject"></see>. </summary>
		</member>
		<member name="T:System.Windows.DependencyPropertyKey">
			<summary>Provides a dependency property identifier for limited write access to a read-only dependency property.</summary>
		</member>
		<member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
			<summary>Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</summary>
			<param name="typeMetadata">Metadata supplied for this type.</param>
			<param name="forType">The type on which this dependency property exists and metadata should be overridden.</param>
			<exception cref="T:System.ArgumentException">Metadata was already established for the property as it exists on the provided type.</exception>
			<exception cref="T:System.InvalidOperationException">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</exception>
		</member>
		<member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
			<summary>Gets the dependency property identifier associated with this specialized read-only dependency property identifier. </summary>
			<returns>The relevant dependency property identifier.</returns>
		</member>
		<member name="T:System.Windows.Expression">
			<summary>This type supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
		</member>
		<member name="T:System.Windows.ExpressionConverter">
			<summary>This type supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
		</member>
		<member name="M:System.Windows.ExpressionConverter.#ctor">
			<summary>Members of this type support the Windows Presentation Foundation (WPF) infrastructure and are not intended to be used directly from your code. </summary>
		</member>
		<member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Members of this type support the Windows Presentation Foundation (WPF) infrastructure and are not intended to be used directly from your code. </summary>
			<param name="context"> </param>
			<param name="sourceType"> </param>
		</member>
		<member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Members of this type support the Windows Presentation Foundation (WPF) infrastructure and are not intended to be used directly from your code. </summary>
			<param name="context"> </param>
			<param name="destinationType"> </param>
		</member>
		<member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Members of this type support the Windows Presentation Foundation (WPF) infrastructure and are not intended to be used directly from your code. </summary>
			<returns> </returns>
			<param name="culture"> </param>
			<param name="context"> </param>
			<param name="value"> </param>
		</member>
		<member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Members of this type support the Windows Presentation Foundation (WPF) infrastructure and are not intended to be used directly from your code. </summary>
			<returns> </returns>
			<param name="culture"> </param>
			<param name="context"> </param>
			<param name="destinationType"> </param>
			<param name="value"> </param>
		</member>
		<member name="T:System.Windows.Freezable">
			<summary>Defines an object that has a modifiable and a read-only (frozen) state. Classes that derive from <see cref="T:System.Windows.Freezable"></see> provide detailed change notification, can be made immutable, and can clone themselves. </summary>
		</member>
		<member name="M:System.Windows.Freezable.#ctor">
			<summary> Initializes a new instance of a <see cref="T:System.Windows.Freezable"></see> derived class. </summary>
		</member>
		<member name="E:System.Windows.Freezable.Changed">
			<summary>Occurs when this <see cref="T:System.Windows.Freezable"></see> or an object it contains is modified. </summary>
		</member>
		<member name="M:System.Windows.Freezable.Clone">
			<summary>Creates a modifiable clone of this <see cref="T:System.Windows.Freezable"></see>, making deep copies of this object's values. When copying this object's dependency properties, this method copies expressions (but they might no longer resolve) but not animations or their current values. </summary>
			<returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property was true.</returns>
		</member>
		<member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
			<summary>Makes this instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable"></see> using base (non-animated) property values. </summary>
			<param name="sourceFreezable">The object to clone.</param>
		</member>
		<member name="M:System.Windows.Freezable.CloneCurrentValue">
			<summary>Creates a modifiable clone (deep copy) of this <see cref="T:System.Windows.Freezable"></see> using its current values.</summary>
			<returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property was true.</returns>
		</member>
		<member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
			<summary>Makes this instance a modifiable clone (deep copy) of the specified <see cref="T:System.Windows.Freezable"></see> using current property values.</summary>
			<param name="sourceFreezable">The <see cref="T:System.Windows.Freezable"></see> to be cloned.</param>
		</member>
		<member name="M:System.Windows.Freezable.CreateInstance">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Freezable"></see> class. </summary>
			<returns>The new instance.</returns>
		</member>
		<member name="M:System.Windows.Freezable.CreateInstanceCore">
			<summary> When implemented in a derived class, creates a new instance of that <see cref="T:System.Windows.Freezable"></see> subclass. </summary>
			<returns>The new instance.</returns>
		</member>
		<member name="M:System.Windows.Freezable.Freeze">
			<summary>Makes the current object unmodifiable and sets its <see cref="P:System.Windows.Freezable.IsFrozen"></see> property to true. </summary>
			<exception cref="T:System.InvalidOperationException">The exception that is thrown when attempting to make a <see cref="T:System.Windows.Freezable"></see> unmodifiable that cannot be made unmodifiable. </exception>
		</member>
		<member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
			<summary> If the isChecking parameter is set to true, this method determines whether the specified <see cref="T:System.Windows.Freezable"></see> can be made unmodifiable. Otherwise, if the isChecking parameter is set to false, this method makes a <see cref="T:System.Windows.Freezable"></see> unmodifiable and sets its <see cref="P:System.Windows.Freezable.IsFrozen"></see> property to true.</summary>
			<returns>If isChecking is true, this method returns true if the specified <see cref="T:System.Windows.Freezable"></see> can be made unmodifiable, or false if it cannot be made unmodifiable. If isChecking is false, this method returns true if the if the specified <see cref="T:System.Windows.Freezable"></see> is now unmodifiable, or false if it cannot be made unmodifiable, with the side effect of having made the actual change in frozen status to this object. </returns>
			<param name="isChecking">Set to true to have this method check whether the specified  <see cref="T:System.Windows.Freezable"></see> can be made unmodifiable. Set to false to have this method attempt to make the specified <see cref="T:System.Windows.Freezable"></see> unmodifiable. </param>
			<param name="freezable">The object to check or make unmodifiable. If the isChecking parameter is set to true, this object is checked to determine whether it can be made unmodifiable. If isChecking is false, this object is made unmodifiable, if possible.</param>
			<exception cref="T:System.InvalidOperationException">When IsChecking is false, the attempt to make freezable unmodifiable was unsuccessful the object is now in an unknown state (it might be partially frozen).  </exception>
		</member>
		<member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
			<summary>Makes this <see cref="T:System.Windows.Freezable"></see> object unmodifiable or determines whether it can be made unmodifiable.</summary>
			<returns>If isChecking is true, this method returns true if this <see cref="T:System.Windows.Freezable"></see> can be made unmodifiable, or false if it cannot be made unmodifiable. If isChecking is false, this method returns true if the if the specified <see cref="T:System.Windows.Freezable"></see> is now unmodifiable, or false if it cannot be made unmodifiable, with the side effect of having begun to change the frozen status of this object. </returns>
			<param name="isChecking">true if the <see cref="T:System.Windows.Freezable"></see> should simply return whether it can be frozen. false if the <see cref="T:System.Windows.Freezable"></see> instance should actually freeze itself when this method is called.</param>
		</member>
		<member name="M:System.Windows.Freezable.GetAsFrozen">
			<summary>Creates a frozen copy of this <see cref="T:System.Windows.Freezable"></see> , using base (non-animated) property values. Because the copy is frozen, any frozen sub-objects are copied by reference. </summary>
			<returns>A frozen copy of this <see cref="T:System.Windows.Freezable"></see>. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is set to true. </returns>
			<exception cref="T:System.InvalidOperationException">This <see cref="T:System.Windows.Freezable"></see> cannot be frozen because it contains expressions or animated properties.</exception>
		</member>
		<member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Freezable"></see> using base (non-animated) property values.</summary>
			<param name="sourceFreezable">The instance to copy.</param>
		</member>
		<member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
			<summary>Creates a frozen copy of this <see cref="T:System.Windows.Freezable"></see> , using current property values. Because the copy is frozen, any frozen sub-objects are copied by reference.</summary>
			<returns>A frozen copy of this <see cref="T:System.Windows.Freezable"></see>. The copy's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property is set to true.</returns>
		</member>
		<member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
			<summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Freezable"></see>. If this object has animated dependency properties, their current animated values are copied.</summary>
			<param name="sourceFreezable">The <see cref="T:System.Windows.Freezable"></see> to copy and freeze.</param>
		</member>
		<member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
			<summary>Ensures that appropriate context pointers are established for a <see cref="T:System.Windows.DependencyObjectType"></see> data member that has just been set.</summary>
			<param name="oldValue">The previous value of the data member.</param>
			<param name="newValue">The current value of the data member.</param>
		</member>
		<member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
			<summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
			<summary>Overrides the <see cref="T:System.Windows.DependencyObject"></see> implementation of <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"></see>  to also invoke any <see cref="E:System.Windows.Freezable.Changed"></see> handlers in response to a dependency property of type <see cref="T:System.Windows.Freezable"></see>  changing.</summary>
			<param name="e">Event data that contains information about which property changed, and its old and new values.</param>
		</member>
		<member name="M:System.Windows.Freezable.ReadPreamble">
			<summary>Ensures that this <see cref="T:System.Windows.Freezable"></see> is being accessed from a valid thread. Implementers of <see cref="T:System.Windows.Freezable"></see> must call this method at the beginning of any API that reads data members that are not dependency properties.</summary>
		</member>
		<member name="M:System.Windows.Freezable.WritePreamble">
			<summary>Verifies that the <see cref="T:System.Windows.Freezable"></see> is not frozen and that it is being accessed from a valid threading context. <see cref="T:System.Windows.Freezable"></see> implementers should call this method at the beginning of any API that writes to data members that are not dependency properties. </summary>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable"></see> instance is frozen and cannot have its members written to.</exception>
		</member>
		<member name="P:System.Windows.Freezable.CanFreeze">
			<summary>Gets a value that indicates whether this object can be made unmodifiable. </summary>
			<returns>true if the current object can be made unmodifiable or is already unmodifiable; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Freezable.IsFrozen">
			<summary>Gets a value that indicates whether the object is currently modifiable. </summary>
			<returns>true if the object is frozen and cannot be modified. false if the object may be modified.</returns>
		</member>
		<member name="T:System.Windows.Int32Rect">
			<summary>Describes the width, height, and location of an integer rectangle.</summary>
		</member>
		<member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
			<summary>Initializes a new instance of an <see cref="T:System.Windows.Int32Rect"></see> with the specified <see cref="P:System.Windows.Int32Rect.X"></see> and <see cref="P:System.Windows.Int32Rect.Y"></see> coordinates and the specified <see cref="P:System.Windows.Int32Rect.Width"></see> and <see cref="P:System.Windows.Int32Rect.Height"></see>. </summary>
			<param name="y">The <see cref="P:System.Windows.Int32Rect.Y"></see> of the new <see cref="T:System.Windows.Int32Rect"></see> instance which specifies the y-coordinate of the top-left corner of the rectangle.</param>
			<param name="width">The <see cref="P:System.Windows.Int32Rect.Width"></see> of the new <see cref="T:System.Windows.Int32Rect"></see> instance which specifies the width of the rectangle.</param>
			<param name="height">The <see cref="P:System.Windows.Int32Rect.Height"></see> of the new <see cref="T:System.Windows.Int32Rect"></see> instance which specifies the height of the rectangle.</param>
			<param name="x">The <see cref="P:System.Windows.Int32Rect.X"></see> of the new <see cref="T:System.Windows.Int32Rect"></see> instance which specifies the x-coordinate of the top-left corner of the rectangle.</param>
		</member>
		<member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
			<summary>Determines whether the specified rectangle is equal to this rectangle.</summary>
			<returns>true if both rectangles have the same <see cref="P:System.Windows.Int32Rect.X"></see>, <see cref="P:System.Windows.Int32Rect.Y"></see>, <see cref="P:System.Windows.Int32Rect.Width"></see>, and <see cref="P:System.Windows.Int32Rect.Height"></see> as this rectangle; otherwise, false.</returns>
			<param name="value">The rectangle to compare to the current rectangle.</param>
		</member>
		<member name="M:System.Windows.Int32Rect.Equals(System.Object)">
			<summary>Determines whether the specified rectangle is equal to this rectangle.</summary>
			<returns>true if o is an <see cref="T:System.Windows.Int32Rect"></see> and the same <see cref="P:System.Windows.Int32Rect.X"></see>, <see cref="P:System.Windows.Int32Rect.Y"></see>, <see cref="P:System.Windows.Int32Rect.Width"></see>, and <see cref="P:System.Windows.Int32Rect.Height"></see> as this rectangle; otherwise, false.</returns>
			<param name="o">The object to compare to the current rectangle.</param>
		</member>
		<member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
			<summary>Determines whether the specified rectangles are equal.</summary>
			<returns>true if int32Rect1 and int32Rect2 have the same <see cref="P:System.Windows.Int32Rect.X"></see>, <see cref="P:System.Windows.Int32Rect.Y"></see>, <see cref="P:System.Windows.Int32Rect.Width"></see>, and <see cref="P:System.Windows.Int32Rect.Height"></see>; otherwise, false.</returns>
			<param name="int32Rect1">The first rectangle to compare.</param>
			<param name="int32Rect2">The second rectangle to compare.</param>
		</member>
		<member name="M:System.Windows.Int32Rect.GetHashCode">
			<summary>Creates a hash code from this rectangle's <see cref="P:System.Windows.Int32Rect.X"></see>, <see cref="P:System.Windows.Int32Rect.Y"></see>, <see cref="P:System.Windows.Int32Rect.Width"></see>, and <see cref="P:System.Windows.Int32Rect.Height"></see> values.</summary>
			<returns>This rectangle's hash code.</returns>
		</member>
		<member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
			<summary>Compares two rectangles for exact equality.</summary>
			<returns>true if int32Rect1 and int32Rect2 have the same <see cref="P:System.Windows.Int32Rect.X"></see>, <see cref="P:System.Windows.Int32Rect.Y"></see>, <see cref="P:System.Windows.Int32Rect.Width"></see>, and <see cref="P:System.Windows.Int32Rect.Height"></see>; otherwise, false.</returns>
			<param name="int32Rect1">The first rectangle to compare.</param>
			<param name="int32Rect2">The second rectangle to compare.</param>
		</member>
		<member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
			<summary>Compares two rectangles for inequality.</summary>
			<returns>false if int32Rect1 and int32Rect2 have the same <see cref="P:System.Windows.Int32Rect.X"></see>, <see cref="P:System.Windows.Int32Rect.Y"></see>, <see cref="P:System.Windows.Int32Rect.Width"></see>, and <see cref="P:System.Windows.Int32Rect.Height"></see>; otherwise, if all of these values are the same, then true.</returns>
			<param name="int32Rect1">The first rectangle to compare.</param>
			<param name="int32Rect2">The second rectangle to compare.</param>
		</member>
		<member name="M:System.Windows.Int32Rect.Parse(System.String)">
			<summary>Creates an <see cref="T:System.Windows.Int32Rect"></see> structure from the specified String representation.</summary>
			<returns>The equivalent <see cref="T:System.Windows.Int32Rect"></see> structure.</returns>
			<param name="source">A string representation of an <see cref="T:System.Windows.Int32Rect"></see>.</param>
		</member>
		<member name="M:System.Windows.Int32Rect.ToString">
			<summary>Creates a string representation of this <see cref="T:System.Windows.Int32Rect"></see>.</summary>
			<returns>A string containing the same <see cref="P:System.Windows.Int32Rect.X"></see>, <see cref="P:System.Windows.Int32Rect.Y"></see>, <see cref="P:System.Windows.Int32Rect.Width"></see>, and <see cref="P:System.Windows.Int32Rect.Height"></see> values of this <see cref="T:System.Windows.Int32Rect"></see> structure.</returns>
		</member>
		<member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
			<summary>Creates a string representation of this <see cref="T:System.Windows.Int32Rect"></see> based on the supplied <see cref="T:System.IFormatProvider"></see>.</summary>
			<returns>A string representation of this instance of <see cref="T:System.Windows.Int32Rect"></see>.</returns>
			<param name="provider">The format provider to use. If provider is null, the current culture is used.</param>
		</member>
		<member name="P:System.Windows.Int32Rect.Empty">
			<summary>Gets the empty rectangle, a special value that represents a rectangle with no position or area. </summary>
			<returns>An empty rectangle with no position or area.</returns>
		</member>
		<member name="P:System.Windows.Int32Rect.Height">
			<summary>Gets or sets the height of the rectangle.</summary>
			<returns>The height of the rectangle. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Int32Rect.IsEmpty">
			<summary>Gets a value indicating whether the rectangle is empty.</summary>
			<returns>true if the rectangle is empty; otherwise, false. The default value is true.</returns>
		</member>
		<member name="P:System.Windows.Int32Rect.Width">
			<summary>Gets or sets the width of the rectangle.</summary>
			<returns>The width of the rectangle. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Int32Rect.X">
			<summary>Gets or sets the x-coordinate of the top-left corner of the rectangle.</summary>
			<returns>The x-coordinate of the top-left corner of the rectangle. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Int32Rect.Y">
			<summary>Gets or sets the y-coordinate of the top-left corner of the rectangle.</summary>
			<returns>The y-coordinate of the top-left corner of the rectangle. The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.Int32RectConverter">
			<summary>Converts instances of other types to and from an <see cref="T:System.Windows.Int32Rect"></see>.</summary>
		</member>
		<member name="M:System.Windows.Int32RectConverter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Int32RectConverter"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an object can be converted from a given type to an instance of an <see cref="T:System.Windows.Int32Rect"></see>.  </summary>
			<returns>true if the type can be converted to an <see cref="T:System.Windows.Int32Rect"></see>; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="sourceType">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an instance of an <see cref="T:System.Windows.Int32Rect"></see> can be converted to a different type.</summary>
			<returns>true if this <see cref="T:System.Windows.Int32Rect"></see> can be converted to destinationType; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type this <see cref="T:System.Windows.Int32Rect"></see> is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert the specified type to an <see cref="T:System.Windows.Int32Rect"></see>.</summary>
			<returns>The <see cref="T:System.Windows.Int32Rect"></see> created from converting value.</returns>
			<param name="culture">Cultural information to respect during conversion.</param>
			<param name="context">Provides contextual information required for conversion.</param>
			<param name="value">The object being converted.</param>
			<exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to an <see cref="T:System.Windows.Int32Rect"></see>.</exception>
		</member>
		<member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert an <see cref="T:System.Windows.Int32Rect"></see> to a specified type.</summary>
			<returns>The object created from converting this <see cref="T:System.Windows.Int32Rect"></see>.</returns>
			<param name="culture">Cultural information to respect during conversion.</param>
			<param name="context">Provides contextual information required for conversion.</param>
			<param name="destinationType">The type to convert this <see cref="T:System.Windows.Int32Rect"></see> to.</param>
			<param name="value">The <see cref="T:System.Windows.Int32Rect"></see> to convert.</param>
			<exception cref="T:System.NotSupportedException">Thrown if value is null or is not an <see cref="T:System.Windows.Int32Rect"></see>, or if the destinationType is not one of the valid types for conversion.</exception>
		</member>
		<member name="T:System.Windows.IWeakEventListener">
			<summary>Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager"></see>.</summary>
		</member>
		<member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
			<summary>Receives events from the centralized event manager.</summary>
			<returns>true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager"></see> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.</returns>
			<param name="e">Event data.</param>
			<param name="sender">Object that originated the event.</param>
			<param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager"></see> calling this method.</param>
		</member>
		<member name="T:System.Windows.LocalValueEntry">
			<summary>Represents a property identifier and the property value for a locally set dependency property.</summary>
		</member>
		<member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
			<summary>Determines whether two <see cref="T:System.Windows.LocalValueEntry"></see> instances are equal.</summary>
			<returns>This <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)"></see> implementation compares the values of the <see cref="P:System.Windows.LocalValueEntry.Property"></see>, and potentially compares the values of <see cref="P:System.Windows.LocalValueEntry.Value"></see>. The <see cref="P:System.Windows.LocalValueEntry.Property"></see> component of a <see cref="T:System.Windows.LocalValueEntry"></see> is a value type, so will always be a bitwise comparison. For the <see cref="P:System.Windows.LocalValueEntry.Value"></see> component, this implementation employs a bitwise comparison if it is a value type. For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it just uses the == operator on the two values internally. By default, this would be a reference equality of the values and thus the equality of the entire <see cref="T:System.Windows.LocalValueEntry"></see> would become a reference equality. </returns>
			<param name="obj">The <see cref="T:System.Windows.LocalValueEntry"></see> to compare with the current <see cref="T:System.Windows.LocalValueEntry"></see>.</param>
		</member>
		<member name="M:System.Windows.LocalValueEntry.GetHashCode">
			<summary>Returns the hash code for this <see cref="T:System.Windows.LocalValueEntry"></see>.</summary>
			<returns>A signed 32-bit integer value.</returns>
		</member>
		<member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
			<summary>Compares the specified <see cref="T:System.Windows.LocalValueEntry"></see> instances to determine whether they are the same.</summary>
			<returns>true if the obj1 <see cref="T:System.Windows.LocalValueEntry"></see> is equal to the obj2 <see cref="T:System.Windows.LocalValueEntry"></see>; otherwise, false.</returns>
			<param name="obj1">The first instance to compare.</param>
			<param name="obj2">The second instance to compare.</param>
		</member>
		<member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
			<summary>Compares the specified <see cref="T:System.Windows.LocalValueEnumerator"></see> instances to determine whether they are different.</summary>
			<returns>This implementation compares the values of the <see cref="P:System.Windows.LocalValueEntry.Property"></see> and <see cref="P:System.Windows.LocalValueEntry.Value"></see> components of a <see cref="T:System.Windows.LocalValueEntry"></see>. The <see cref="P:System.Windows.LocalValueEntry.Property"></see> component of a <see cref="T:System.Windows.LocalValueEntry"></see> is always a value type, so this comparison will always be a bitwise comparison. For the <see cref="P:System.Windows.LocalValueEntry.Value"></see> component, this implementation employs a bitwise comparison if it is a value type. For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it uses the == operator on the two values internally. By default, this is a reference equality of the values. </returns>
			<param name="obj1">The first instance to compare.</param>
			<param name="obj2">The second instance to compare.</param>
		</member>
		<member name="P:System.Windows.LocalValueEntry.Property">
			<summary>Gets the identifier for the locally set dependency property that is represented by this entry. </summary>
			<returns>The identifier for the locally set dependency property.</returns>
		</member>
		<member name="P:System.Windows.LocalValueEntry.Value">
			<summary>Gets the value of the locally set dependency property. </summary>
			<returns>The value of the locally set dependency property as an object. </returns>
		</member>
		<member name="T:System.Windows.LocalValueEnumerator">
			<summary>Provides enumeration support for the local values of any dependency properties that exist on a <see cref="T:System.Windows.DependencyObject"></see>.</summary>
		</member>
		<member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
			<summary>Determines whether the provided <see cref="T:System.Windows.LocalValueEnumerator"></see> is equivalent to this <see cref="T:System.Windows.LocalValueEnumerator"></see>.</summary>
			<returns>true if the specified <see cref="T:System.Windows.LocalValueEnumerator"></see> is equal to the current <see cref="T:System.Windows.LocalValueEnumerator"></see>; otherwise, false.</returns>
			<param name="obj">The <see cref="T:System.Windows.LocalValueEnumerator"></see> to compare with the current <see cref="T:System.Windows.LocalValueEnumerator"></see>.</param>
		</member>
		<member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
			<summary>Returns a hash code for the current <see cref="T:System.Windows.LocalValueEnumerator"></see>.</summary>
			<returns>A 32-bit integer hash code.</returns>
		</member>
		<member name="M:System.Windows.LocalValueEnumerator.MoveNext">
			<summary>Advances the enumerator to the next element of the collection.</summary>
			<returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
		</member>
		<member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
			<summary>Compares whether two specified <see cref="T:System.Windows.LocalValueEnumerator"></see> objects are the same.</summary>
			<returns>true if the obj1<see cref="T:System.Windows.LocalValueEnumerator"></see> is equal to the obj2<see cref="T:System.Windows.LocalValueEnumerator"></see>; otherwise, false.</returns>
			<param name="obj1">The first object to compare.</param>
			<param name="obj2">The second object to compare.</param>
		</member>
		<member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
			<summary>Compares two specified <see cref="T:System.Windows.LocalValueEnumerator"></see> objects to determine whether they are not the same.</summary>
			<returns>true if the instances are not equal; otherwise, false.</returns>
			<param name="obj1">The first object to compare.</param>
			<param name="obj2">The second object to compare.</param>
		</member>
		<member name="P:System.Windows.LocalValueEnumerator.Count">
			<summary>Gets the number of items that are represented in the collection. </summary>
			<returns>The number of items in the collection.</returns>
		</member>
		<member name="P:System.Windows.LocalValueEnumerator.Current">
			<summary>Gets the current element in the collection.</summary>
			<returns>The current <see cref="T:System.Windows.LocalValueEntry"></see> in the collection.</returns>
		</member>
		<member name="P:System.Windows.LocalValueEnumerator.System.Collections.IEnumerator.Current">
			<summary>Gets the element at the current position of the enumerator.</summary>
			<returns>The element in the <see cref="T:System.Windows.LocalValueEnumerator"></see> at the current position of the enumerator. </returns>
		</member>
		<member name="T:System.Windows.Point">
			<summary>Represents an x- and y-coordinate pair in two-dimensional space.  </summary>
		</member>
		<member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
			<summary>Creates a new Point structure that contains the specified coordinates. </summary>
			<param name="y">The y-coordinate of the new Point structure. </param>
			<param name="x">The x-coordinate of the new Point structure. </param>
		</member>
		<member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
			<summary>Adds a Vector to a Point and returns the result as a Point structure.  </summary>
			<returns>Returns the sum of point and vector.</returns>
			<param name="point">The Point structure to add.</param>
			<param name="vector">The Vector structure to add. </param>
		</member>
		<member name="M:System.Windows.Point.Equals(System.Object)">
			<summary>Determines whether the specified Object is a <see cref="T:System.Windows.Point"></see> and whether it contains the same coordinates as this <see cref="T:System.Windows.Point"></see>. Note: <see cref="T:System.Windows.Point"></see> coordinates are described using Double values. Because the value of a Double can lose precision when operated upon, a comparison between two Doubles that are logically equal might fail. </summary>
			<returns>true if o is a <see cref="T:System.Windows.Point"></see> and contains the same <see cref="P:System.Windows.Point.X"></see> and <see cref="P:System.Windows.Point.Y"></see> values as this <see cref="T:System.Windows.Point"></see>; otherwise, false.</returns>
			<param name="o">The Object to compare.</param>
		</member>
		<member name="M:System.Windows.Point.Equals(System.Windows.Point)">
			<summary>Compares two <see cref="T:System.Windows.Point"></see> structures for equality.  Note: <see cref="T:System.Windows.Point"></see> coordinates are expressed using Double values. Because the value of a Double can lose precision when operated on, a comparison between two Doubles that are logically equal might fail. </summary>
			<returns>true if both <see cref="T:System.Windows.Point"></see> structures contain the same <see cref="P:System.Windows.Point.X"></see> and <see cref="P:System.Windows.Point.Y"></see> values; otherwise, false.</returns>
			<param name="value">The point to compare to this instance.</param>
		</member>
		<member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
			<summary>Compares two Point structures for equality.  Note: Point coordinates are described using Double values. Because the value of a Double can lose precision when operated upon, a comparison between two Double values that are logically equal might fail. </summary>
			<returns>true if point1 and point2 contain the same <see cref="P:System.Windows.Point.X"></see> and <see cref="P:System.Windows.Point.Y"></see> values; otherwise, false.</returns>
			<param name="point2">The second point to compare.</param>
			<param name="point1">The first point to compare.</param>
		</member>
		<member name="M:System.Windows.Point.GetHashCode">
			<summary>Returns the hash code for this <see cref="T:System.Windows.Point"></see>.</summary>
			<returns>The hash code for this <see cref="T:System.Windows.Point"></see> structure.</returns>
		</member>
		<member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
			<summary>Transforms the specified Point structure by the specified Matrix structure.  </summary>
			<returns>The transformed point. </returns>
			<param name="matrix">The transformation matrix.</param>
			<param name="point">The point to transform.</param>
		</member>
		<member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
			<summary>Offsets a point's <see cref="P:System.Windows.Point.X"></see> and <see cref="P:System.Windows.Point.Y"></see> coordinates by the specified amounts.</summary>
			<returns>The result of offsetting this point by the specified x and y offsets.</returns>
			<param name="offsetY">The amount to offset thepoint's <see cref="P:System.Windows.Point.Y"></see> coordinate.</param>
			<param name="offsetX">The amount to offset the point's<see cref="P:System.Windows.Point.X"></see> coordinate. </param>
		</member>
		<member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
			<summary>Translates the specified <see cref="T:System.Windows.Point"></see> by the specified <see cref="T:System.Windows.Vector"></see> and returns the result.</summary>
			<returns>The result of translating the specified point by the specified vector.</returns>
			<param name="point">The point to translate.</param>
			<param name="vector">The amount by which to translate point.</param>
		</member>
		<member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
			<summary>Compares two Point structures for equality.       Note: A point's coordinates are described using Doubles values. Because the value of Doubles can lose precision when arithmetic operations are performed on them, a comparison between two Doubles that are logically equal might fail.  </summary>
			<returns>true if both the <see cref="P:System.Windows.Point.X"></see> and <see cref="P:System.Windows.Point.Y"></see> coordinates of point1 and point2 are equal; otherwise, false.</returns>
			<param name="point2">The second Point structure to compare.</param>
			<param name="point1">The first Point structure to compare.</param>
		</member>
		<member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
			<summary>Creates a <see cref="T:System.Windows.Size"></see> structure with a <see cref="P:System.Windows.Size.Width"></see> equal to this point's <see cref="P:System.Windows.Point.X"></see> value and a <see cref="P:System.Windows.Size.Height"></see> equal to this point's <see cref="P:System.Windows.Point.Y"></see> value.</summary>
			<returns>A <see cref="T:System.Windows.Size"></see> structure with a <see cref="P:System.Windows.Size.Width"></see> equal to this point's <see cref="P:System.Windows.Point.X"></see> value and a <see cref="P:System.Windows.Size.Height"></see> equal to this point's <see cref="P:System.Windows.Point.Y"></see> value.</returns>
			<param name="point">The point to convert.</param>
		</member>
		<member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
			<summary>Creates a <see cref="T:System.Windows.Vector"></see> structure with an <see cref="P:System.Windows.Vector.X"></see> value equal to the point's <see cref="P:System.Windows.Point.X"></see> value and a <see cref="P:System.Windows.Vector.Y"></see> value equal to the point's <see cref="P:System.Windows.Point.Y"></see> value.</summary>
			<returns>A vector with an <see cref="P:System.Windows.Vector.X"></see> value equal to the point's <see cref="P:System.Windows.Point.X"></see> value and a <see cref="P:System.Windows.Vector.Y"></see> value equal to the point's <see cref="P:System.Windows.Point.Y"></see> value.</returns>
			<param name="point">The point to convert.</param>
		</member>
		<member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
			<summary>Compares two <see cref="T:System.Windows.Point"></see> structures for inequality. Note: A point's <see cref="P:System.Windows.Point.X"></see> and <see cref="P:System.Windows.Point.Y"></see> coordinates are described using Double values. Because Double values can lose precision when operated on, a comparison between two values that are logically equal might fail.</summary>
			<returns>true if point1 and point2 have different <see cref="P:System.Windows.Point.X"></see> or <see cref="P:System.Windows.Point.Y"></see> coordinates; false if point1 and point2 have the same <see cref="P:System.Windows.Point.X"></see> and <see cref="P:System.Windows.Point.Y"></see> coordinates.</returns>
			<param name="point2">The second point to compare.</param>
			<param name="point1">The first point to compare.</param>
		</member>
		<member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
			<summary>Transforms the specified <see cref="T:System.Windows.Point"></see> by the specified <see cref="T:System.Windows.Media.Matrix"></see>.</summary>
			<returns>The result of transforming the specified point using the specified matrix.</returns>
			<param name="matrix">The transformation matrix. </param>
			<param name="point">The point to transform. </param>
		</member>
		<member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
			<summary>Subtracts the specified <see cref="T:System.Windows.Point"></see> from another specified <see cref="T:System.Windows.Point"></see> and returns the difference as a <see cref="T:System.Windows.Vector"></see>.</summary>
			<returns>The difference between point1 and point2.</returns>
			<param name="point2">The point to subtract from point1.</param>
			<param name="point1">The point from which point2 is subtracted.</param>
		</member>
		<member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
			<summary>Subtracts the specified <see cref="T:System.Windows.Vector"></see> from the specified <see cref="T:System.Windows.Point"></see> and returns the resulting <see cref="T:System.Windows.Point"></see>.</summary>
			<returns>The difference between point and vector.</returns>
			<param name="point">The point from which vector is subtracted. </param>
			<param name="vector">The vector to subtract from point1</param>
		</member>
		<member name="M:System.Windows.Point.Parse(System.String)">
			<summary>Constructs a <see cref="T:System.Windows.Point"></see> from the specified String.</summary>
			<returns>The equivalent <see cref="T:System.Windows.Point"></see> structure. </returns>
			<param name="source">A string representation of a point.</param>
			<exception cref="T:System.FormatException">source is not composed of two comma- or space-delimited double values.</exception>
			<exception cref="T:System.InvalidOperationException">source does not contain two numbers.-or-source contains too many delimiters.</exception>
		</member>
		<member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
			<summary>Subtracts the specified <see cref="T:System.Windows.Point"></see> from another specified <see cref="T:System.Windows.Point"></see> and returns the difference as a <see cref="T:System.Windows.Vector"></see>.</summary>
			<returns>The difference between point1 and point2.</returns>
			<param name="point2">The point to subtract from point1.</param>
			<param name="point1">The point from which point2 is subtracted. </param>
		</member>
		<member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
			<summary>Subtracts the specified <see cref="T:System.Windows.Vector"></see> from the specified <see cref="T:System.Windows.Point"></see> and returns the resulting <see cref="T:System.Windows.Point"></see>. </summary>
			<returns>The difference between point and vector.</returns>
			<param name="point">The point from which vector is subtracted.</param>
			<param name="vector">The vector to subtract from point.</param>
		</member>
		<member name="M:System.Windows.Point.ToString">
			<summary>Creates a String representation of this Point. </summary>
			<returns>A String containing the X and Y values of this Point structure.</returns>
		</member>
		<member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
			<summary>Creates a String representation of this Point. </summary>
			<returns>A String containing the X and Y values of this Point structure.</returns>
			<param name="provider">Culture-specific formatting information.</param>
		</member>
		<member name="P:System.Windows.Point.X">
			<summary>Gets or sets the X-coordinate value of this Point structure. </summary>
			<returns>The X-coordinate value of this Point structure.  The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Point.Y">
			<summary>Gets or sets the Y-coordinate value of this Point. </summary>
			<returns>The Y-coordinate value of this Point structure.  The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.PointConverter">
			<summary>Converts instances of other types to and from a <see cref="T:System.Windows.Point"></see>. </summary>
		</member>
		<member name="M:System.Windows.PointConverter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.PointConverter"></see> class. </summary>
		</member>
		<member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Point"></see>.  </summary>
			<returns>true if the type can be converted to a <see cref="T:System.Windows.Point"></see>; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="sourceType">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether an instance of a <see cref="T:System.Windows.Point"></see> can be converted to a different type. </summary>
			<returns>true if this <see cref="T:System.Windows.Point"></see> can be converted to destinationType; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type this <see cref="T:System.Windows.Point"></see> is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Point"></see>. </summary>
			<returns>The <see cref="T:System.Windows.Point"></see> created from converting value.</returns>
			<param name="culture">Cultural information to respect during conversion.</param>
			<param name="context">Provides contextual information required for conversion.</param>
			<param name="value">The object being converted.</param>
			<exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Point"></see>.</exception>
		</member>
		<member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Attempts to convert a <see cref="T:System.Windows.Point"></see> to a specified type. </summary>
			<returns>The object created from converting this <see cref="T:System.Windows.Point"></see>.</returns>
			<param name="culture">Cultural information to respect during conversion.</param>
			<param name="context">Provides contextual information required for conversion.</param>
			<param name="destinationType">The type to convert this <see cref="T:System.Windows.Point"></see> to.</param>
			<param name="value">The <see cref="T:System.Windows.Point"></see> to convert.</param>
			<exception cref="T:System.NotSupportedException">Thrown if value is null or is not a <see cref="T:System.Windows.Point"></see>, or if the destinationType is not one of the valid types for conversion.</exception>
		</member>
		<member name="T:System.Windows.PropertyChangedCallback">
			<summary>Represents the callback that is invoked when the effective property value of a dependency property changes.</summary>
		</member>
		<member name="T:System.Windows.PropertyMetadata">
			<summary>Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with. </summary>
		</member>
		<member name="M:System.Windows.PropertyMetadata.#ctor">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata"></see> class. </summary>
		</member>
		<member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata"></see> class with a specified default value for the dependency property that this metadata will be applied to. </summary>
			<param name="defaultValue">The default value to specify for a dependency property, usually provided as a value of some specific type.</param>
			<exception cref="T:System.ArgumentException">defaultValue cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue"></see>; see Remarks.</exception>
		</member>
		<member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata"></see> class with the specified <see cref="T:System.Windows.PropertyChangedCallback"></see> implementation reference. </summary>
			<param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
		</member>
		<member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata"></see> class with the specified default value and <see cref="T:System.Windows.PropertyChangedCallback"></see> implementation reference. </summary>
			<param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
			<param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
			<exception cref="T:System.ArgumentException">defaultValue cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue"></see>; see Remarks.</exception>
		</member>
		<member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata"></see> class with the specified default value and callbacks. </summary>
			<param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
			<param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"></see> against this property.</param>
			<param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
			<exception cref="T:System.ArgumentException">defaultValue cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue"></see>; see Remarks.</exception>
		</member>
		<member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
			<summary>Merges this metadata with the base metadata. </summary>
			<param name="dp">The dependency property to which this metadata is being applied.</param>
			<param name="baseMetadata">The base metadata to merge with this instance's values.</param>
		</member>
		<member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
			<summary>Called when this metadata has been applied to a property, which indicates that the metadata is being sealed. </summary>
			<param name="targetType">The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value is a null reference.</param>
			<param name="dp">The dependency property to which the metadata has been applied.</param>
		</member>
		<member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
			<summary>Gets or sets a reference to a <see cref="T:System.Windows.CoerceValueCallback"></see> implementation specified in this metadata.</summary>
			<returns>A <see cref="T:System.Windows.CoerceValueCallback"></see> implementation reference.</returns>
			<exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
		</member>
		<member name="P:System.Windows.PropertyMetadata.DefaultValue">
			<summary> Gets and sets the default value of the dependency property. </summary>
			<returns>The default value of the property. The default value on a <see cref="T:System.Windows.PropertyMetadata"></see> instance created with the parameterless constructor will be <see cref="F:System.Windows.DependencyProperty.UnsetValue"></see>; see Remarks.</returns>
			<exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
			<exception cref="T:System.ArgumentException">Cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> once created; see Remarks.</exception>
		</member>
		<member name="P:System.Windows.PropertyMetadata.IsSealed">
			<summary>Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance. </summary>
			<returns>true if the metadata instance is immutable; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
			<summary>Gets or sets a reference to a <see cref="T:System.Windows.PropertyChangedCallback"></see> implementation specified in this metadata.</summary>
			<returns>A <see cref="T:System.Windows.PropertyChangedCallback"></see> implementation reference.</returns>
			<exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
		</member>
		<member name="T:System.Windows.Rect">
			<summary>Describes the width, height, and location of a rectangle. </summary>
		</member>
		<member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
			<summary> Initializes a new instance of the Rect structure that is of the specified size and is located at (0,0).  </summary>
			<param name="size">The width and height of the rectangle.</param>
		</member>
		<member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
			<summary> Intializes a new instance of the Rect structure that is exactly large enough to contain the two specified points. </summary>
			<param name="point2">The second point that the new rectangle must contain.</param>
			<param name="point1">The first point that the new rectangle must contain.</param>
		</member>
		<member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
			<summary> Initializes a new instance of the Rect structure that has the specified top-left corner location and the specified width and height. </summary>
			<param name="size">The width and height of the rectangle.</param>
			<param name="location">The location of the rectangle's top-left corner.</param>
		</member>
		<member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
			<summary> Intializes a new instance of the Rect structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector. </summary>
			<param name="point">The first point the rectangle must contain.</param>
			<param name="vector">The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.</param>
		</member>
		<member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
			<summary> Intializes a new instance of the Rect structure with the specified x- and y-coordinates and the specified width and height. </summary>
			<param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
			<param name="width">The width of the rectangle.</param>
			<param name="height">The height of the rectangle.</param>
			<param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
		</member>
		<member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
			<summary> Determines whether this rectangle contains the specified point.</summary>
			<returns>true if this rectangle contains the specified point; otherwise, false.</returns>
			<param name="point">The point to check.</param>
		</member>
		<member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
			<summary> Determines whether this rectangle contains the specified rectangle. </summary>
			<returns>true if rect is entirely contained by this rectangle; otherwise, false.</returns>
			<param name="rect">The rectangle to check.</param>
		</member>
		<member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
			<summary>Determines whether this rectangle contains the specified x- and y-coordinate pair. </summary>
			<returns>true if (x, y) is contained within this rectangle; otherwise, false.</returns>
			<param name="y">The y-coordinate of the point to check.</param>
			<param name="x">The x-coordinate of the point to check.</param>
		</member>
		<member name="M:System.Windows.Rect.Equals(System.Object)">
			<summary> Compares the specified rectangle to this rectangle. </summary>
			<returns>true if o is a <see cref="T:System.Windows.Rect"></see> and has the same position, <see cref="P:System.Windows.Rect.Width"></see>, and <see cref="P:System.Windows.Rect.Height"></see> as this rectangle; otherwise, false.</returns>
			<param name="o">The rectangle to compare to the current rectangle.</param>
		</member>
		<member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
			<summary> Determines whether the specified rectangle is equal to this rectangle. </summary>
			<returns>true if both rectangles have the same position, <see cref="P:System.Windows.Rect.Width"></see>, and <see cref="P:System.Windows.Rect.Height"></see> as this rectangle; otherwise, false.</returns>
			<param name="value">The rectangle to compare.</param>
		</member>
		<member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
			<summary> Determines whether the specified rectangles are equal. </summary>
			<returns>true if both rectangles have the same position, <see cref="P:System.Windows.Rect.Width"></see>, and <see cref="P:System.Windows.Rect.Height"></see>; otherwise, false.</returns>
			<param name="rect2">The second rectangle to compare.</param>
			<param name="rect1">The first rectangle to compare.</param>
		</member>
		<member name="M:System.Windows.Rect.GetHashCode">
			<summary> Creates a hash code from this rectangle's X, Y, Width, and Height values. </summary>
			<returns>This rectangle's hash code.</returns>
		</member>
		<member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
			<summary> Expands the rectangle by the specified Size, in all directions. </summary>
			<param name="size">Specifies the amount to expand the rectangle. The Size structure's  Width specifies the amount to increase the rectangle's Left and Right properties. The Size structure's Height specifies the amount to increase the rectangle's Top and Bottom properties. </param>
		</member>
		<member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
			<summary> Expands or shrinks the rectangle by the specified width and height amounts. </summary>
			<param name="width">The amount by which to expand or shrink the Left and Right sides of the rectangle.</param>
			<param name="height">The amount by which to expand or shrink the Top and Bottom sides of the rectangle.</param>
		</member>
		<member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
			<summary> Expands the specified Rect structure using the specified Size. </summary>
			<returns>The resulting rectangle.</returns>
			<param name="rect">The Rect structure to modify.</param>
			<param name="size">Specifies the amount to expand the rectangle. The Size structure's  Width specifies the amount to increase the rectangle's Left and Right properties. The Size structure's Height specifies the amount to increase the rectangle's Top and Bottom properties.</param>
		</member>
		<member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
			<summary>Expands or shrinks the sides of the specified rectangle by the specified width and height amounts. </summary>
			<returns>The resulting rectangle. If the specified width or height modifiers shrink the rectangle by more than its current <see cref="P:System.Windows.Rect.Width"></see> or <see cref="P:System.Windows.Rect.Height"></see>—giving the rectangle a negative area—this method returns the <see cref="P:System.Windows.Rect.Empty"></see> rectangle.</returns>
			<param name="rect">The Rect structure to modify.</param>
			<param name="width">The amount by which to expand or shrink the Left and Right sides of the rectangle.</param>
			<param name="height">The amount by which to expand or shrink the Top and Bottom sides of the rectangle.</param>
		</member>
		<member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
			<summary> Finds the intersection between the current rectangle and the specified rectangle, and stores the result as the current rectangle. If no intersection exists, the current rectangle becomes the <see cref="P:System.Windows.Rect.Empty"></see> rectangle.</summary>
			<param name="rect">The rectangle to intersect with this rectangle.</param>
		</member>
		<member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
			<summary> Finds the intersection between the specified rectangles and returns the result as a Rect. </summary>
			<returns>The intersection of the two rectangles, if one exists; otherwise, the <see cref="P:System.Windows.Rect.Empty"></see> rectangle.</returns>
			<param name="rect2">The second rectangle to compare.</param>
			<param name="rect1">The first rectangle to compare.</param>
		</member>
		<member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
			<summary>Indicates whether the specified rectangle intersects with this rectangle. </summary>
			<returns>true if the specified rectangle intersects with this current rectangle; otherwise, false.</returns>
			<param name="rect">The rectangle to check.</param>
		</member>
		<member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
			<summary> Translates this rectangle by the specified amount. </summary>
			<param name="offsetVector">The horizontal and vertical amounts to move the rectangle.</param>
			<exception cref="T:System.InvalidOperationException">This method was called on the <see cref="P:System.Windows.Rect.Empty"></see> rectangle.</exception>
		</member>
		<member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
			<summary> Translates this rectangle by the specified horizontal and vertical amounts. </summary>
			<param name="offsetY">The amount to move the rectangle vertically.</param>
			<param name="offsetX">The amount to move the rectangle horizontally.</param>
			<exception cref="T:System.InvalidOperationException">This method was called on the <see cref="P:System.Windows.Rect.Empty"></see> rectangle.</exception>
		</member>
		<member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
			<summary> Translates the specified rectangle by the specified amount and returns the resulting Rect. </summary>
			<returns>The resulting rectangle.</returns>
			<param name="rect">The rectangle to move.</param>
			<param name="offsetVector">The horizontal and vertical amounts to move the rectangle.</param>
			<exception cref="T:System.InvalidOperationException">This method was called on the <see cref="P:System.Windows.Rect.Empty"></see> rectangle.</exception>
		</member>
		<member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
			<summary> Translates the specified rectangle by the specified horizontal and vertical amounts and returns the resulting Rect. </summary>
			<returns>The resulting rectangle.</returns>
			<param name="rect">The rectangle to move.</param>
			<param name="offsetY">The amount to move the rectangle vertically.</param>
			<param name="offsetX">The amount to move the rectangle horizontally.</param>
			<exception cref="T:System.InvalidOperationException">This method was called on the <see cref="P:System.Windows.Rect.Empty"></see> rectangle.</exception>
		</member>
		<member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
			<summary>Compares two rectangles for exact equality.</summary>
			<returns>true if the two rectangles have the same <see cref="P:System.Windows.Rect.Location"></see> and <see cref="P:System.Windows.Rect.Size"></see>; otherwise, false. </returns>
			<param name="rect2">The second rectangle to compare.</param>
			<param name="rect1">The first rectangle to compare.</param>
		</member>
		<member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
			<summary>Compares two rectangles for inequality.  </summary>
			<returns>true if the two rectangles do not have the same <see cref="P:System.Windows.Rect.Location"></see> and <see cref="P:System.Windows.Rect.Size"></see>; otherwise, false.</returns>
			<param name="rect2">The second rectangle to compare.</param>
			<param name="rect1">The first rectangle to compare.</param>
		</member>
		<member name="M:System.Windows.Rect.Parse(System.String)">
			<summary>Converts a String representation of a rectangle into the equivalent <see cref="T:System.Windows.Rect"></see> structure. </summary>
			<param name="source">The String representation of the rectangle.</param>
		</member>
		<member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
			<summary>Multiplies the size of the current rectangle by the specified x and y value.</summary>
			<param name="scaleX">The scale factor in the x-direction.</param>
			<param name="scaleY">The scale factor in the y-direction.</param>
		</member>
		<member name="M:System.Windows.Rect.System.IFormattable.ToString(System.String,System.IFormatProvider)">
			<summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
			<returns>A string representation of this object.</returns>
		</member>
		<member name="M:System.Windows.Rect.ToString">
			<summary> Creates a String representation of the current rectangle. </summary>
			<returns>A String representation of the current rectangle. The string has the following form: X,Y,Width,Height.</returns>
		</member>
		<member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
			<summary>Creates String representation of this rectangle. </summary>
			<param name="provider">Culture-specific formatting information.</param>
		</member>
		<member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
			<summary> Transforms this rectangle using the specified matrix. </summary>
			<param name="matrix">The transformation to apply.</param>
		</member>
		<member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
			<summary>Transforms the specified rectangle using the specified matrix and returns the results. </summary>
			<returns>The transformed rectangle.</returns>
			<param name="rect">The rectangle to transform.</param>
			<param name="matrix">The transformation to apply.</param>
		</member>
		<member name="M:System.Windows.Rect.Union(System.Windows.Point)">
			<summary> Expands the current rectangle exactly enough to contain the specified point. </summary>
			<param name="point">The point to include.</param>
		</member>
		<member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
			<summary> Expands the current rectangle exactly enough to contain the specified rectangle. </summary>
			<param name="rect">The rectangle to include.</param>
		</member>
		<member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
			<summary> Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point. </summary>
			<returns>A rectangle that is exactly large enough to contain the specified rectangle and the specified point.</returns>
			<param name="rect">The rectangle to modify.</param>
			<param name="point">The point to include.</param>
		</member>
		<member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
			<summary> Creates a rectangle that is exactly large enough to contain the two specified rectangles. </summary>
			<returns>The resulting rectangle.</returns>
			<param name="rect2">The second rectangle to include.</param>
			<param name="rect1">The first rectangle to include.</param>
		</member>
		<member name="P:System.Windows.Rect.Bottom">
			<summary> Gets the y-axis value of the bottom of the rectangle (Y + Height). </summary>
			<returns>The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is NegativeInfinity.</returns>
		</member>
		<member name="P:System.Windows.Rect.BottomLeft">
			<summary> Gets the coordinates of the bottom left corner of the rectangle </summary>
			<returns>The coordinates of the bottom left corner of the rectangle, which is equal to (X, Y + Height).</returns>
		</member>
		<member name="P:System.Windows.Rect.BottomRight">
			<summary> Gets the coordinates of the bottom right corner of the rectangle. </summary>
			<returns>The coordinates of the bottom right corner of the rectangle, which is equal to (X + Width, Y + Height).</returns>
		</member>
		<member name="P:System.Windows.Rect.Empty">
			<summary>Gets the <see cref="P:System.Windows.Rect.Empty"></see> rectangle, a special value that represents a rectangle with no position or area. </summary>
			<returns>The <see cref="P:System.Windows.Rect.Empty"></see> rectangle, which has X and Y values of PositiveInfinity, and has Width and Height values of NegativeInfinity.</returns>
		</member>
		<member name="P:System.Windows.Rect.Height">
			<summary> Gets or sets the height of this rectangle. </summary>
			<returns>A positive number that represents the height of the rectangle. The default value is 0.          </returns>
		</member>
		<member name="P:System.Windows.Rect.IsEmpty">
			<summary> Gets a value that indicates whether this rectangle is the Empty rectangle.</summary>
			<returns>true if this rectangle is the Empty rectangle; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Rect.Left">
			<summary> Gets the x-axis position of the left side of the rectangle. Getting this property is equivalent to getting the rectangle's X property. </summary>
			<returns>The x-axis position of the left side of the rectangle.</returns>
		</member>
		<member name="P:System.Windows.Rect.Location">
			<summary> Gets or sets the position of the rectangle's top-left corner.</summary>
			<returns>The position of the rectangle's top-left corner, which is equal to (X, Y). The default value is (0, 0). </returns>
		</member>
		<member name="P:System.Windows.Rect.Right">
			<summary> Gets the x-axis value of the right side of the rectangle.  </summary>
			<returns>The x-axis value of the right side of the rectangle, which is equal to X + Width.</returns>
		</member>
		<member name="P:System.Windows.Rect.Size">
			<summary> Gets or sets the Width and Height of the rectangle. </summary>
			<returns>A Size structure that specifies the Width and Height of the rectangle.</returns>
		</member>
		<member name="P:System.Windows.Rect.Top">
			<summary> Gets the y-axis position of the top of the rectangle, which is equal to Y. </summary>
			<returns>The y-axis position of the top of the rectangle.</returns>
		</member>
		<member name="P:System.Windows.Rect.TopLeft">
			<summary> Gets the position of the top-left corner of the rectangle, which is equivalent to (X, Y). </summary>
			<returns>The position of the top-left corner of the rectangle.</returns>
		</member>
		<member name="P:System.Windows.Rect.TopRight">
			<summary> Gets the position of the top-right corner of the rectangle, which is equivalent to (X + Width, Y). </summary>
			<returns>The position of the top-right corner of the rectangle.</returns>
		</member>
		<member name="P:System.Windows.Rect.Width">
			<summary> Gets or sets the width of the rectangle.  </summary>
			<returns>A positive number that represents the width of the rectangle. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Rect.X">
			<summary> Gets or sets the location of the rectangle's left side. </summary>
			<returns>The location of the left side of the rectangle.</returns>
		</member>
		<member name="P:System.Windows.Rect.Y">
			<summary> Gets or sets the location of the rectangle's top side. </summary>
			<returns>The location of the top side of the rectangle.</returns>
		</member>
		<member name="T:System.Windows.RectConverter">
			<summary>Converts instances of other types to and from instances of <see cref="T:System.Windows.Rect"></see>.</summary>
		</member>
		<member name="M:System.Windows.RectConverter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.RectConverter"></see> class. </summary>
		</member>
		<member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an object can be converted from a given type to an instance of <see cref="T:System.Windows.Rect"></see>.</summary>
			<returns>true if the type can be converted to a <see cref="T:System.Windows.Rect"></see>; otherwise, false.</returns>
			<param name="context">Provides contextual information required for conversion.</param>
			<param name="sourceType">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether a <see cref="T:System.Windows.Rect"></see> can be converted to the specified type. </summary>
			<returns>true if a <see cref="T:System.Windows.Rect"></see> can be converted to destinationType; otherwise, false.</returns>
			<param name="context">Provides contextual information required for conversion.</param>
			<param name="destinationType">The desired type this <see cref="T:System.Windows.Rect"></see> is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Rect"></see>. </summary>
			<returns>The <see cref="T:System.Windows.Rect"></see> created from converting value.</returns>
			<param name="culture">Cultural information which is respected when converting.</param>
			<param name="context">Provides contextual information required for conversion.</param>
			<param name="value">The object being converted.</param>
			<exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Rect"></see>.</exception>
		</member>
		<member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Attempts to convert a <see cref="T:System.Windows.Rect"></see> to the specified type. </summary>
			<returns>The object created from converting this <see cref="T:System.Windows.Rect"></see>.</returns>
			<param name="culture">Cultural information which is respected during conversion.</param>
			<param name="context">Provides contextual information required for conversion.</param>
			<param name="destinationType">The type to convert this <see cref="T:System.Windows.Rect"></see> to.</param>
			<param name="value">The <see cref="T:System.Windows.Rect"></see> to convert.</param>
			<exception cref="T:System.NotSupportedException">value is null.- or - value is not a <see cref="T:System.Windows.Rect"></see>.- or - The destinationType is not one of the valid types for conversion.</exception>
		</member>
		<member name="T:System.Windows.Size">
			<summary>Implements a structure that is used to describe the <see cref="T:System.Windows.Size"></see> of an object. </summary>
		</member>
		<member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Size"></see> structure and assigns it an initial width and height.</summary>
			<param name="width">The initial width of the instance of <see cref="T:System.Windows.Size"></see>.</param>
			<param name="height">The initial height of the instance of <see cref="T:System.Windows.Size"></see>.</param>
		</member>
		<member name="M:System.Windows.Size.Equals(System.Object)">
			<summary>Compares an object to an instance of <see cref="T:System.Windows.Size"></see> for equality. </summary>
			<returns>true if the sizes are equal; otherwise, false.</returns>
			<param name="o">The <see cref="T:System.Object"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Size.Equals(System.Windows.Size)">
			<summary>Compares a value to an instance of <see cref="T:System.Windows.Size"></see> for equality. </summary>
			<returns>true if the instances of <see cref="T:System.Windows.Size"></see> are equal; otherwise, false.</returns>
			<param name="value">The size to compare to this current instance of <see cref="T:System.Windows.Size"></see>.</param>
		</member>
		<member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
			<summary>Compares two instances of <see cref="T:System.Windows.Size"></see> for equality. </summary>
			<returns>true if the instances of <see cref="T:System.Windows.Size"></see> are equal; otherwise, false.</returns>
			<param name="size2">The second instance of <see cref="T:System.Windows.Size"></see> to compare.</param>
			<param name="size1">The first instance of <see cref="T:System.Windows.Size"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Size.GetHashCode">
			<summary>Gets the hash code for this instance of <see cref="T:System.Windows.Size"></see>. </summary>
			<returns>The hash code for this instance of <see cref="T:System.Windows.Size"></see>.</returns>
		</member>
		<member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
			<summary>Compares two instances of <see cref="T:System.Windows.Size"></see> for equality. </summary>
			<returns>true if the two instances of <see cref="T:System.Windows.Size"></see> are equal; otherwise false.</returns>
			<param name="size2">The second instance of <see cref="T:System.Windows.Size"></see> to compare.</param>
			<param name="size1">The first instance of <see cref="T:System.Windows.Size"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
			<summary>Explicitly converts an instance of <see cref="T:System.Windows.Size"></see> to an instance of <see cref="T:System.Windows.Point"></see>. </summary>
			<returns>A <see cref="T:System.Windows.Point"></see> equal in value to this instance of <see cref="T:System.Windows.Size"></see>.</returns>
			<param name="size">The <see cref="T:System.Windows.Size"></see> value to be converted.</param>
		</member>
		<member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
			<summary>Explicitly converts an instance of <see cref="T:System.Windows.Size"></see> to an instance of <see cref="T:System.Windows.Vector"></see>. </summary>
			<returns>A <see cref="T:System.Windows.Vector"></see> equal in value to this instance of <see cref="T:System.Windows.Size"></see>.</returns>
			<param name="size">The <see cref="T:System.Windows.Size"></see> value to be converted.</param>
		</member>
		<member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
			<summary>Compares two instances of <see cref="T:System.Windows.Size"></see> for inequality. </summary>
			<returns>true if the instances of <see cref="T:System.Windows.Size"></see> are not equal; otherwise false.</returns>
			<param name="size2">The second instance of <see cref="T:System.Windows.Size"></see> to compare.</param>
			<param name="size1">The first instance of <see cref="T:System.Windows.Size"></see> to compare.</param>
		</member>
		<member name="M:System.Windows.Size.Parse(System.String)">
			<summary>Returns an instance of <see cref="T:System.Windows.Size"></see> from a converted <see cref="T:System.String"></see>. </summary>
			<returns>An instance of <see cref="T:System.Windows.Size"></see>.</returns>
			<param name="source">A <see cref="T:System.String"></see> value to parse to a <see cref="T:System.Windows.Size"></see> value.</param>
		</member>
		<member name="M:System.Windows.Size.ToString">
			<summary>Returns a <see cref="T:System.String"></see> that represents this <see cref="T:System.Windows.Size"></see> object. </summary>
			<returns>A <see cref="T:System.String"></see> that represents this instance of <see cref="T:System.Windows.Size"></see>.</returns>
		</member>
		<member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
			<summary>Returns a <see cref="T:System.String"></see> that represents this instance of <see cref="T:System.Windows.Size"></see>. </summary>
			<returns>A <see cref="T:System.String"></see> that represents this <see cref="T:System.Windows.Size"></see> object.</returns>
			<param name="provider">An object that provides a way to control formatting.</param>
		</member>
		<member name="P:System.Windows.Size.Empty">
			<summary>Gets a value that represents a static empty <see cref="T:System.Windows.Size"></see>. </summary>
			<returns>An empty instance of <see cref="T:System.Windows.Size"></see>.</returns>
		</member>
		<member name="P:System.Windows.Size.Height">
			<summary>Gets or sets the <see cref="P:System.Windows.Size.Height"></see> of this instance of <see cref="T:System.Windows.Size"></see>. </summary>
			<returns>The <see cref="P:System.Windows.Size.Height"></see> of this instance of <see cref="T:System.Windows.Size"></see>. The default is 0. The value cannot be negative.</returns>
		</member>
		<member name="P:System.Windows.Size.IsEmpty">
			<summary>Gets a value that indicates whether this instance of <see cref="T:System.Windows.Size"></see> is <see cref="P:System.Windows.Size.Empty"></see>. </summary>
			<returns>true if this instance of size is <see cref="P:System.Windows.Size.Empty"></see>; otherwise false.</returns>
		</member>
		<member name="P:System.Windows.Size.Width">
			<summary>Gets or sets the <see cref="P:System.Windows.Size.Width"></see> of this instance of <see cref="T:System.Windows.Size"></see>. </summary>
			<returns>The <see cref="P:System.Windows.Size.Width"></see> of this instance of <see cref="T:System.Windows.Size"></see>. The default value is 0. The value cannot be negative.</returns>
		</member>
		<member name="T:System.Windows.SizeConverter">
			<summary>Converts instances of other types to and from instances of the <see cref="T:System.Windows.Size"></see> class. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.SizeConverter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.SizeConverter"></see> class. </summary>
		</member>
		<member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether a class can be converted from a given type to an instance of <see cref="T:System.Windows.Size"></see>. </summary>
			<returns>true if the sourceType can be converted to an instance of <see cref="T:System.Windows.Size"></see>; otherwise, false.</returns>
			<param name="context">Provides contextual information about a component.</param>
			<param name="sourceType">Identifies the data type to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an instance of <see cref="T:System.Windows.Size"></see> can be converted to a different type. </summary>
			<returns>true if this instance of <see cref="T:System.Windows.Size"></see> can be converted to the destinationType; otherwise, false.</returns>
			<param name="context">Provides contextual information about a component.</param>
			<param name="destinationType">Identifies the data type to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.Size"></see>.</summary>
			<returns>The instance of <see cref="T:System.Windows.Size"></see> that is created from the converted source.</returns>
			<param name="culture">Culture-specific information that should be respected during conversion.</param>
			<param name="context">Provides contextual information about a component.</param>
			<param name="value">The source object that is being converted.</param>
		</member>
		<member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert an instance of <see cref="T:System.Windows.Size"></see> to a specified type. </summary>
			<returns>The object that is created from the converted instance of <see cref="T:System.Windows.Size"></see>.</returns>
			<param name="culture">Culture-specific information that should be respected during conversion.</param>
			<param name="context">Provides contextual information about a component.</param>
			<param name="destinationType">The type that this instance of <see cref="T:System.Windows.Size"></see> is converted to.</param>
			<param name="value">The instance of <see cref="T:System.Windows.Size"></see> to convert.</param>
			<exception cref="T:System.NotSupportedException">value is null or is not an instance of <see cref="T:System.Windows.Size"></see>, or if the destinationType is not one of the valid destination types.</exception>
		</member>
		<member name="T:System.Windows.ValidateValueCallback">
			<summary>Represents a method used as a callback that validates the effective value of a  dependency property.</summary>
			<returns>true if the value was validated; false if the submitted value was invalid.</returns>
		</member>
		<member name="T:System.Windows.Vector">
			<summary>Represents a displacement in 2-D space. </summary>
		</member>
		<member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Vector"></see> structure. </summary>
			<param name="y">The <see cref="P:System.Windows.Vector.Y"></see>-offset of the new <see cref="T:System.Windows.Vector"></see>.</param>
			<param name="x">The <see cref="P:System.Windows.Vector.X"></see>-offset of the new <see cref="T:System.Windows.Vector"></see>.</param>
		</member>
		<member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
			<summary> Translates the specified point by the specified vector and returns the resulting point.</summary>
			<returns>The result of translating point by vector.</returns>
			<param name="point">The point to translate.</param>
			<param name="vector">The amount to translate the specified point.</param>
		</member>
		<member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
			<summary> Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector"></see> structure. </summary>
			<returns>The sum of vector1 and vector2.</returns>
			<param name="vector2">The second vector to add.</param>
			<param name="vector1">The first vector to add.</param>
		</member>
		<member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
			<summary> Retrieves the angle, expressed in degrees, between the two specified vectors. </summary>
			<returns>The angle, in degrees, between vector1 and vector2.</returns>
			<param name="vector2">The second vector to evaluate.</param>
			<param name="vector1">The first vector to evaluate.</param>
		</member>
		<member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
			<summary> Calculates the cross product of two vectors. </summary>
			<returns>The cross product of vector1 and vector2. The following formula is used to calculate the cross product: (Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</returns>
			<param name="vector2">The second vector to evaluate.</param>
			<param name="vector1">The first vector to evaluate.  </param>
		</member>
		<member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
			<summary> Calculates the determinant of two vectors.</summary>
			<returns>The determinant of vector1 and vector2.</returns>
			<param name="vector2">The second vector to evaluate.</param>
			<param name="vector1">The first vector to evaluate.</param>
		</member>
		<member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
			<summary> Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector"></see>.</summary>
			<returns>The result of dividing vector by scalar.</returns>
			<param name="scalar">The amount by which vector is divided.</param>
			<param name="vector">The vector structure to divide.</param>
		</member>
		<member name="M:System.Windows.Vector.Equals(System.Object)">
			<summary>Determines whether the specified <see cref="T:System.Object"></see> is a <see cref="T:System.Windows.Vector"></see> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> values as this vector.</summary>
			<returns>true if o is a <see cref="T:System.Windows.Vector"></see> and has the same <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> values as this vector; otherwise, false.</returns>
			<param name="o">The vector to compare.</param>
		</member>
		<member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
			<summary> Compares two vectors for equality.</summary>
			<returns>true if value has the same <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> values as this vector; otherwise, false.</returns>
			<param name="value">The vector to compare with this vector.</param>
		</member>
		<member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
			<summary> Compares the two specified vectors for equality.</summary>
			<returns>true if t he <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> components of vector1 and vector2 are equal; otherwise, false.</returns>
			<param name="vector2">The second vector to compare.</param>
			<param name="vector1">The first vector to compare.</param>
		</member>
		<member name="M:System.Windows.Vector.GetHashCode">
			<summary> Returns the hash code for this vector. </summary>
			<returns>The hash code for this instance.</returns>
		</member>
		<member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
			<summary> Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector"></see>. </summary>
			<returns>The result of multiplying scalar and vector.</returns>
			<param name="scalar">The scalar to multiply.</param>
			<param name="vector">The vector to multiply.</param>
		</member>
		<member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
			<summary> Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector"></see>. </summary>
			<returns>The result of multiplying vector and scalar.</returns>
			<param name="scalar">The scalar to multiply.</param>
			<param name="vector">The vector to multiply.</param>
		</member>
		<member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
			<summary>Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix"></see>.</summary>
			<returns>The result of transforming vector by matrix.</returns>
			<param name="matrix">The transformation to apply to vector.</param>
			<param name="vector">The vector structure to transform.</param>
		</member>
		<member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
			<summary> Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double"></see>.</summary>
			<returns>A <see cref="T:System.Double"></see> containing the scalar dot product of vector1 and vector2, which is calculated using the following formula: (vector1.X * vector2.X) + (vector1.Y * vector2.Y) </returns>
			<param name="vector2">The second vector structure to multiply.</param>
			<param name="vector1">The first vector to multiply.</param>
		</member>
		<member name="M:System.Windows.Vector.Negate">
			<summary> Negates this vector. </summary>
		</member>
		<member name="M:System.Windows.Vector.Normalize">
			<summary> Normalizes this vector. </summary>
		</member>
		<member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
			<summary> Translates a point by the specified vector and returns the resulting point. </summary>
			<returns>The result of translating point by vector.</returns>
			<param name="point">The point to translate.</param>
			<param name="vector">The vector used to translate point.</param>
		</member>
		<member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
			<summary>Adds two vectors and returns the result as a vector. </summary>
			<returns>The sum of vector1 and vector2. </returns>
			<param name="vector2">The second vector to add.</param>
			<param name="vector1">The first vector to add.</param>
		</member>
		<member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
			<summary> Divides the specified vector by the specified scalar and returns the resulting vector.</summary>
			<returns>The result of dividing vector by scalar.</returns>
			<param name="scalar">The scalar by which vector will be divided.</param>
			<param name="vector">The vector to divide.</param>
		</member>
		<member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
			<summary> Compares two vectors for equality.</summary>
			<returns>true if the <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> components of vector1 and vector2 are equal; otherwise, false.</returns>
			<param name="vector2">The second vector to compare.</param>
			<param name="vector1">The first vector to compare.</param>
		</member>
		<member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
			<summary> Creates a <see cref="T:System.Windows.Point"></see> with the <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> values of this vector. </summary>
			<returns>A point with <see cref="P:System.Windows.Point.X"></see>- and <see cref="P:System.Windows.Point.Y"></see>-coordinate values equal to the <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> offset values of vector.</returns>
			<param name="vector">The vector to convert.</param>
		</member>
		<member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
			<summary> Creates a <see cref="T:System.Windows.Size"></see> from the offsets of this vector.</summary>
			<returns>A <see cref="T:System.Windows.Size"></see> with a <see cref="P:System.Windows.Size.Width"></see> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X"></see> property and a <see cref="P:System.Windows.Size.Height"></see> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y"></see> property.</returns>
			<param name="vector">The vector to convert.</param>
		</member>
		<member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
			<summary>Compares two vectors for inequality.</summary>
			<returns>true if the <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> components of vector1 and vector2 are different; otherwise, false.</returns>
			<param name="vector2">The second vector to compare.</param>
			<param name="vector1">The first vector to compare.</param>
		</member>
		<member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
			<summary> Multiplies the specified scalar by the specified vector and returns the resulting vector. </summary>
			<returns>The result of multiplying scalar and vector.</returns>
			<param name="scalar">The scalar to multiply.</param>
			<param name="vector">The vector to multiply.</param>
		</member>
		<member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
			<summary>Multiplies the specified vector by the specified scalar and returns the resulting vector. </summary>
			<returns>The result of multiplying vector and scalar.</returns>
			<param name="scalar">The scalar to multiply.</param>
			<param name="vector">The vector to multiply.</param>
		</member>
		<member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
			<summary> Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix"></see>. </summary>
			<returns>The result of transforming vector by matrix.</returns>
			<param name="matrix">The transformation to apply to vector.</param>
			<param name="vector">The vector to transform.</param>
		</member>
		<member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
			<summary> Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double"></see>.</summary>
			<returns>Returns a <see cref="T:System.Double"></see> containing the scalar dot product of vector1 and vector2, which is calculated using the following formula:vector1.X * vector2.X + vector1.Y * vector2.Y</returns>
			<param name="vector2">The second vector to multiply.</param>
			<param name="vector1">The first vector to multiply.</param>
		</member>
		<member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
			<summary> Subtracts one specified vector from another. </summary>
			<returns>The difference between vector1 and vector2. </returns>
			<param name="vector2">The vector to subtract from vector1.</param>
			<param name="vector1">The vector from which vector2 is subtracted. </param>
		</member>
		<member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
			<summary> Negates the specified vector. </summary>
			<returns>A vector with <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> values opposite of the <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> values of vector.</returns>
			<param name="vector">The vector to negate.</param>
		</member>
		<member name="M:System.Windows.Vector.Parse(System.String)">
			<summary> Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector"></see> structure. </summary>
			<returns>The equivalent <see cref="T:System.Windows.Vector"></see> structure.</returns>
			<param name="source">The string representation of the vector.</param>
		</member>
		<member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
			<summary> Subtracts the specified vector from another specified vector. </summary>
			<returns>The difference between vector1 and vector2. </returns>
			<param name="vector2">The vector to subtract from vector1.</param>
			<param name="vector1">The vector from which vector2 is subtracted.</param>
		</member>
		<member name="M:System.Windows.Vector.ToString">
			<summary> Returns the string representation of this <see cref="T:System.Windows.Vector"></see> structure.</summary>
			<returns>A string that represents the <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> values of this <see cref="T:System.Windows.Vector"></see>.</returns>
		</member>
		<member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
			<summary> Returns the string representation of this <see cref="T:System.Windows.Vector"></see> structure with the specified formatting information. </summary>
			<returns>A string that represents the <see cref="P:System.Windows.Vector.X"></see> and <see cref="P:System.Windows.Vector.Y"></see> values of this <see cref="T:System.Windows.Vector"></see>.</returns>
			<param name="provider">The culture-specific formatting information.</param>
		</member>
		<member name="P:System.Windows.Vector.Length">
			<summary> Gets the length of this vector. </summary>
			<returns>The length of this vector. </returns>
		</member>
		<member name="P:System.Windows.Vector.LengthSquared">
			<summary> Gets the square of the length of this vector. </summary>
			<returns>The square of the <see cref="P:System.Windows.Vector.Length"></see> of this vector.</returns>
		</member>
		<member name="P:System.Windows.Vector.X">
			<summary> Gets or sets the <see cref="P:System.Windows.Vector.X"></see> component of this vector. </summary>
			<returns>The <see cref="P:System.Windows.Vector.X"></see> component of this vector. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Vector.Y">
			<summary> Gets or sets the <see cref="P:System.Windows.Vector.Y"></see> component of this vector. </summary>
			<returns>The <see cref="P:System.Windows.Vector.Y"></see> component of this vector. The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.VectorConverter">
			<summary> Converts instances of other types to and from a Vector. </summary>
		</member>
		<member name="M:System.Windows.VectorConverter.#ctor">
			<summary>Initializes a new instance of the Vector structure. </summary>
		</member>
		<member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Indicates whether an object can be converted from a given type to an instance of a Vector.  </summary>
			<returns>true if objects of the specified type can be converted to a Vector; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="sourceType">The source <see cref="T:System.Type"></see> that is being queried for conversion support.</param>
		</member>
		<member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary> Determines whether instances of Vector can be converted to the specified type. </summary>
			<returns>true if instances of Vector can be converted to destinationType; otherwise, false.</returns>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The desired type this Vector is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary> Converts the specified object to a Vector. </summary>
			<returns>The Vector created from converting value.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="value">The object being converted.</param>
		</member>
		<member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary> Converts the specified Vector to the specified type. </summary>
			<returns>The object created from converting this Vector.</returns>
			<param name="culture">Describes the CultureInfo of the type being converted.</param>
			<param name="context">Describes the context information of a type.</param>
			<param name="destinationType">The type to convert this Vector to.</param>
			<param name="value">The Vector to convert.</param>
		</member>
		<member name="T:System.Windows.WeakEventManager">
			<summary>Provides a base class for the event manager that is used in the WeakEvent pattern. The manager adds and removes listeners for events (or callbacks) that also use the pattern.</summary>
		</member>
		<member name="M:System.Windows.WeakEventManager.#ctor">
			<summary>Provides initialization of the base class values when used as the initializer by the constructor of a derived class.</summary>
		</member>
		<member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
			<summary>Delivers the event being managed to each listener.</summary>
			<param name="sender">The object on which the event is being handled.</param>
			<param name="args">Event data for the event to deliver.</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
			<summary>Delivers the event being managed to each listener in the provided list.</summary>
			<param name="sender">The object on which the event is being handled.</param>
			<param name="args">Event data.</param>
			<param name="list">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList"></see>.</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
			<summary>Returns the <see cref="T:System.Windows.WeakEventManager"></see> implementation that is used for the provided type.</summary>
			<returns>The matching <see cref="T:System.Windows.WeakEventManager"></see> implementation.</returns>
			<param name="managerType">The type to obtain the <see cref="T:System.Windows.WeakEventManager"></see> for.</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
			<summary>Adds the provided listener to the provided source for the event being managed.</summary>
			<param name="source">The source to attach listeners to.</param>
			<param name="listener">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener"></see>).</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
			<summary>Removes a previously added listener from the provided source.</summary>
			<param name="source">The source to remove listeners from.</param>
			<param name="listener">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener"></see>).</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
			<summary>Removes inactive listener entries from the data list for the provided source. Returns true if some entries were actually removed from the list.</summary>
			<returns>true if some entries were actually removed; otherwise, false.</returns>
			<param name="source">Source for events being listened to.</param>
			<param name="data">The data to check. This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList"></see> implementation.</param>
			<param name="purgeAll">Set to true to stop listening to source, and completely remove all entries from data.</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
			<summary>Removes all listeners for the given source.</summary>
			<param name="source">The source to remove listener information for.</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
			<summary>Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</summary>
		</member>
		<member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
			<summary>Sets the current manager for the given manager type.</summary>
			<param name="manager">The new event manager.</param>
			<param name="managerType">Type to set new event manager on</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
			<summary>When overridden in a derived class, starts listening for the event being managed. After <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)"></see>  is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)"></see> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)"></see> whenever the relevant event from the provided source is handled.</summary>
			<param name="source">The source to begin listening on.</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
			<summary>When overridden in a derived class, stops listening on the provided source for the event being managed.</summary>
			<param name="source">The source to stop listening on.</param>
		</member>
		<member name="P:System.Windows.WeakEventManager.Item(System.Object)">
			<summary>Gets or sets the data being stored for the provided source.</summary>
			<returns>Data being stored by the manager for this source.</returns>
			<param name="source">The zero based index of the requested source.</param>
		</member>
		<member name="P:System.Windows.WeakEventManager.ReadLock">
			<summary>Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable"></see>.</summary>
			<returns>An object that can be used to establish a lock on the data table members and then be appropriately disposed, via a using construct.</returns>
		</member>
		<member name="P:System.Windows.WeakEventManager.WriteLock">
			<summary>Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable"></see>.</summary>
			<returns>An object that can be used to establish a lock on the data table members and then be appropriately disposed, via a using construct.</returns>
		</member>
		<member name="T:System.Windows.WeakEventManager.ListenerList">
			<summary>Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager"></see>.</summary>
		</member>
		<member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList"></see> class.</summary>
		</member>
		<member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList"></see> class with the specified initial capacity.</summary>
			<param name="capacity">The number of items that should be allocated in the initial list.</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
			<summary>Adds a listener item to the <see cref="T:System.Windows.WeakEventManager.ListenerList"></see>.</summary>
			<param name="listener">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList"></see>.</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
			<summary>Declares the list to be in use. This prevents direct changes to the list during iterations of the list items.</summary>
			<returns>true if the list was already declared to be in use; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
			<summary>Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList"></see>, making deep copies of the values. </summary>
			<returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen"></see> property was true.</returns>
		</member>
		<member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
			<summary>Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse"></see>.</summary>
		</member>
		<member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
			<summary>Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</summary>
			<returns>true if the provided list was in use at the time of call and therefore the list parameter reference was reset to be a copy. false if the provided list was not in use, in which case the list parameter reference remains unaltered.</returns>
			<param name="list">The list to check for use state and potentially copy.</param>
		</member>
		<member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
			<summary>Removes all entries from the list where the underlying reference target is a null reference.</summary>
			<returns>Returns true if any entries were purged; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
			<summary>Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList"></see>. </summary>
			<param name="listener">The item to remove.</param>
		</member>
		<member name="P:System.Windows.WeakEventManager.ListenerList.Count">
			<summary>Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList"></see>.</summary>
			<returns>The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList"></see>.</returns>
		</member>
		<member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
			<summary>Gets a value that represents an empty list for purposes of comparisons.</summary>
			<returns>The empty list representation.</returns>
		</member>
		<member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
			<summary>Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList"></see>  is empty.</summary>
			<returns>true if the list is empty; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
			<summary>Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList"></see> .</summary>
			<returns>The item at that index, or a null reference if no item was at that index.</returns>
			<param name="index">The zero-based index of the listener in the list.</param>
		</member>
		<member name="N:System.Windows.Converters">
			<summary>Provides classes to support type conversion in Windows Presentation Foundation (WPF).</summary>
		</member>
		<member name="T:System.Windows.Converters.Int32RectValueSerializer">
			<summary>Converts instances of <see cref="T:System.String"></see> to and from instances of <see cref="T:System.Windows.Int32Rect"></see>.</summary>
		</member>
		<member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.Int32RectValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whether the specified <see cref="T:System.String"></see> can be converted to an instance of <see cref="T:System.Windows.Int32Rect"></see>.</summary>
			<returns>true if the value can be converted; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">String to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whetherthe specified <see cref="T:System.Windows.Int32Rect"></see> can be converted to a <see cref="T:System.String"></see>.</summary>
			<returns>true if value can be converted into a <see cref="T:System.String"></see>; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to evaluate for conversion.</param>
			<exception cref="T:System.ArgumentException">value is not an <see cref="T:System.Windows.Int32Rect"></see>.</exception>
		</member>
		<member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts a <see cref="T:System.String"></see> into a <see cref="T:System.Windows.Int32Rect"></see>.</summary>
			<returns>A new instance of <see cref="T:System.Windows.Int32Rect"></see> based on the supplied value.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The string to convert.</param>
			<exception cref="T:System.NotSupportedException">value is null</exception>
		</member>
		<member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts an instance of <see cref="T:System.Windows.Int32Rect"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the specified <see cref="T:System.Windows.Int32Rect"></see>.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to convert into a string.</param>
			<exception cref="T:System.NotSupportedException">value is not a <see cref="T:System.Windows.Int32Rect"></see>.</exception>
		</member>
		<member name="T:System.Windows.Converters.PointValueSerializer">
			<summary>Converts instances of <see cref="T:System.String"></see> to and from instances of <see cref="T:System.Windows.Point"></see>.</summary>
		</member>
		<member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.PointValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whether the specified <see cref="T:System.String"></see> can be converted to an instance of <see cref="T:System.Windows.Point"></see>.</summary>
			<returns>true if the value can be converted; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">String to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whether the specified <see cref="T:System.Windows.Point"></see> can be converted to a <see cref="T:System.String"></see>.</summary>
			<returns>true if value can be converted into a <see cref="T:System.String"></see>; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to evaluate for conversion.</param>
			<exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Windows.Point"></see>.</exception>
		</member>
		<member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts a <see cref="T:System.String"></see> into a <see cref="T:System.Windows.Point"></see>.</summary>
			<returns>A new instance of <see cref="T:System.Windows.Point"></see> based on the supplied value.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The string to convert.</param>
			<exception cref="T:System.NotSupportedException">value is null.</exception>
		</member>
		<member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts an instance of <see cref="T:System.Windows.Point"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the specified <see cref="T:System.Windows.Point"></see>.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to convert into a string.</param>
			<exception cref="T:System.NotSupportedException">value is not a <see cref="T:System.Windows.Point"></see>.</exception>
		</member>
		<member name="T:System.Windows.Converters.RectValueSerializer">
			<summary>Converts instances of <see cref="T:System.String"></see> to and from instances of <see cref="T:System.Windows.Rect"></see>.</summary>
		</member>
		<member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.RectValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whether the specified <see cref="T:System.String"></see> can be converted to an instance of <see cref="T:System.Windows.Rect"></see>.</summary>
			<returns>true if the value can be converted; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">String to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whether the specified <see cref="T:System.Windows.Rect"></see> can be converted to a <see cref="T:System.String"></see>.</summary>
			<returns>true if value can be converted into a <see cref="T:System.String"></see>; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to evaluate for conversion.</param>
			<exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Windows.Rect"></see>.</exception>
		</member>
		<member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts a <see cref="T:System.String"></see> into a <see cref="T:System.Windows.Rect"></see>.</summary>
			<returns>A new instance of <see cref="T:System.Windows.Rect"></see> based on the supplied value.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The string to convert.</param>
			<exception cref="T:System.NotSupportedException">value is null</exception>
		</member>
		<member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts an instance of <see cref="T:System.Windows.Rect"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the specified <see cref="T:System.Windows.Rect"></see>.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to convert into a string.</param>
			<exception cref="T:System.NotSupportedException">value is not a <see cref="T:System.Windows.Rect"></see>.</exception>
		</member>
		<member name="T:System.Windows.Converters.SizeValueSerializer">
			<summary>Converts instances of <see cref="T:System.String"></see> to and from instances of <see cref="T:System.Windows.Size"></see>.</summary>
		</member>
		<member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.SizeValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whether the specified <see cref="T:System.String"></see> can be converted to an instance of <see cref="T:System.Windows.Size"></see>.</summary>
			<returns>true if the value can be converted; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">String to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whether the specified <see cref="T:System.Windows.Size"></see> can be converted to a <see cref="T:System.String"></see>.</summary>
			<returns>true if value can be converted into a <see cref="T:System.String"></see>; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to evaluate for conversion.</param>
			<exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Windows.Size"></see>.</exception>
		</member>
		<member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts a <see cref="T:System.String"></see> into a <see cref="T:System.Windows.Size"></see>.</summary>
			<returns>A new instance of <see cref="T:System.Windows.Size"></see> based on the supplied value.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The string to convert.</param>
			<exception cref="T:System.NotSupportedException">value is null</exception>
		</member>
		<member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts an instance of <see cref="T:System.Windows.Size"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the specified <see cref="T:System.Windows.Size"></see>.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to convert into a string.</param>
			<exception cref="T:System.NotSupportedException">value is not a <see cref="T:System.Windows.Size"></see>.</exception>
		</member>
		<member name="T:System.Windows.Converters.VectorValueSerializer">
			<summary>Converts instances of <see cref="T:System.String"></see> to and from instances of <see cref="T:System.Windows.Vector"></see>.</summary>
		</member>
		<member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.VectorValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whether the specified <see cref="T:System.String"></see> can be converted to an instance of <see cref="T:System.Windows.Vector"></see>.</summary>
			<returns>true if the value can be converted; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">String to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whether the specified <see cref="T:System.Windows.Vector"></see> can be converted to a <see cref="T:System.String"></see>.</summary>
			<returns>true if value can be converted into a <see cref="T:System.String"></see>; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to evaluate for conversion.</param>
			<exception cref="T:System.ArgumentException">value is not a <see cref="T:System.Windows.Vector"></see>.</exception>
		</member>
		<member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts a <see cref="T:System.String"></see> into a <see cref="T:System.Windows.Vector"></see>.</summary>
			<returns>A new instance of <see cref="T:System.Windows.Vector"></see> based on the supplied value.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The string to convert.</param>
			<exception cref="T:System.NotSupportedException">value is null</exception>
		</member>
		<member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts an instance of <see cref="T:System.Windows.Vector"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the specified <see cref="T:System.Windows.Vector"></see>.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to convert into a string.</param>
			<exception cref="T:System.NotSupportedException">value is not a <see cref="T:System.Windows.Vector"></see>.</exception>
		</member>
		<member name="T:System.Windows.Data.DataSourceProvider">
			<summary>Common base class and contract for <see cref="T:System.Windows.Data.DataSourceProvider"></see> objects, which are factories that execute some queries to produce a single object or a list of objects that you can use as binding source objects.</summary>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Data.DataSourceProvider"></see> class. This is a protected constructor.</summary>
		</member>
		<member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
			<summary>Occurs when the <see cref="P:System.Windows.Data.DataSourceProvider.Data"></see> property has a new value.</summary>
		</member>
		<member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
			<summary>Occurs when a property value changes.</summary>
		</member>
		<member name="E:System.Windows.Data.DataSourceProvider.System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
			<summary>Occurs when a property value changes.</summary>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
			<summary>Indicates that initialization of this object is about to begin; no implicit <see cref="M:System.Windows.Data.DataSourceProvider.Refresh"></see> occurs until the matched <see cref="M:System.Windows.Data.DataSourceProvider.EndInit"></see> method is called.</summary>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
			<summary>When overridden in a derived class, this base class calls this method when <see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad"></see> or <see cref="M:System.Windows.Data.DataSourceProvider.Refresh"></see> has been called. The base class delays the call if refresh is deferred or initial load is disabled.</summary>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
			<summary>Enters a defer cycle that you can use to change properties of the provider and delay automatic refresh.</summary>
			<returns>An <see cref="T:System.IDisposable"></see> object that you can use to dispose of the calling object.</returns>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.EndInit">
			<summary>Indicates that the initialization of this object has completed; this causes a <see cref="M:System.Windows.Data.DataSourceProvider.Refresh"></see> if no other <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh"></see> is outstanding.</summary>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
			<summary>Starts the initial query to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data"></see> property.</summary>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
			<summary>Raises the <see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged"></see> event with the provided arguments.</summary>
			<param name="e">Arguments of the event being raised.</param>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
			<summary>Derived classes call this method to indicate that a query has finished.</summary>
			<param name="newData">The data that is the result of the query.</param>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
			<summary>Derived classes call this method to indicate that a query has finished.</summary>
			<param name="error">The error that occurred while running the query. This value is null if there is no error.</param>
			<param name="newData">The data that is the result of the query.</param>
			<param name="callbackArguments">Optional arguments to send as a parameter with the completionWork delegate.</param>
			<param name="completionWork">Optional delegate that is used to execute completion work on the UI thread, for example, to set additional properties.</param>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.Refresh">
			<summary>Initiates a refresh operation to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data"></see> property.</summary>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.System.ComponentModel.ISupportInitialize.BeginInit">
			<summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="M:System.Windows.Data.DataSourceProvider.System.ComponentModel.ISupportInitialize.EndInit">
			<summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
		</member>
		<member name="P:System.Windows.Data.DataSourceProvider.Data">
			<summary>Gets the underlying data object.</summary>
			<returns>A value of type <see cref="T:System.Object"></see> that is the underlying data object.</returns>
		</member>
		<member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
			<summary>Gets or sets the current <see cref="T:System.Windows.Threading.Dispatcher"></see> object to the UI thread to use.</summary>
			<returns>The current <see cref="T:System.Windows.Threading.Dispatcher"></see> object to the UI thread to use. By default, this is the <see cref="T:System.Windows.Threading.Dispatcher"></see> object that is associated with the thread on which this instance was created.</returns>
		</member>
		<member name="P:System.Windows.Data.DataSourceProvider.Error">
			<summary>Gets the error of the last query operation.</summary>
			<returns>A value of type <see cref="T:System.Exception"></see> that is the error of the last query operation, or null if there was no error.</returns>
		</member>
		<member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
			<summary>Gets or sets a value that indicates whether to prevent or delay the automatic loading of data.</summary>
			<returns>false to prevent or delay the automatic loading of data; otherwise, true. The default value is true.</returns>
		</member>
		<member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
			<summary>Gets a value that indicates whether there is an outstanding <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh"></see> in use.</summary>
			<returns>true if there is an outstanding <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh"></see> in use; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.Input.FocusNavigationDirection">
			<summary>Specifies the direction within a user interface (UI) in which a desired focus change request is attempted. The direction is either based on tab order or by relative direction in layout.</summary>
		</member>
		<member name="F:System.Windows.Input.FocusNavigationDirection.Down">
			<summary>Move focus to another focusable element downwards from the currently focused element.</summary>
		</member>
		<member name="F:System.Windows.Input.FocusNavigationDirection.First">
			<summary>Move focus to the first focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)"></see>.</summary>
		</member>
		<member name="F:System.Windows.Input.FocusNavigationDirection.Last">
			<summary>Move focus to the last focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)"></see>.</summary>
		</member>
		<member name="F:System.Windows.Input.FocusNavigationDirection.Left">
			<summary>Move focus to another focusable element to the left of the currently focused element.</summary>
		</member>
		<member name="F:System.Windows.Input.FocusNavigationDirection.Next">
			<summary>Move focus to the next focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)"></see>.</summary>
		</member>
		<member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
			<summary>Move focus to the previous focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)"></see>.</summary>
		</member>
		<member name="F:System.Windows.Input.FocusNavigationDirection.Right">
			<summary>Move focus to another focusable element to the right of the currently focused element.</summary>
		</member>
		<member name="F:System.Windows.Input.FocusNavigationDirection.Up">
			<summary>Move focus to another focusable element upwards from the currently focused element.</summary>
		</member>
		<member name="T:System.Windows.Input.Key">
			<summary>Specifies the possible key values on a keyboard. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.A">
			<summary>The A key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.AbntC1">
			<summary>The ABNT_C1 (Brazilian) key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.AbntC2">
			<summary>The ABNT_C2 (Brazilian) key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Add">
			<summary>The Add key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Apps">
			<summary>The Application key (Microsoft Natural Keyboard). </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Attn">
			<summary>The ATTN key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.B">
			<summary>The B key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Back">
			<summary> The Backspace key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.BrowserBack">
			<summary>The Browser Back key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.BrowserFavorites">
			<summary>The Browser Favorites key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.BrowserForward">
			<summary>The Browser Forward key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.BrowserHome">
			<summary>The Browser Home key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.BrowserRefresh">
			<summary>The Browser Refresh key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.BrowserSearch">
			<summary>The Browser Search key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.BrowserStop">
			<summary>The Browser Stop key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.C">
			<summary>The C key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Cancel">
			<summary>The Cancel key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Capital">
			<summary> The Caps Lock key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.CapsLock">
			<summary> The Caps Lock key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Clear">
			<summary> The Clear key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.CrSel">
			<summary>The CRSEL key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.D">
			<summary>The D key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.D0">
			<summary>The F0 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.D1">
			<summary>The F1 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.D2">
			<summary> The F2 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.D3">
			<summary> The F3 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.D4">
			<summary> The F4 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.D5">
			<summary> The F5 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.D6">
			<summary> The F6 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.D7">
			<summary> The F7 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.D8">
			<summary> The F8 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.D9">
			<summary> The F9 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeAlphanumeric">
			<summary>The DBE_ALPHANUMERIC key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeCodeInput">
			<summary>The DBE_CODEINPUT key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeDbcsChar">
			<summary>The DBE_DBCSCHAR key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeDetermineString">
			<summary>The DBE_DETERMINESTRING key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
			<summary>The DBE_ENTERDLGCONVERSIONMODE key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
			<summary>The DBE_ENTERIMECONFIGMODE key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
			<summary>The DBE_ENTERWORDREGISTERMODE key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeFlushString">
			<summary>The DBE_FLUSHSTRING key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeHiragana">
			<summary>The DBE_HIRAGANA key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeKatakana">
			<summary>The DBE_KATAKANA key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeNoCodeInput">
			<summary>The DBE_NOCODEINPUT key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeNoRoman">
			<summary>The DBE_NOROMAN key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeRoman">
			<summary>The DBE_ROMAN key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.DbeSbcsChar">
			<summary>The DBE_SBCSCHAR key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Decimal">
			<summary>The Decimal key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Delete">
			<summary> The Delete key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Divide">
			<summary>The Divide key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Down">
			<summary> The Down Arrow key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.E">
			<summary>The E key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.End">
			<summary> The End key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Enter">
			<summary> The Enter key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.EraseEof">
			<summary>The ERASE EOF key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Escape">
			<summary> The ESC key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Execute">
			<summary> The Execute key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.ExSel">
			<summary>The EXSEL key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F">
			<summary>The F key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F1">
			<summary>The F1 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F10">
			<summary>The F10 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F11">
			<summary>The F11 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F12">
			<summary>The F12 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F13">
			<summary>The F13 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F14">
			<summary>The F14 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F15">
			<summary>The F15 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F16">
			<summary>The F16 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F17">
			<summary>The F17 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F18">
			<summary>The F18 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F19">
			<summary>The F19 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F2">
			<summary>The F2 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F20">
			<summary>The F20 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F21">
			<summary>The F21 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F22">
			<summary>The F22 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F23">
			<summary>The F23 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F24">
			<summary>The F24 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F3">
			<summary>The F3 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F4">
			<summary>The F4 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F5">
			<summary>The F5 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F6">
			<summary>The F6 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F7">
			<summary>The F7 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F8">
			<summary>The F8 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.F9">
			<summary>The F9 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.FinalMode">
			<summary> The IME Final mode key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.G">
			<summary>The G key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.H">
			<summary>The H key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.HangulMode">
			<summary> The IME Hangul mode key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.HanjaMode">
			<summary> The IME Hanja mode key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Help">
			<summary> The Help key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Home">
			<summary> The Home key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.I">
			<summary>The I key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.ImeAccept">
			<summary> The IME Accept key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.ImeConvert">
			<summary> The IME Convert key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.ImeModeChange">
			<summary> The IME Mode change request. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.ImeNonConvert">
			<summary> The IME NonConvert key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.ImeProcessed">
			<summary>A special key masking the real key being processed by an IME. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Insert">
			<summary> The Insert key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.J">
			<summary>The J key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.JunjaMode">
			<summary> The IME Junja mode key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.K">
			<summary>The K key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.KanaMode">
			<summary> The IME Kana mode key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.KanjiMode">
			<summary> The IME Kanji mode key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.L">
			<summary>The L key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.LaunchApplication1">
			<summary>The Launch Application1 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.LaunchApplication2">
			<summary>The Launch Application2 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.LaunchMail">
			<summary>The Launch Mail key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Left">
			<summary> The Left Arrow key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.LeftAlt">
			<summary>The left ALT key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.LeftCtrl">
			<summary>The left CTRL key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.LeftShift">
			<summary>The left Shift key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.LineFeed">
			<summary> The Linefeed key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.LWin">
			<summary>The left Windows logo key (Microsoft Natural Keyboard). </summary>
		</member>
		<member name="F:System.Windows.Input.Key.M">
			<summary>The M key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.MediaNextTrack">
			<summary>The Media Next Track key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.MediaPlayPause">
			<summary>The Media Play Pause key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.MediaPreviousTrack">
			<summary>The Media Previous Track key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.MediaStop">
			<summary>The Media Stop key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Multiply">
			<summary>The Multiply key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.N">
			<summary>The N key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Next">
			<summary> The Page Down key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NoName">
			<summary>A constant reserved for future use. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.None">
			<summary>No key pressed. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NumLock">
			<summary>The Num Lock key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NumPad0">
			<summary>The 0 key on the numeric keypad. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NumPad1">
			<summary>The 1 key on the numeric keypad. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NumPad2">
			<summary>The 2 key on the numeric keypad. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NumPad3">
			<summary>The 3 key on the numeric keypad. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NumPad4">
			<summary>The 4 key on the numeric keypad. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NumPad5">
			<summary>The 5 key on the numeric keypad. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NumPad6">
			<summary>The 6 key on the numeric keypad. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NumPad7">
			<summary>The 7 key on the numeric keypad. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NumPad8">
			<summary>The 8 key on the numeric keypad. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.NumPad9">
			<summary>The 9 key on the numeric keypad. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.O">
			<summary>The O key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Oem1">
			<summary>The OEM 1 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Oem102">
			<summary>The OEM 102 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Oem2">
			<summary>The OEM 2 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Oem3">
			<summary>The OEM 3 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Oem4">
			<summary>The OEM 4 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Oem5">
			<summary>The OEM 5 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Oem6">
			<summary>The OEM 6 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Oem7">
			<summary>The OEM 7 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Oem8">
			<summary>The OEM 8 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemAttn">
			<summary>The OEM ATTN key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemAuto">
			<summary>The OEM AUTO key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemBackslash">
			<summary>The OEM Backslash key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemBackTab">
			<summary>The OEM BACKTAB key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemClear">
			<summary>The OEM Clear key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemCloseBrackets">
			<summary>The OEM Close Brackets key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemComma">
			<summary>The OEM Comma key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemCopy">
			<summary>The OEM COPY key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemEnlw">
			<summary>The OEM ENLW key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemFinish">
			<summary>The OEM FINISH key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemMinus">
			<summary>The OEM Minus key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemOpenBrackets">
			<summary>The OEM Open Brackets key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemPeriod">
			<summary>The OEM Period key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemPipe">
			<summary>The OEM Pipe key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemPlus">
			<summary>The OEM Addition key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemQuestion">
			<summary>The OEM Question key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemQuotes">
			<summary>The OEM Quotes key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemSemicolon">
			<summary>The OEM Semicolon key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.OemTilde">
			<summary>The OEM Tilde key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.P">
			<summary>The P key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Pa1">
			<summary>The PA1 key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.PageDown">
			<summary> The Page Down key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.PageUp">
			<summary> The Page Up key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Pause">
			<summary> The Pause key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Play">
			<summary>The PLAY key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Print">
			<summary> The Print key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.PrintScreen">
			<summary> The Print Screen key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Prior">
			<summary> The Page Up key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Q">
			<summary>The Q key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.R">
			<summary>The R key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Return">
			<summary> The Return key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Right">
			<summary> The Right Arrow key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.RightAlt">
			<summary>The right ALT key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.RightCtrl">
			<summary>The right CTRL key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.RightShift">
			<summary>The right Shift key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.RWin">
			<summary>The right Windows logo key (Microsoft Natural Keyboard). </summary>
		</member>
		<member name="F:System.Windows.Input.Key.S">
			<summary>The S key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Scroll">
			<summary>The Scroll Lock key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Select">
			<summary> The Select key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.SelectMedia">
			<summary>The Select Media key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Separator">
			<summary>The Separator key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Sleep">
			<summary>The Computer Sleep key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Snapshot">
			<summary> The Print Screen key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Space">
			<summary> The Spacebar key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Subtract">
			<summary>The Subtract key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.System">
			<summary>A special key masking the real key being processed as a system key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.T">
			<summary>The T key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Tab">
			<summary> The Tab key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.U">
			<summary>The U key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Up">
			<summary> The Up Arrow key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.V">
			<summary>The V key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.VolumeDown">
			<summary>The Volume Down key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.VolumeMute">
			<summary>The Volume Mute key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.VolumeUp">
			<summary>The Volume Up key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.W">
			<summary>The W key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.X">
			<summary>The X key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Y">
			<summary>The Y key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Z">
			<summary>The Z key. </summary>
		</member>
		<member name="F:System.Windows.Input.Key.Zoom">
			<summary>The ZOOM key. </summary>
		</member>
		<member name="T:System.Windows.Input.KeyConverter">
			<summary>Converts a <see cref="T:System.Windows.Input.Key"></see> object to and from other types.</summary>
		</member>
		<member name="M:System.Windows.Input.KeyConverter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Key"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.Key"></see>, using the specified context. </summary>
			<returns>true if this object can perform the conversion; otherwise, false.</returns>
			<param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
			<param name="sourceType">The type being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an instance of <see cref="T:System.Windows.Input.Key"></see> can be converted to the specified type, using the specified context.</summary>
			<returns>true if this converter can perform the operation; otherwise, false.</returns>
			<param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">The type being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.Key"></see>, using the specified context.</summary>
			<returns>The converted object.</returns>
			<param name="culture">Culture specific information.</param>
			<param name="source">The object to convert.</param>
			<param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
			<exception cref="T:System.NotSupportedException">source cannot be converted.</exception>
		</member>
		<member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert a <see cref="T:System.Windows.Input.Key"></see> to the specified type, using the specified context.</summary>
			<returns>The converted object.</returns>
			<param name="culture">Culture specific information.</param>
			<param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">The type to convert the object to.</param>
			<param name="value">The object to convert.</param>
			<exception cref="T:System.NotSupportedException">value cannot be converted to destinationType.</exception>
			<exception cref="T:System.ArgumentNullException">destinationType is null.</exception>
		</member>
		<member name="T:System.Windows.Input.KeyInterop">
			<summary>Provides static methods to convert between Win32 Virtual-Keys and the WPF<see cref="T:System.Windows.Input.Key"></see> enumeration. </summary>
		</member>
		<member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
			<summary>Converts a Win32 Virtual-Key into WPF<see cref="T:System.Windows.Input.Key"></see>.</summary>
			<returns>The WPF key.</returns>
			<param name="virtualKey">The virtual key to convert.</param>
		</member>
		<member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
			<summary>Converts a WPF<see cref="T:System.Windows.Input.Key"></see> into a Win32 Virtual-Key.</summary>
			<returns>The Win32 Virtual-Key.</returns>
			<param name="key">The WPF to convert.</param>
		</member>
		<member name="T:System.Windows.Input.KeyValueSerializer">
			<summary>Converts instances of <see cref="T:System.String"></see> to and from instances of <see cref="T:System.Windows.Input.Key"></see>.</summary>
		</member>
		<member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines if the specified <see cref="T:System.String"></see> can be convert to an instance of <see cref="T:System.Windows.Input.Key"></see>.</summary>
			<returns>true if the value can be converted; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">String to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines if the specified <see cref="T:System.Windows.Input.Key"></see> can be converted to a <see cref="T:System.String"></see>.</summary>
			<returns>true if value can be converted into a <see cref="T:System.String"></see>; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The key to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts a <see cref="T:System.String"></see> into a <see cref="T:System.Windows.Input.Key"></see>.</summary>
			<returns>A new instance of <see cref="T:System.Windows.Input.Key"></see> based on the supplied value.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The string to convert into a <see cref="T:System.Windows.Input.Key"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts an instance of <see cref="T:System.Windows.Input.Key"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the specified <see cref="T:System.Windows.Input.Key"></see>.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The key to convert into a string.</param>
		</member>
		<member name="T:System.Windows.Input.ModifierKeys">
			<summary>Specifies the set of modifier keys. </summary>
		</member>
		<member name="F:System.Windows.Input.ModifierKeys.Alt">
			<summary>The ALT key. </summary>
		</member>
		<member name="F:System.Windows.Input.ModifierKeys.Control">
			<summary>The CONTORL key. </summary>
		</member>
		<member name="F:System.Windows.Input.ModifierKeys.None">
			<summary>No modifiers are pressed. </summary>
		</member>
		<member name="F:System.Windows.Input.ModifierKeys.Shift">
			<summary>The SHIFT key. </summary>
		</member>
		<member name="F:System.Windows.Input.ModifierKeys.Windows">
			<summary>The Windows logo key.</summary>
		</member>
		<member name="T:System.Windows.Input.ModifierKeysConverter">
			<summary>Converts a <see cref="T:System.Windows.Input.ModifierKeys"></see> object to and from other types.</summary>
		</member>
		<member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ModifierKeysConverter"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.ModifierKeys"></see>, using the specified context.</summary>
			<returns>true if this converter can perform the operation; otherwise, false.</returns>
			<param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
			<param name="sourceType">The type being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an instance of <see cref="T:System.Windows.Input.ModifierKeys"></see> can be converted to the specified type, using the specified context.</summary>
			<returns>true if this converter can perform the operation; otherwise, false.</returns>
			<param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">The type being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.ModifierKeys"></see>, using the specified context.</summary>
			<returns>The converted object.</returns>
			<param name="culture">Culture specific information.</param>
			<param name="source">The object to convert.</param>
			<param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
			<exception cref="T:System.NotSupportedException">source cannot be converted.</exception>
		</member>
		<member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert a <see cref="T:System.Windows.Input.ModifierKeys"></see> to the specified type, using the specified context.</summary>
			<returns>The converted object.</returns>
			<param name="culture">Culture specific information.</param>
			<param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
			<param name="destinationType">The type to convert the object to.</param>
			<param name="value">The object to convert.</param>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">value does not map to a valid <see cref="T:System.Windows.Input.ModifierKeys"></see>.</exception>
			<exception cref="T:System.ArgumentNullException">destinationType is null.</exception>
			<exception cref="T:System.NotSupportedException">value cannot be converted.</exception>
		</member>
		<member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
			<summary>Determines whether the specified value is a valid <see cref="T:System.Windows.Input.ModifierKeys"></see>. </summary>
			<returns>true if valid; otherwise, false.</returns>
			<param name="modifierKeys">The value to check for validity.</param>
		</member>
		<member name="T:System.Windows.Input.ModifierKeysValueSerializer">
			<summary>Converts instances of <see cref="T:System.String"></see> to and from instances of <see cref="T:System.Windows.Input.ModifierKeys"></see>.</summary>
		</member>
		<member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ModifierKeysValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines if the specified <see cref="T:System.String"></see> can be convert to an instance of <see cref="T:System.Windows.Input.ModifierKeys"></see>.</summary>
			<returns>true if the value can be converted; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">String to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines if the specified <see cref="T:System.Windows.Input.ModifierKeys"></see> can be converted to a <see cref="T:System.String"></see>.</summary>
			<returns>true if value can be converted into a <see cref="T:System.String"></see>; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The modifier keys to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts a <see cref="T:System.String"></see> into a <see cref="T:System.Windows.Input.ModifierKeys"></see>.</summary>
			<returns>A new instance of <see cref="T:System.Windows.Input.ModifierKeys"></see> based on the supplied value.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The string to convert into a <see cref="T:System.Windows.Input.ModifierKeys"></see>.</param>
		</member>
		<member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts an instance of <see cref="T:System.Windows.Input.ModifierKeys"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the specified <see cref="T:System.Windows.Input.ModifierKeys"></see>.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The key to convert into a string.</param>
		</member>
		<member name="T:System.Windows.Input.TraversalRequest">
			<summary>Represents a request to move focus to another control. </summary>
		</member>
		<member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TraversalRequest"></see> class. </summary>
			<param name="focusNavigationDirection">The intended direction of the focus traversal, as a value of the enumeration.</param>
		</member>
		<member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
			<summary>Gets the traversal direction. </summary>
			<returns>One of the traversal direction enumeration values.</returns>
		</member>
		<member name="P:System.Windows.Input.TraversalRequest.Wrapped">
			<summary> Gets or sets a value that indicates whether focus traversal has reached the end of child elements that can have focus. </summary>
			<returns>true if this traversal has reached the end of child elements that can have focus; otherwise, false. The default is false.</returns>
		</member>
		<member name="T:System.Windows.Interop.ComponentDispatcher">
			<summary>Enables shared control of the message pump between Win32 and WPF in interoperation scenarios. </summary>
		</member>
		<member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
			<summary>Occurs when a thread becomes modal. </summary>
		</member>
		<member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
			<summary>Occurs when a modal thread becomes nonmodal. </summary>
		</member>
		<member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
			<summary>Occurs when the message pump receives a keyboard message.  </summary>
		</member>
		<member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
			<summary>Occurs when the thread is idle. </summary>
		</member>
		<member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
			<summary>Occurs when the message pump receives a keyboard message.</summary>
		</member>
		<member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
			<summary>Called to indicate that the thread is modal. </summary>
		</member>
		<member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
			<summary>Called to indicate that a modal thread is no longer modal. </summary>
		</member>
		<member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
			<summary>Indicates that a new message is available for possible handling. </summary>
			<returns>true, if one of the modules listening to the message loop processed the message. The owner of the message loop should ignore the message. false, if the message was not processed. In this case, the owner of the message pump should call the Win32 function TranslateMessagehttp://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/messagesandmessagequeues/messagesandmessagequeuesreference/messagesandmessagequeuesfunctions/translatemessage.asp followed by DispatchMessagehttp://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/messagesandmessagequeues/messagesandmessagequeuesreference/messagesandmessagequeuesfunctions/dispatchmessage.asp.</returns>
			<param name="msg">The message and its associated data.</param>
		</member>
		<member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
			<summary>Gets the last message that was raised. </summary>
			<returns>The last message.</returns>
		</member>
		<member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
			<summary>Gets a value that indicates whether the thread is modal. </summary>
			<returns>true if the thread is modal; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.Interop.IKeyboardInputSink">
			<summary>Provides a keyboard sink for components that manages tabbing, accelerators, and mnemonics across interop boundaries and between HWNDs. This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</summary>
		</member>
		<member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
			<summary>Gets a value that indicates whether the sink or one of its contained components has focus. </summary>
			<returns>true if the sink or one of its contained components has focus; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
			<summary>Called when one of the mnemonics (access keys) for this sink is invoked. </summary>
			<returns>true if the message was handled; otherwise, false.</returns>
			<param name="modifiers">Modifier keys.</param>
			<param name="msg">The message for the mnemonic and associated data. Do not modify this message structure. It is passed by reference for performance reasons only.</param>
		</member>
		<member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
			<summary>Registers the <see cref="T:System.Windows.Interop.IKeyboardInputSink"></see> interface of a contained component. </summary>
			<returns>The <see cref="T:System.Windows.Interop.IKeyboardInputSite"></see> site of the contained component.</returns>
			<param name="sink">The <see cref="T:System.Windows.Interop.IKeyboardInputSink"></see> sink of the contained component.</param>
		</member>
		<member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
			<summary>Sets focus on either the first tab stop or the last tab stop of the sink. </summary>
			<returns>true if the focus has been set as requested; false, if there are no tab stops.</returns>
			<param name="request">Specifies whether focus should be set to the first or the last tab stop.</param>
		</member>
		<member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
			<summary>Processes keyboard input at the keydown message level.</summary>
			<returns>true if the message was handled by the method implementation; otherwise, false.</returns>
			<param name="modifiers">Modifier keys.</param>
			<param name="msg">The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.</param>
		</member>
		<member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
			<summary>Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)"></see> is called. </summary>
			<returns>true if the message was processed and <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)"></see> should not be called; otherwise, false.</returns>
			<param name="modifiers">Modifier keys.</param>
			<param name="msg">The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.</param>
		</member>
		<member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
			<summary>Gets or sets a reference to the component's container's <see cref="T:System.Windows.Interop.IKeyboardInputSite"></see> interface. </summary>
			<returns>A reference to the container's <see cref="T:System.Windows.Interop.IKeyboardInputSite"></see> interface.</returns>
		</member>
		<member name="T:System.Windows.Interop.IKeyboardInputSite">
			<summary>Manages keyboard focus within the container.  This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</summary>
		</member>
		<member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
			<summary>Called by a contained component when it has reached its last tab stop and has no further items to tab to. </summary>
			<returns>If this method returns true, the site has shifted focus to another component. If this method returns false, focus is still within the calling component. The component should "wrap around" and set focus to its first contained tab stop.</returns>
			<param name="request">Specifies whether focus should be set to the first or the last tab stop.</param>
		</member>
		<member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
			<summary>Gets the keyboard sink associated with this site. </summary>
			<returns>The current site's <see cref="T:System.Windows.Interop.IKeyboardInputSink"></see> interface.</returns>
		</member>
		<member name="T:System.Windows.Interop.MSG">
			<summary>Contains the elements of a Win32 message. </summary>
		</member>
		<member name="P:System.Windows.Interop.MSG.hwnd">
			<summary>Gets or sets the window handle (HWND). </summary>
			<returns>The window handle (HWND).</returns>
		</member>
		<member name="P:System.Windows.Interop.MSG.lParam">
			<summary>Gets or sets the lParam value for the message. </summary>
			<returns>The lParam value for the message.</returns>
		</member>
		<member name="P:System.Windows.Interop.MSG.message">
			<summary>Gets or sets the message ID. </summary>
			<returns>The message ID.</returns>
		</member>
		<member name="P:System.Windows.Interop.MSG.pt_x">
			<summary>Gets or sets the x coordinate of the cursor position. </summary>
			<returns>The x coordinate of the cursor position.</returns>
		</member>
		<member name="P:System.Windows.Interop.MSG.pt_y">
			<summary>Gets or sets the y coordinate of the cursor position. </summary>
			<returns>The y coordinate of the cursor position.</returns>
		</member>
		<member name="P:System.Windows.Interop.MSG.time">
			<summary>Gets or sets the time that the message was sent. </summary>
			<returns>The time that the message was sent.</returns>
		</member>
		<member name="P:System.Windows.Interop.MSG.wParam">
			<summary>Gets or sets the wParam value for the message. </summary>
			<returns>The wParam value for the message.</returns>
		</member>
		<member name="T:System.Windows.Interop.ThreadMessageEventHandler">
			<summary> Represents the method that handles the <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage"></see> and <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage"></see> events. </summary>
		</member>
		<member name="T:System.Windows.Markup.ConstructorArgumentAttribute">
			<summary>Specifies that the associated property can be initialized by using constructor parameter of the specified name.  This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute"></see> class.</summary>
			<param name="argumentName">The name of the constructor that will initialize the associated property.</param>
		</member>
		<member name="P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName">
			<summary>Gets the name parameter of the constructor that will initialize the associated property.</summary>
			<returns>The name of the constructor.</returns>
		</member>
		<member name="T:System.Windows.Markup.ContentPropertyAttribute">
			<summary>Specifies which property of a class to use as the content property when written as XAML.  This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute"></see> class, by using the specified name.</summary>
			<param name="name">The property name.</param>
		</member>
		<member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
			<summary>Gets the name of the property that is the content property.</summary>
			<returns>The name of the property that is the content property.</returns>
		</member>
		<member name="T:System.Windows.Markup.DateTimeValueSerializer">
			<summary>Converts instances of <see cref="T:System.String"></see> to and from instances of <see cref="T:System.DateTime"></see>.</summary>
		</member>
		<member name="M:System.Windows.Markup.DateTimeValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DateTimeValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines if the specified <see cref="T:System.String"></see> can be convert to an instance of <see cref="T:System.DateTime"></see>.</summary>
			<returns>true if the value can be converted; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">String to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines if the specified <see cref="T:System.DateTime"></see> can be converted to a <see cref="T:System.String"></see>.</summary>
			<returns>true if value can be converted into a <see cref="T:System.String"></see>; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to evaluate for conversion.</param>
			<exception cref="T:System.ArgumentException">value is not a <see cref="T:System.DateTime"></see>.</exception>
		</member>
		<member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts a <see cref="T:System.String"></see> into a <see cref="T:System.DateTime"></see>.</summary>
			<returns>A new instance of <see cref="T:System.DateTime"></see> based on the supplied value.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The string to convert into a <see cref="T:System.DateTime"></see>.</param>
			<exception cref="T:System.NotSupportedException">value is null.</exception>
		</member>
		<member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts an instance of <see cref="T:System.DateTime"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the specified <see cref="T:System.DateTime"></see>.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to convert into a string.</param>
			<exception cref="T:System.NotSupportedException">value is not a <see cref="T:System.DateTime"></see> or is null.</exception>
		</member>
		<member name="T:System.Windows.Markup.DependsOnAttribute">
			<summary>Specifies that the associated property is dependent on the value of another property.  This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Markup.DependsOnAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DependsOnAttribute"></see> class.</summary>
			<param name="name">The property that the property associated with this <see cref="T:System.Windows.Markup.DependsOnAttribute"></see> depends on.</param>
		</member>
		<member name="P:System.Windows.Markup.DependsOnAttribute.Name">
			<summary>Gets the name of the property that the property associated with this <see cref="T:System.Windows.Markup.DependsOnAttribute"></see> depends on.</summary>
			<returns>The property.</returns>
		</member>
		<member name="P:System.Windows.Markup.DependsOnAttribute.TypeId">
			<summary>Gets a unique identifier for this <see cref="T:System.Windows.Markup.DependsOnAttribute"></see>. </summary>
			<returns>The unique id.</returns>
		</member>
		<member name="T:System.Windows.Markup.DesignerSerializationOptions">
			<summary>Specifies how a property is to be serialized.</summary>
		</member>
		<member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
			<summary>The property is to be serialized as an attribute.</summary>
		</member>
		<member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
			<summary>Specifies the serialization flags for a property.</summary>
		</member>
		<member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute"></see> class, by using the specified <see cref="T:System.Windows.Markup.DesignerSerializationOptions"></see>.</summary>
			<param name="designerSerializationOptions">Specifies how the property is to be serialized. </param>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">designerSerializationOptions is not a valid <see cref="T:System.Windows.Markup.DesignerSerializationOptions"></see> value.</exception>
		</member>
		<member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
			<summary>Gets the <see cref="T:System.Windows.Markup.DesignerSerializationOptions"></see> set on the property associated with this attribute.  </summary>
			<returns>The serialization option.</returns>
		</member>
		<member name="T:System.Windows.Markup.IComponentConnector">
			<summary>Provides support for named XAML elements and for attaching event handlers to them.</summary>
		</member>
		<member name="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)">
			<summary>Attaches events and names to compiled content. </summary>
			<param name="connectionId">The id.</param>
			<param name="target">The target.</param>
		</member>
		<member name="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
			<summary>Loads the compiled page of a componenet.</summary>
		</member>
		<member name="T:System.Windows.Markup.INameScope">
			<summary>Defines a contract for how names of elements should be accessed within a particular namescope, and how to enforce uniqueness of names within that scope. </summary>
		</member>
		<member name="M:System.Windows.Markup.INameScope.FindName(System.String)">
			<summary>Returns an object that has the provided identifying name. </summary>
			<returns>The object, if found. Returns null if no object of that name was found.</returns>
			<param name="name">The name identifier for the object being requested.</param>
		</member>
		<member name="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
			<summary>Registers the provided name into the current namescope. </summary>
			<param name="scopedElement">The specific element that the provided name refers to.</param>
			<param name="name">Name to register.</param>
		</member>
		<member name="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
			<summary>Unregisters the provided name from the current namescope. </summary>
			<param name="name">The name to unregister.</param>
		</member>
		<member name="T:System.Windows.Markup.InternalTypeHelper">
			<summary>Abstract class used internally by the XAML compiler to support the use of internal types.</summary>
		</member>
		<member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.InternalTypeHelper"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
			<summary>When overridden in a derived class, attaches an event handler delegate to an internal event.</summary>
			<param name="eventInfo">The event information. </param>
			<param name="target">The target.</param>
			<param name="handler">The event handler.</param>
		</member>
		<member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
			<summary>When overridden in a derived class, creates an event delegate on a non-public handler method.</summary>
			<returns>The new delegate.</returns>
			<param name="delegateType">The type of the delegate. </param>
			<param name="target">The target.</param>
			<param name="handler">The handler.</param>
		</member>
		<member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
			<summary>When overridden in a derived class, creates an internal Type.</summary>
			<returns>The new internal type. </returns>
			<param name="type">The type.</param>
			<param name="culture">Culture specific information. </param>
		</member>
		<member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
			<summary>When overridden in a derived class, gets the value of an internal property on the target object</summary>
			<returns>The value of the property. </returns>
			<param name="culture">Culture specific information. </param>
			<param name="target">The object the internal property is on.</param>
			<param name="propertyInfo">The property information. </param>
		</member>
		<member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
			<summary>When overridden in a derived class, sets the value on an internal property on the target object.</summary>
			<param name="culture">Culture specific information. </param>
			<param name="target">The object the internal property is on. </param>
			<param name="value">The value to set.</param>
			<param name="propertyInfo">The property information. </param>
		</member>
		<member name="T:System.Windows.Markup.IValueSerializerContext">
			<summary>Defines a context that is provided to a <see cref="T:System.Windows.Markup.ValueSerializer"></see> which can be used to specify special cases of serialization or different modes of serialization.</summary>
		</member>
		<member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
			<summary>Gets a <see cref="T:System.Windows.Markup.ValueSerializer"></see> for the given property descriptor.</summary>
			<returns>A <see cref="T:System.Windows.Markup.ValueSerializer"></see> capable of serializing the specified property.</returns>
			<param name="descriptor">The descriptor of the property being converted.</param>
		</member>
		<member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.Type)">
			<summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer"></see> associated with the specified type.</summary>
			<returns>A <see cref="T:System.Windows.Markup.ValueSerializer"></see> capable of serializing the specified type.</returns>
			<param name="type">The type of the value being converted.</param>
		</member>
		<member name="T:System.Windows.Markup.IXamlTypeResolver">
			<summary>Provides services to help resolve XAML elements to the appropriate .NET type.  </summary>
		</member>
		<member name="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)">
			<summary>When implemented in a derived class, resolves a XAML element to the corresponding type.</summary>
			<returns>The type that qualifiedTypeName represents. </returns>
			<param name="qualifiedTypeName">The fully qualified type name to resolve.</param>
		</member>
		<member name="T:System.Windows.Markup.MarkupExtension">
			<summary>Provides a base class for all XAML markup extensions.</summary>
		</member>
		<member name="M:System.Windows.Markup.MarkupExtension.#ctor">
			<summary>Initializes a new instance of a class derived from <see cref="T:System.Windows.Markup.MarkupExtension"></see>. </summary>
		</member>
		<member name="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
			<summary>When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension. </summary>
			<returns>The object value to set on the property where the extension is applied. </returns>
			<param name="serviceProvider">Object that can provide services for the markup extension.</param>
		</member>
		<member name="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute">
			<summary>Specifies the type that a markup extension can return. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute"></see>  class.</summary>
		</member>
		<member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute"></see>  class using the provided <see cref="T:System.Type"></see>.</summary>
			<param name="returnType">The return type that this  .NET Framework attribute reports.</param>
		</member>
		<member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ReturnType">
			<summary>Gets the <see cref="T:System.Windows.Markup.MarkupExtension"></see> return type that this .NET Framework attribute reports.</summary>
			<returns>The type-safe return type of the specific <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)"></see> implementation of the markup extension where the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute"></see>  .NET Framework attribute is applied.</returns>
		</member>
		<member name="T:System.Windows.Markup.RootNamespaceAttribute">
			<summary><see cref="T:System.Windows.Markup.RootNamespaceAttribute"></see> is an assembly level attribute that is used to identify the value of the RootNamespace property in a project file.</summary>
		</member>
		<member name="M:System.Windows.Markup.RootNamespaceAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.RootNamespaceAttribute"></see> class.</summary>
			<param name="nameSpace">The root namespace value.</param>
		</member>
		<member name="P:System.Windows.Markup.RootNamespaceAttribute.Namespace">
			<summary>Gets the name of the root namespace that corresponds to the value of the RootNamespace property in a project file.</summary>
			<returns>A <see cref="T:System.String"></see> value that is the name of the root namespace that corresponds to the value of the RootNamespace property in a project file.</returns>
		</member>
		<member name="T:System.Windows.Markup.RuntimeNamePropertyAttribute">
			<summary>Specifies the property of a class that maps to the XAML x:Name Attribute.  This class cannot be inherited. </summary>
		</member>
		<member name="M:System.Windows.Markup.RuntimeNamePropertyAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute"></see> class.</summary>
			<param name="name">The property to use as the id of the class.</param>
		</member>
		<member name="P:System.Windows.Markup.RuntimeNamePropertyAttribute.Name">
			<summary>The property of the class associated with this <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute"></see> that is the name of the class.</summary>
			<returns>The name of the class.</returns>
		</member>
		<member name="T:System.Windows.Markup.ServiceProviders">
			<summary>Provides an implementation for the <see cref="T:System.IServiceProvider"></see> interface with methods that enable adding services.</summary>
		</member>
		<member name="M:System.Windows.Markup.ServiceProviders.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ServiceProviders"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
			<summary>Adds a service to the list. </summary>
			<param name="service">The new service.</param>
			<param name="serviceType">Service type of the new service.</param>
			<exception cref="T:System.ArgumentNullException">service is null.</exception>
			<exception cref="T:System.ArgumentNullException">serviceType is null.</exception>
		</member>
		<member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
			<summary>Gets the service object of the specified type.</summary>
			<returns>A service object of type serviceType.  -or- null if there is no service object of type serviceType.</returns>
			<param name="serviceType">An object that specifies the type of service object to get.</param>
		</member>
		<member name="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute">
			<summary>Specifies that the whitespace surrounding an element should be trimmed.  This class cannot be inherited. </summary>
		</member>
		<member name="M:System.Windows.Markup.TrimSurroundingWhitespaceAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute"></see> class.</summary>
		</member>
		<member name="T:System.Windows.Markup.ValueSerializer">
			<summary>Abstract class to convert a type to and from a <see cref="T:System.String"></see>.</summary>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whether the specified <see cref="T:System.String"></see> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer"></see> supports.</summary>
			<returns>true if the value can be converted; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">String to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines whether the specified object can be converted into a <see cref="T:System.String"></see>.</summary>
			<returns>true if the value can be converted into a <see cref="T:System.String"></see>; otherwise, false.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to evaluate for conversion.</param>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts a <see cref="T:System.String"></see> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer"></see> supports.</summary>
			<returns>A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer"></see> supports based on the supplied value.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The string to convert.</param>
			<exception cref="T:System.NotSupportedException">value cannot be converted.</exception>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts the specified object to a <see cref="T:System.String"></see>.</summary>
			<returns>A string representation of the specified object.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The object to convert into a string.</param>
			<exception cref="T:System.NotSupportedException">value cannot be converted.</exception>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
			<summary>Returns an exception to throw when a conversion cannot be performed.</summary>
			<returns>An exception hat represents the exception to throw when a conversion cannot be performed.</returns>
			<param name="value">The object that could not be converted.</param>
			<exception cref="T:System.NotSupportedException">Automatically thrown by this method.</exception>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
			<summary>Returns an exception to throw when a conversion cannot be performed.</summary>
			<returns>An exception hat represents the exception to throw when a conversion cannot be performed.</returns>
			<param name="destinationType">A type that represents the type the conversion was trying to convert to.</param>
			<param name="value">The object that could not be converted.</param>
			<exception cref="T:System.NotSupportedException">Automatically thrown by this method.</exception>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
			<summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer"></see> declared for the specified property.</summary>
			<returns>The serializer associated with the specified property.</returns>
			<param name="descriptor">Descriptor for the property to be serialized.</param>
			<exception cref="T:System.ArgumentNullException">descriptor is null.</exception>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
			<summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer"></see> declared for the specified type.</summary>
			<returns>The serializer associated with the specified type.</returns>
			<param name="type">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer"></see> for.</param>
			<exception cref="T:System.ArgumentNullException">type is null.</exception>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
			<summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer"></see> declared for the specified property, using the specified context.</summary>
			<returns>The serializer associated with the specified property.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="descriptor">Descriptor for the property to be serialized.</param>
			<exception cref="T:System.ArgumentNullException">descriptor is null.</exception>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
			<summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer"></see> declared for the specified type, using the specified context.</summary>
			<returns>The serializer associated with the specified type.</returns>
			<param name="type">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer"></see> for.</param>
			<param name="context">Context information that is used for conversion.</param>
			<exception cref="T:System.ArgumentNullException">type is null.</exception>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Gets an enumeration of the types referenced by the <see cref="T:System.Windows.Markup.ValueSerializer"></see>.</summary>
			<returns>The types converted by this serializer.</returns>
			<param name="context">Context information that is used for conversion.</param>
			<param name="value">The value being serialized.</param>
		</member>
		<member name="T:System.Windows.Markup.ValueSerializerAttribute">
			<summary>Specifies which <see cref="T:System.Windows.Markup.ValueSerializer"></see> class to use for a particular type or overrides which <see cref="T:System.Windows.Markup.ValueSerializer"></see> to use for a property.  This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializerAttribute"></see> class, using the specified type name as the data converter for the object this attribute is bound to.</summary>
			<param name="valueSerializerTypeName">The fully qualified type name of the <see cref="T:System.Windows.Markup.ValueSerializer"></see> class to use for data conversion for the object this attribute is bound to.</param>
		</member>
		<member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializerAttribute"></see> class, using the specified type as the data converter for the object this attribute is bound to.</summary>
			<param name="valueSerializerType">A type that represents the type of the <see cref="T:System.Windows.Markup.ValueSerializer"></see> class to use for data conversion for the object this attribute is bound to.</param>
		</member>
		<member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
			<summary>Gets the type of the <see cref="T:System.Windows.Markup.ValueSerializer"></see> class to use for data conversion for the object this attribute is bound to.</summary>
			<returns>The type.</returns>
		</member>
		<member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
			<summary>Gets the assembly qualified name of the <see cref="T:System.Windows.Markup.ValueSerializer"></see> type for this type or property.</summary>
			<returns>The name of the type.</returns>
		</member>
		<member name="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute">
			<summary>Specifies that a collection considers whitespace to be significant.  This class cannot be inhertied.</summary>
		</member>
		<member name="M:System.Windows.Markup.WhitespaceSignificantCollectionAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute"></see> object.</summary>
		</member>
		<member name="T:System.Windows.Markup.XmlLangPropertyAttribute">
			<summary>Specifies the property to associate with the xml:lang Attribute.</summary>
		</member>
		<member name="M:System.Windows.Markup.XmlLangPropertyAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute"></see> class.</summary>
			<param name="name">The property to associate with the xml:lang Attribute.</param>
		</member>
		<member name="P:System.Windows.Markup.XmlLangPropertyAttribute.Name">
			<summary>Gets name of the property that is associated with the xml:lang Attribute.</summary>
			<returns>The name of the property. </returns>
		</member>
		<member name="T:System.Windows.Markup.XmlnsCompatibleWithAttribute">
			<summary>Specifies that the namespace in a previously defined <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute"></see> is overridden by a new namespace. </summary>
		</member>
		<member name="M:System.Windows.Markup.XmlnsCompatibleWithAttribute.#ctor(System.String,System.String)">
			<summary>Initializes a new of the <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute"></see> class.</summary>
			<param name="oldNamespace">The old XML namespace.</param>
			<param name="newNamespace">The new XML namespace.</param>
			<exception cref="T:System.ArgumentNullException">oldNamespace is null</exception>
			<exception cref="T:System.ArgumentNullException">newNamespace is null.</exception>
		</member>
		<member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.NewNamespace">
			<summary>Gets the new XML namespace to apply to the <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute"></see>.</summary>
			<returns>The namespace.</returns>
		</member>
		<member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.OldNamespace">
			<summary>Gets the old XML namespace associated with the <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute"></see>.</summary>
			<returns>The namespace.</returns>
		</member>
		<member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
			<summary>Specifies a mapping in an assembly between an XML namespace and a CLR namespace.  This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute"></see> class.</summary>
			<param name="xmlNamespace">The XML namespace.</param>
			<param name="clrNamespace">The CLR namespace.</param>
		</member>
		<member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
			<summary>Gets the name of the Assembly that contains the <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace"></see>. </summary>
			<returns>The assembly name.</returns>
		</member>
		<member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
			<summary>Gets the CLR namespace which is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace"></see>. </summary>
			<returns>The namespace.</returns>
		</member>
		<member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
			<summary>Gets the XML namespace which is mapped to <see cref="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace"></see>. </summary>
			<returns>The namespace.</returns>
		</member>
		<member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
			<summary>Specifies a recommend prefix to associate with an XML namespace when writing elements and attributes in a XAML file.  This class cannot be inherited.  </summary>
		</member>
		<member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute"></see> class.</summary>
			<param name="xmlNamespace">The namespace.</param>
			<param name="prefix">The recommended prefix.  </param>
			<exception cref="T:System.ArgumentNullException">prefix is null.</exception>
			<exception cref="T:System.ArgumentNullException">xmlNamespace is null.</exception>
		</member>
		<member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
			<summary>Gets the recommended prefix to associate with the XML namespace.</summary>
			<returns>The prefix.</returns>
		</member>
		<member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
			<summary>Gets the XML namespace.</summary>
			<returns>The namespace. </returns>
		</member>
		<member name="N:System.Windows.Markup.Primitives">
			<summary>Provides class to support Extensible Application Markup Language (XAML) in Windows Presentation Foundation (WPF).</summary>
		</member>
		<member name="T:System.Windows.Markup.Primitives.MarkupObject">
			<summary>Abstract class that represents an object that can be used used to navigate a tree of objects.</summary>
		</member>
		<member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
			<summary>When overridden in a derived class, assigns a root context for <see cref="T:System.Windows.Markup.ValueSerializer"></see> classes.</summary>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
			<summary>When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupObject"></see>.  </summary>
			<returns>The collection of attributes. </returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
			<summary>When overridden in a derived class, gets the instance of the object represented by this <see cref="T:System.Windows.Markup.Primitives.MarkupObject"></see>.</summary>
			<returns>The instance of the object</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
			<summary>When overridden in a derived class, gets the type of the <see cref="T:System.Windows.Markup.Primitives.MarkupObject"></see> instance.</summary>
			<returns>The type of the object. </returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
			<summary>When overridden in a derived class, gets the properties of this <see cref="T:System.Windows.Markup.Primitives.MarkupObject"></see> instance that should be written to T.</summary>
			<returns>The properties.  </returns>
		</member>
		<member name="T:System.Windows.Markup.Primitives.MarkupProperty">
			<summary>Abstract class that provides a property description to be used while writing to markup which encapsulates access to properties and their values. </summary>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
			<summary>When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty"></see>.</summary>
			<returns>The collection of attributes.</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
			<summary>When overridden in a derived class, gets the <see cref="T:System.Windows.DependencyProperty"></see> for the markup property if the property is backed by a <see cref="T:System.Windows.DependencyProperty"></see>.</summary>
			<returns>The dependency property.</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
			<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty"></see> is an attached <see cref="T:System.Windows.DependencyProperty"></see>. </summary>
			<returns>true if the property is an attached <see cref="T:System.Windows.DependencyProperty"></see>; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
			<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty"></see> is a composite property. </summary>
			<returns>true is this property is a composite property; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
			<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty"></see> represents a constructor argument.</summary>
			<returns>true if this property represents a constructor</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
			<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty"></see> represents direct content of a collection.</summary>
			<returns>true if the property represents direct content; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
			<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty"></see> represents the key used by the <see cref="T:System.Windows.Markup.Primitives.MarkupObject"></see> to store the item in a dictionary.</summary>
			<returns>true if this property represents a key; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
			<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty"></see> represents text which is passed to a type converter to create an instance of the property or if a constructor should be used.</summary>
			<returns>true, if this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty"></see> represents a string; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
			<summary>When overridden in a derived class, gets the items that make up the value of this property. </summary>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
			<summary>When overridden in a derived class, gets a name that is used for diagnostics and error reporting. </summary>
			<returns>The name.</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
			<summary>When overridden in a derived class, gets the <see cref="T:System.ComponentModel.PropertyDescriptor"></see> for the markup property. </summary>
			<returns>The property descriptor. </returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
			<summary>When overridden in a derived class, gets type of the property.</summary>
			<returns>The type.</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
			<summary>When overridden in a derived class, gets the string value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty"></see>.</summary>
			<returns>The string value.</returns>
		</member>
		<member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
			<summary>When overridden in a derived class, gets the list of types that this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty"></see> will reference when it serializes its value as a string.</summary>
			<returns>The types.</returns>
		</member>
		<member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
			<summary>Allows WPF applications to disable dots per inch (dpi) awareness for all user interface elements.</summary>
		</member>
		<member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute"></see>.</summary>
		</member>
		<member name="T:System.Windows.Media.Matrix">
			<summary> Represents a 3x3 affine transformation matrix used for transformations in 2-D space. </summary>
		</member>
		<member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
			<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<param name="m12">The new <see cref="T:System.Windows.Media.Matrix"></see> structure's M12 coefficient.</param>
			<param name="m11">The new <see cref="T:System.Windows.Media.Matrix"></see> structure's M11 coefficient.</param>
			<param name="m21">The new <see cref="T:System.Windows.Media.Matrix"></see> structure's M21 coefficient.</param>
			<param name="offsetX">The new <see cref="T:System.Windows.Media.Matrix"></see> structure's OffsetX coefficient.</param>
			<param name="m22">The new <see cref="T:System.Windows.Media.Matrix"></see> structure's M22 coefficient.</param>
			<param name="offsetY">The new <see cref="T:System.Windows.Media.Matrix"></see> structure's OffsetY coefficient.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
			<summary> Appends the specified <see cref="T:System.Windows.Media.Matrix"></see> structure to this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<param name="matrix">The <see cref="T:System.Windows.Media.Matrix"></see> structure to append to this <see cref="T:System.Windows.Media.Matrix"></see> structure.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
			<summary> Determines whether the specified <see cref="T:System.Windows.Media.Matrix"></see> structure is identical to this instance. </summary>
			<returns>true if instances are equal; otherwise, false. </returns>
			<param name="value">The instance of <see cref="T:System.Windows.Media.Matrix"></see> to compare to this instance.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
			<summary> Determines whether the specified Object is a <see cref="T:System.Windows.Media.Matrix"></see> structure that is identical to this <see cref="T:System.Windows.Media.Matrix"></see>. </summary>
			<returns>true if o is a <see cref="T:System.Windows.Media.Matrix"></see> structure that is identical to this <see cref="T:System.Windows.Media.Matrix"></see> structure; otherwise, false.</returns>
			<param name="o">The Object to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
			<summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix"></see> structures are identical.</summary>
			<returns>true if matrix1 and matrix2 are identical; otherwise, false.</returns>
			<param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix"></see> structure to compare.</param>
			<param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix"></see> structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.GetHashCode">
			<summary> Returns the hash code for this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<returns>The hash code for this instance.</returns>
		</member>
		<member name="M:System.Windows.Media.Matrix.Invert">
			<summary> Inverts this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Matrix"></see> structure is not invertible.</exception>
		</member>
		<member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
			<summary> Multiplies a <see cref="T:System.Windows.Media.Matrix"></see> structure by another <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<returns>The result of multiplying trans1 by trans2.</returns>
			<param name="trans1">The first <see cref="T:System.Windows.Media.Matrix"></see> structure to multiply.</param>
			<param name="trans2">The second <see cref="T:System.Windows.Media.Matrix"></see> structure to multiply.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
			<summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix"></see> structures are identical.</summary>
			<returns>true if matrix1 and matrix2 are identical; otherwise, false.</returns>
			<param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix"></see> structure to compare.</param>
			<param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix"></see> structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
			<summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix"></see> structures are not identical.</summary>
			<returns>true if matrix1 and matrix2 are not identical; otherwise, false.</returns>
			<param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix"></see> structure to compare.</param>
			<param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix"></see> structure to compare.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
			<summary> Multiplies a <see cref="T:System.Windows.Media.Matrix"></see> structure by another <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<returns>The result of multiplying trans1 by trans2.</returns>
			<param name="trans1">The first <see cref="T:System.Windows.Media.Matrix"></see> structure to multiply.</param>
			<param name="trans2">The second <see cref="T:System.Windows.Media.Matrix"></see> structure to multiply.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Parse(System.String)">
			<summary> Converts a String representation of a matrix into the equivalent <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<returns>The equivalent <see cref="T:System.Windows.Media.Matrix"></see> structure.</returns>
			<param name="source">The String representation of the matrix.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
			<summary> Prepends the specified <see cref="T:System.Windows.Media.Matrix"></see> structure onto this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<param name="matrix">The <see cref="T:System.Windows.Media.Matrix"></see> structure to prepend to this <see cref="T:System.Windows.Media.Matrix"></see> structure.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
			<summary> Applies a rotation of the specified angle about the origin of this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<param name="angle">The angle of rotation.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
			<summary>Rotates this matrix about the specified point.</summary>
			<param name="angle">The angle, in degrees, by which to rotate this matrix. </param>
			<param name="centerY">The y-coordinate of the point about which to rotate this matrix.</param>
			<param name="centerX">The x-coordinate of the point about which to rotate this matrix.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
			<summary>Prepends a rotation of the specified angle at the specified point to this <see cref="T:System.Windows.Media.Matrix"></see> structure.</summary>
			<param name="angle">The rotation angle, in degrees.</param>
			<param name="centerY">The y-coordinate of the rotation center.</param>
			<param name="centerX">The x-coordinate of the rotation center.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
			<summary> Prepends a rotation of the specified angle to this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<param name="angle">The angle of rotation to prepend.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
			<summary> Appends the specified scale vector to this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<param name="scaleX">The value by which to scale this <see cref="T:System.Windows.Media.Matrix"></see> along the x-axis.</param>
			<param name="scaleY">The value by which to scale this <see cref="T:System.Windows.Media.Matrix"></see> along the y-axis.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
			<summary>Scales this <see cref="T:System.Windows.Media.Matrix"></see> by the specified amount about the specified point.</summary>
			<param name="scaleX">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix"></see> along the x-axis. </param>
			<param name="scaleY">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix"></see> along the y-axis.</param>
			<param name="centerY">The y-coordinate of the scale operation's center point.</param>
			<param name="centerX">The x-coordinate of the scale operation's center point.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
			<summary>Prepends the specified scale about the specified point of this <see cref="T:System.Windows.Media.Matrix"></see>.</summary>
			<param name="scaleX">The x-axis scale factor.</param>
			<param name="scaleY">The y-axis scale factor.</param>
			<param name="centerY">The y-coordinate of the point about which the scale operation is performed.</param>
			<param name="centerX">The x-coordinate of the point about which the scale operation is performed.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
			<summary> Prepends the specified scale vector to this Matrix structure. </summary>
			<param name="scaleX">The value by which to scale this Matrix structure along the x-axis.</param>
			<param name="scaleY">The value by which to scale this Matrix structure along the y-axis.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
			<summary> Appends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix"></see>.</param>
			<param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
			<summary> Prepends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix"></see>.</param>
			<param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.ToString">
			<summary> Creates a String representation of this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<returns>A String containing the M11, M12, M21, M22, OffsetX, and OffsetY values of this <see cref="T:System.Windows.Media.Matrix"></see>.</returns>
		</member>
		<member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
			<summary> Creates a String representation of this <see cref="T:System.Windows.Media.Matrix"></see> structure with culture-specific formatting information. </summary>
			<returns>A String containing the M11, M12, M21, M22, OffsetX, and OffsetY values of this Matrix.</returns>
			<param name="provider">The culture-specific formatting information.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
			<summary>Transforms the specified point by the <see cref="T:System.Windows.Media.Matrix"></see> and returns the result.</summary>
			<returns>The result of transforming point by this <see cref="T:System.Windows.Media.Matrix"></see>.</returns>
			<param name="point">The point to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
			<summary>Transforms the specified points by this <see cref="T:System.Windows.Media.Matrix"></see>. </summary>
			<param name="points">The points to transform. The original points in the array are replaced by their transformed values.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
			<summary>Transforms the specified vector by this <see cref="T:System.Windows.Media.Matrix"></see>.</summary>
			<returns>The result of transforming vector by this <see cref="T:System.Windows.Media.Matrix"></see>.</returns>
			<param name="vector">The vector to transform.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
			<summary>Transforms the specified vectors by this <see cref="T:System.Windows.Media.Matrix"></see>.</summary>
			<param name="vectors">The vectors to transform. The original vectors in the array are replaced by their transformed values.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
			<summary> Appends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix"></see> along the y-axis.</param>
			<param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix"></see> along the x-axis.</param>
		</member>
		<member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
			<summary> Prepends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix"></see> along the y-axis.</param>
			<param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix"></see> along the x-axis.</param>
		</member>
		<member name="P:System.Windows.Media.Matrix.Determinant">
			<summary> Gets the determinant of this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<returns>The determinant of this <see cref="T:System.Windows.Media.Matrix"></see>.</returns>
		</member>
		<member name="P:System.Windows.Media.Matrix.HasInverse">
			<summary> Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix"></see> structure is invertible. </summary>
			<returns>true if the <see cref="T:System.Windows.Media.Matrix"></see> has an inverse; otherwise, false. The default is true.</returns>
		</member>
		<member name="P:System.Windows.Media.Matrix.Identity">
			<summary> Gets an identity <see cref="T:System.Windows.Media.Matrix"></see>. </summary>
			<returns>An identity matrix.</returns>
		</member>
		<member name="P:System.Windows.Media.Matrix.IsIdentity">
			<summary> Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix"></see> structure is an identity matrix. </summary>
			<returns>true if the <see cref="T:System.Windows.Media.Matrix"></see> structure is an identity matrix; otherwise, false. The default is true.</returns>
		</member>
		<member name="P:System.Windows.Media.Matrix.M11">
			<summary>Gets or sets the value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<returns>The value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix"></see>. The default value is 1.</returns>
		</member>
		<member name="P:System.Windows.Media.Matrix.M12">
			<summary> Gets or sets the value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<returns>The value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix"></see>. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Matrix.M21">
			<summary> Gets or sets the value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix"></see> structure.</summary>
			<returns>The value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix"></see>. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Matrix.M22">
			<summary>Gets or sets the value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<returns>The value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix"></see> structure. The default value is 1.</returns>
		</member>
		<member name="P:System.Windows.Media.Matrix.OffsetX">
			<summary>Gets or sets the value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix"></see> structure.  </summary>
			<returns>The value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix"></see> structure. The default value is 0.</returns>
		</member>
		<member name="P:System.Windows.Media.Matrix.OffsetY">
			<summary>Gets or sets the value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix"></see> structure. </summary>
			<returns>The value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix"></see> structure. The default value is 0.</returns>
		</member>
		<member name="T:System.Windows.Media.MatrixConverter">
			<summary>Converts instances of other types to and from a Matrix. </summary>
		</member>
		<member name="M:System.Windows.Media.MatrixConverter.#ctor">
			<summary>Initializes a new instance of <see cref="T:System.Windows.Media.MatrixConverter"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an object can be converted from a specific type to an instance of a Matrix.  </summary>
			<returns>true if the type can be converted to a Matrix; otherwise, false.</returns>
			<param name="context">The context information of a type.</param>
			<param name="sourceType">The type of the source that is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
			<summary>Determines whether an instance of a Matrix can be converted to a different type. </summary>
			<returns>true if this Matrix can be converted to destinationType; otherwise, false.</returns>
			<param name="context">The context information of a type.</param>
			<param name="destinationType">The desired type this Matrix is being evaluated for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
			<summary>Attempts to convert the specified object to a Matrix. </summary>
			<returns>The Matrix created from converting value.</returns>
			<param name="culture">The CultureInfo of the type being converted.</param>
			<param name="context">The context information of a type.</param>
			<param name="value">The object being converted.</param>
			<exception cref="T:System.NotSupportedException">The specified object is null or is a type that cannot be converted to a Matrix.</exception>
		</member>
		<member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
			<summary>Attempts to convert a Matrix to a specified type. </summary>
			<returns>The object created from converting this Matrix.</returns>
			<param name="culture">The CultureInfo of the type being converted.</param>
			<param name="context">The context information of a type.</param>
			<param name="destinationType">The type to convert this Matrix to.</param>
			<param name="value">The Matrix to convert.</param>
			<exception cref="T:System.NotSupportedException">The value is null or is not a Matrix, or the destinationType is not a valid conversion type.</exception>
		</member>
		<member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
			<summary>Converts instances of <see cref="T:System.String"></see> to and from instances of <see cref="T:System.Windows.Media.Matrix"></see>.</summary>
		</member>
		<member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines if conversion from a given <see cref="T:System.String"></see> to an instance of <see cref="T:System.Windows.Media.Matrix"></see> is possible.</summary>
			<returns>true if the value can be converted; otherwise, false.</returns>
			<param name="value">String to evaluate for conversion.</param>
			<param name="contex t">Context information used for conversion.</param>
		</member>
		<member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Determines if an instance of <see cref="T:System.Windows.Media.Matrix"></see> can be converted to a <see cref="T:System.String"></see>.</summary>
			<returns>true if value can be converted into a <see cref="T:System.String"></see>; otherwise, false.</returns>
			<param name="context">Context information used for conversion.</param>
			<param name="value">Instance of <see cref="T:System.Windows.Media.Matrix"></see> to evaluate for conversion.</param>
			<exception cref="T:System.ArgumentException">Occurs when value is not a <see cref="T:System.Windows.Media.Int32Collection"></see>.</exception>
		</member>
		<member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts a <see cref="T:System.String"></see> into a <see cref="T:System.Windows.Media.Matrix"></see>.</summary>
			<returns>A new instance of <see cref="T:System.Windows.Media.Matrix"></see> based on the supplied value.</returns>
			<param name="context">Context information used for conversion.</param>
			<param name="value"><see cref="T:System.String"></see> value to convert into a <see cref="T:System.Windows.Media.Matrix"></see>.</param>
		</member>
		<member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
			<summary>Converts an instance of <see cref="T:System.Windows.Media.Matrix"></see> to a <see cref="T:System.String"></see>.</summary>
			<returns>A <see cref="T:System.String"></see> representation of the supplied <see cref="T:System.Windows.Media.Matrix"></see> object.</returns>
			<param name="context">Context information used for conversion.</param>
			<param name="value">Instance of <see cref="T:System.Windows.Media.Matrix"></see> to evaluate for conversion.</param>
		</member>
		<member name="N:System.Windows.Threading">
			<summary>Provides classes to support Windows Presentation Foundation (WPF) threading system.</summary>
		</member>
		<member name="T:System.Windows.Threading.Dispatcher">
			<summary>Provides services for managing the queue of work items for a thread.  This class cannot be inherited.</summary>
		</member>
		<member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
			<summary>Occurs when the <see cref="T:System.Windows.Threading.Dispatcher"></see> finishes shutting down. </summary>
		</member>
		<member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
			<summary>Occurs when the <see cref="T:System.Windows.Threading.Dispatcher"></see> beings to shut down. </summary>
		</member>
		<member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
			<summary>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke"></see> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke"></see>.</summary>
		</member>
		<member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
			<summary>Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke"></see> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke"></see> when in the filter stage. </summary>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
			<summary>Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher"></see> is associated with.</summary>
			<returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke"></see> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
			<param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue, the specified method is invoked.</param>
			<param name="method">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue.</param>
			<exception cref="T:System.ArgumentNullException">method is null. </exception>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">priority is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority"></see>.</exception>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
			<summary>Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher"></see> is associated with.</summary>
			<returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke"></see> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
			<param name="arg">The object to pass as an argument to the specified method.</param>
			<param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue, the specified method is invoked.</param>
			<param name="method">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue.</param>
			<exception cref="T:System.ArgumentNullException">method is null. </exception>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">priority is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority"></see>.</exception>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
			<summary>Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher"></see> is associated with.</summary>
			<returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke"></see> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher"></see> queue.</returns>
			<param name="arg">The object to pass as an argument to the specified method.</param>
			<param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue, the specified method is invoked.</param>
			<param name="args">An array of objects to pass as arguments to the specified method.</param>
			<param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue.</param>
			<exception cref="T:System.ArgumentNullException">method is null. </exception>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T:System.Windows.Threading.DispatcherPriority"></see> is not a valid priority.</exception>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
			<summary>Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher"></see> asynchronously. </summary>
			<param name="priority">The priority at which to begin shutting down the dispatcher.</param>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
			<summary>Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher"></see>. </summary>
			<returns>true if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher"></see>; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
			<summary>Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher"></see> queue.</summary>
			<returns>A structure used to re-enable dispatcher processing.</returns>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
			<summary>Requests that all frames exit, including nested frames.</summary>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
			<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher"></see> for the specified thread. </summary>
			<returns>The dispatcher for thread.</returns>
			<param name="thread">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher"></see> from.</param>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
			<summary>Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher"></see> is associated with. </summary>
			<returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
			<param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue, the specified method is invoked.</param>
			<param name="method">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue.</param>
			<exception cref="T:System.ArgumentException">priority is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive"></see>.</exception>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">priority is not a valid priority.</exception>
			<exception cref="T:System.ArgumentNullException">method is null. </exception>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
			<summary>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher"></see> is associated with.</summary>
			<returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
			<param name="arg">An object to pass as an argument to the given method.</param>
			<param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue, the specified method is invoked.</param>
			<param name="method">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue.</param>
			<exception cref="T:System.ArgumentException">priority is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive"></see>.</exception>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">priority is not a valid priority.</exception>
			<exception cref="T:System.ArgumentNullException">method is null. </exception>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
			<summary>Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher"></see> was created.</summary>
			<returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
			<param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue, the specified method is invoked.</param>
			<param name="timeout">The maximum time to wait for the operation to finish.</param>
			<param name="method">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue.</param>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
			<summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher"></see> is associated with.</summary>
			<returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
			<param name="arg">An object to pass as an argument to the given method.</param>
			<param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue, the specified method is invoked.</param>
			<param name="args">An array of objects to pass as arguments to the given method.</param>
			<param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue.</param>
			<exception cref="T:System.ArgumentException">priority is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive"></see>.</exception>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">priority is not a valid priority.</exception>
			<exception cref="T:System.ArgumentNullException">method is null. </exception>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
			<summary>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher"></see> is associated with.</summary>
			<returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
			<param name="arg">An object to pass as an argument to the given method. This can be null if no arguments are needed.</param>
			<param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue, the specified method is invoked.</param>
			<param name="timeout">The maximum time to wait for the operation to finish.</param>
			<param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue.</param>
			<exception cref="T:System.ArgumentException">priority is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive"></see>.</exception>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">priority is not a valid priority.</exception>
			<exception cref="T:System.ArgumentNullException">method is null. </exception>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
			<summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher"></see> is associated with.</summary>
			<returns>The return value from the delegate being invoked or null if the delegate has no return value.</returns>
			<param name="arg">An object to pass as an argument to the specified method.</param>
			<param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue, the specified method is invoked.</param>
			<param name="timeout">The maximum time to wait for the operation to finish.</param>
			<param name="args">An array of objects to pass as arguments to the specified method. </param>
			<param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher"></see> event queue.</param>
			<exception cref="T:System.ArgumentException">priority is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive"></see>.</exception>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">priority is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority"></see>.</exception>
			<exception cref="T:System.ArgumentNullException">method is null. </exception>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
			<summary>Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher"></see> synchronously.</summary>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
			<summary>Enters an execute loop.</summary>
			<param name="frame">The frame for the dispatcher to process.</param>
			<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished"></see> is true-or-frame is running on a different <see cref="T:System.Windows.Threading.Dispatcher"></see>.-or-Dispatcher processing has been disabled.</exception>
			<exception cref="T:System.ArgumentNullException">frame is null.</exception>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.Run">
			<summary>Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher"></see>. </summary>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
			<summary>Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority"></see> is a valid priority. </summary>
			<param name="priority">The priority to check.</param>
			<param name="parameterName">A string that will be returned by the exception that occurs if the priority is invalid.</param>
			<exception cref="T:System.ComponentModel.InvalidEnumArgumentException">priority is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority"></see>.</exception>
		</member>
		<member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
			<summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher"></see>. </summary>
			<exception cref="T:System.InvalidOperationException">the calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher"></see>.</exception>
		</member>
		<member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
			<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher"></see> for the thread currently executing and creates a new Dispatcher if one is not already associated with the thread. </summary>
			<returns>The dispatcher associated with the current thread.</returns>
		</member>
		<member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
			<summary>Determines whether the <see cref="T:System.Windows.Threading.Dispatcher"></see> has finished shutting down.</summary>
			<returns>true if the dispatcher has finished shutting down; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
			<summary>Determines whether the <see cref="T:System.Windows.Threading.Dispatcher"></see> is shutting down. </summary>
			<returns>true if the <see cref="T:System.Windows.Threading.Dispatcher"></see> has started shutting down; otherwise, false.</returns>
		</member>
		<member name="P:System.Windows.Threading.Dispatcher.Hooks">
			<summary>Gets the collection of hooks which provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher"></see>. </summary>
			<returns>The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher"></see>. </returns>
		</member>
		<member name="P:System.Windows.Threading.Dispatcher.Thread">
			<summary>Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher"></see> is associated with.</summary>
			<returns>The thread.</returns>
		</member>
		<member name="T:System.Windows.Threading.DispatcherEventArgs">
			<summary>Provides event data for <see cref="T:System.Windows.Threading.Dispatcher"></see> related events. </summary>
		</member>
		<member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
			<summary>The <see cref="T:System.Windows.Threading.Dispatcher"></see> associated with this event. </summary>
			<returns>The dispatcher.</returns>
		</member>
		<member name="T:System.Windows.Threading.DispatcherFrame">
			<summary>Represents an execution loop in the <see cref="T:System.Windows.Threading.Dispatcher"></see>. </summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherFrame"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherFrame"></see> class, by using the specified exit request flag.</summary>
			<param name="exitWhenRequested">Indicates whether this frame will exit when all frames are requested to exit.</param>
		</member>
		<member name="P:System.Windows.Threading.DispatcherFrame.Continue">
			<summary>Gets or sets a value that indicates whether this <see cref="T:System.Windows.Threading.DispatcherFrame"></see> should continue.</summary>
			<returns>true if the frame should continue; otherwise, false.  The default value is true.</returns>
		</member>
		<member name="T:System.Windows.Threading.DispatcherHookEventArgs">
			<summary>Provides event data for <see cref="T:System.Windows.Threading.DispatcherHooks"></see> events.  This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherHookEventArgs"></see> class. </summary>
			<param name="operation">The operation associated with the event.</param>
		</member>
		<member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
			<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher"></see> associated with this event. </summary>
			<returns>The <see cref="T:System.Windows.Threading.Dispatcher"></see>.</returns>
		</member>
		<member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
			<summary>Gets the <see cref="T:System.Windows.Threading.DispatcherOperation"></see> associated with this event. </summary>
			<returns>The operation.</returns>
		</member>
		<member name="T:System.Windows.Threading.DispatcherHookEventHandler">
			<summary>Represents the method that will handle <see cref="T:System.Windows.Threading.DispatcherHooks"></see> related events. </summary>
		</member>
		<member name="T:System.Windows.Threading.DispatcherHooks">
			<summary>Provides additional event information about <see cref="T:System.Windows.Threading.Dispatcher"></see> processing.</summary>
		</member>
		<member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
			<summary>Occurs when the dispatcher has no more operations to process. </summary>
		</member>
		<member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
			<summary>Occurs when an operation is aborted. </summary>
		</member>
		<member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
			<summary>Occurs when an operation completes. </summary>
		</member>
		<member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
			<summary>Occurs when an operation is posted to the dispatcher. </summary>
		</member>
		<member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
			<summary>Occurs when the priority of an operation is changed. </summary>
		</member>
		<member name="T:System.Windows.Threading.DispatcherObject">
			<summary>Represents an object that is associated with a <see cref="T:System.Windows.Threading.Dispatcher"></see>. </summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherObject.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherObject"></see> class. </summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
			<summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject"></see>.</summary>
			<returns>true if the calling thread has access to this object; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
			<summary>Enforces that the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject"></see>.</summary>
			<exception cref="T:System.InvalidOperationException">the calling thread does not have access to this <see cref="T:System.Windows.Threading.DispatcherObject"></see>.</exception>
		</member>
		<member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
			<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher"></see> this <see cref="T:System.Windows.Threading.DispatcherObject"></see> is associated with. </summary>
			<returns>The dispatcher.</returns>
		</member>
		<member name="T:System.Windows.Threading.DispatcherOperation">
			<summary>Represents an object that is used to interact with an operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher"></see> queue.  This class cannot be inherited.</summary>
		</member>
		<member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
			<summary>Occurs when the operation is aborted.</summary>
		</member>
		<member name="E:System.Windows.Threading.DispatcherOperation.Completed">
			<summary>Occurs when the operation has completed. </summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherOperation.Abort">
			<summary>Aborts the operation. </summary>
			<returns>true if the operation was aborted; otherwise, false.</returns>
		</member>
		<member name="M:System.Windows.Threading.DispatcherOperation.Wait">
			<summary>Waits for the operation to complete</summary>
			<returns>The status of the operation. </returns>
			<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.DispatcherOperation.Status"></see> is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing"></see>.  This can occur when waiting for an operation that is already executing on the same thread.</exception>
		</member>
		<member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
			<summary>Waits for the operation to complete in the specified period of time.</summary>
			<returns>The status of the operation. </returns>
			<param name="timeout">The maximum period of time to wait.</param>
			<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.DispatcherOperation.Status"></see> is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing"></see>.  This can occur when waiting for an operation that is already executing on the same thread.</exception>
		</member>
		<member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
			<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher"></see> that the operation was posted to. </summary>
			<returns>The dispatcher.</returns>
		</member>
		<member name="P:System.Windows.Threading.DispatcherOperation.Priority">
			<summary>Gets or sets the priority of the operation in the <see cref="T:System.Windows.Threading.Dispatcher"></see> queue. </summary>
			<returns>The priority of the delegate on the queue.</returns>
		</member>
		<member name="P:System.Windows.Threading.DispatcherOperation.Result">
			<summary>Gets the result of the operation after it has completed. </summary>
			<returns>The result of the operation -or- null if the operation has not completed. </returns>
		</member>
		<member name="P:System.Windows.Threading.DispatcherOperation.Status">
			<summary>Gets the current status of the operation..</summary>
			<returns>The status of the operation.</returns>
		</member>
		<member name="T:System.Windows.Threading.DispatcherOperationCallback">
			<summary>Represents a delegate to use for dispatcher operations.</summary>
			<returns>The object returned by the callback.</returns>
		</member>
		<member name="T:System.Windows.Threading.DispatcherOperationStatus">
			<summary>Describes the possible values for the status of a <see cref="T:System.Windows.Threading.DispatcherOperation"></see>. </summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
			<summary>The operation has aborted. </summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
			<summary>The operation is completed. </summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
			<summary>The operation started executing, but has not completed. </summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
			<summary>The operation is pending and is still in the <see cref="T:System.Windows.Threading.Dispatcher"></see> queue.</summary>
		</member>
		<member name="T:System.Windows.Threading.DispatcherPriority">
			<summary>Describes the priorities at which operations can be invoked by way of the <see cref="T:System.Windows.Threading.Dispatcher"></see>. </summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
			<summary>The enumeration value is 2.  Operations are processed when the application is idle. </summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.Background">
			<summary>The enumeration value is 4.  Operations are processed after all other non-idle operations are completed.</summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
			<summary>The enumeration value is 3.  Operations are processed after background operations have completed.</summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
			<summary>The enumeration value is 8.  Operations are processed at the same priority as data binding.</summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
			<summary>The enumeration value is 0.  Operations are not processed.</summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.Input">
			<summary>The enumeration value is 5.  Operations are processed at the same priority as input.</summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
			<summary>The enumeration value is -1.  This is an invalid priority.</summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
			<summary>The enumeration value is 6.  Operations are processed when layout and render has finished but just before items at input priority are serviced. Specifically this is used when raising the Loaded event.</summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.Normal">
			<summary>The enumeration value is 9.  Operations are processed at normal priority.  This is the typical application priority.</summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.Render">
			<summary>The enumeration value is 7.  Operations processed at the same priority as rendering.</summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.Send">
			<summary>The enumeration value is 10.  Operations are processed before other asynchronous operations.  This is the highest priority. </summary>
		</member>
		<member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
			<summary>The enumeration value is 1.  Operations are processed when the system is idle.</summary>
		</member>
		<member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
			<summary>Represents the Dispatcher when it is in a disable state and provides a means to re-enable dispatcher processing. </summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
			<summary>Re-enables dispatcher processing.</summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
			<summary>Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled"></see> object is equal to this <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled"></see> object.</summary>
			<returns>true if the specified object is equal to this <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled"></see> object; otherwise, false.</returns>
			<param name="obj">The object to evaluate for equality.</param>
		</member>
		<member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
			<summary>Gets a hash code for this instance. </summary>
			<returns>A signed 32-bit integer hash code.</returns>
		</member>
		<member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
			<summary>Determines whether two <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled"></see> objects are equal.</summary>
			<returns>true if the <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled"></see> objects are equal; otherwise, false.</returns>
			<param name="right">The second object to compare.</param>
			<param name="left">The first object to compare.</param>
		</member>
		<member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
			<summary>Determines whether two <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled"></see> objects are not equal.</summary>
			<returns>true if the <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled"></see> objects are not equal; otherwise, false.</returns>
			<param name="right">The second object to compare.</param>
			<param name="left">The first object to compare.</param>
		</member>
		<member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
			<summary>Provides a synchronization context for Windows Presentation Foundation (WPF). This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext"></see> class by using the current <see cref="T:System.Windows.Threading.Dispatcher"></see>.</summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext"></see> class by using the specified <see cref="T:System.Windows.Threading.Dispatcher"></see>.</summary>
			<param name="dispatcher">The <see cref="T:System.Windows.Threading.Dispatcher"></see> to associate this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext"></see> with.</param>
			<exception cref="T:System.ArgumentNullException">dispatcher is null.</exception>
		</member>
		<member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
			<summary>Creates a copy of this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext"></see>. </summary>
			<returns>The copy of this synchronization context.</returns>
		</member>
		<member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
			<summary>Invokes the callback in the synchronization context asynchronously. </summary>
			<param name="d">The delegate to call.</param>
			<param name="state">The object passed to the delegate.</param>
			<exception cref="T:System.ArgumentNullException">d is null.</exception>
		</member>
		<member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
			<summary>Invokes the callback in the synchronization context synchronously.</summary>
			<param name="d">The delegate to call.</param>
			<param name="state">The object passed to the delegate.</param>
			<exception cref="T:System.ArgumentNullException">d is null.</exception>
		</member>
		<member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
			<summary>Waits for any or all the elements in the specified array to receive a signal.</summary>
			<returns>The array index of the object that satisfied the wait.</returns>
			<param name="waitAll">true to wait for all handles; false to wait for any handle.</param>
			<param name="waitHandles">An array that contains the native operating system handles.</param>
			<param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"></see> (-1) to wait indefinitely.</param>
		</member>
		<member name="T:System.Windows.Threading.DispatcherTimer">
			<summary>A timer that is integrated into the <see cref="T:System.Windows.Threading.Dispatcher"></see> queue which is processed at a specified interval of time and at a specified priority. </summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer"></see> class.</summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer"></see> class which processes timer events at the specified priority.</summary>
			<param name="priority">The priority at which to invoke the timer.</param>
		</member>
		<member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer"></see> class which runs on the specified <see cref="T:System.Windows.Threading.Dispatcher"></see> at the specified priority.</summary>
			<param name="priority">The priority at which to invoke the timer.</param>
			<param name="dispatcher">The dispatcher the timer is associated with.</param>
			<exception cref="T:System.ArgumentNullException">dispatcher is null.</exception>
		</member>
		<member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
			<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer"></see> class which uses the specified time interval, priority, event handler, and <see cref="T:System.Windows.Threading.Dispatcher"></see>.</summary>
			<param name="interval">The period of time between ticks.</param>
			<param name="callback">The event handler to call when the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick"></see> event occurs.</param>
			<param name="priority">The priority at which to invoke the timer.</param>
			<param name="dispatcher">The dispatcher the timer is associated with.</param>
			<exception cref="T:System.ArgumentNullException">dispatcher is null.</exception>
			<exception cref="T:System.ArgumentNullException">callback is null.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">interval is less than zero or greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
		</member>
		<member name="E:System.Windows.Threading.DispatcherTimer.Tick">
			<summary>Occurs when the timer interval has elapsed. </summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherTimer.Start">
			<summary>Starts the <see cref="T:System.Windows.Threading.DispatcherTimer"></see>. </summary>
		</member>
		<member name="M:System.Windows.Threading.DispatcherTimer.Stop">
			<summary>Stops the <see cref="T:System.Windows.Threading.DispatcherTimer"></see>. </summary>
		</member>
		<member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
			<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher"></see> associated with this <see cref="T:System.Windows.Threading.DispatcherTimer"></see>. </summary>
			<returns>The dispatcher.</returns>
		</member>
		<member name="P:System.Windows.Threading.DispatcherTimer.Interval">
			<summary>Gets or sets the period of time between timer ticks. </summary>
			<returns>The period of time between ticks.  The default value is 00:00:00.</returns>
			<exception cref="T:System.ArgumentOutOfRangeException">interval is less than zero or greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
		</member>
		<member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
			<summary>Gets or sets whether the timer is running. </summary>
			<returns>true if this timer is enabled; otherwise, false.  The default value is false.</returns>
		</member>
		<member name="P:System.Windows.Threading.DispatcherTimer.Tag">
			<summary>Gets or sets a user-defined data object which is passed to the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick"></see> event handler. </summary>
			<returns>The user-defined data.  The default value is null.</returns>
		</member>
		<member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
			<summary>Provides data for the <see cref="T:System.Windows.Threading.Dispatcher"></see> <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException"></see> event.  This class cannot be inherited.</summary>
		</member>
		<member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
			<summary>Gets the exception that was raised when executing code by way of the dispatcher. </summary>
			<returns>The exception. </returns>
		</member>
		<member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
			<summary>Gets or sets whether the exception event has been handled. </summary>
			<returns>true if the exception was handled; otherwise, false.</returns>
		</member>
		<member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
			<summary>Represents the method that will handle the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException"></see> event.</summary>
		</member>
		<member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
			<summary>Provides data for the <see cref="T:System.Windows.Threading.Dispatcher"></see> <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter"></see> event.  This class cannot be inherited.</summary>
		</member>
		<member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
			<summary>Gets the exception that was raised when executing code by way of the dispatcher.</summary>
			<returns>The exception.</returns>
		</member>
		<member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
			<summary>Gets or sets whether the exception should be caught and the event handlers called. </summary>
			<returns>true if the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException"></see> should be raised; otherwise; false.  The default value is true.</returns>
		</member>
		<member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
			<summary>Represents the method that will handle the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter"></see> event.</summary>
		</member>
	</members>
</doc>
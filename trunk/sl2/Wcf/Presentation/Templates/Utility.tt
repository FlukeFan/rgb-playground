<#@ import namespace="System.Collections.Specialized" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+
    private string GetCommandLineProperty(string propertyName)
    {
        PropertyInfo parametersProperty = Host.GetType().GetProperty("Parameters", BindingFlags.NonPublic | BindingFlags.Instance);
        StringCollection parameters = (StringCollection)parametersProperty.GetValue(Host, null);
        foreach (string parameter in parameters)
        {
            string[] values = parameter.Split('!');
            int length = values.Length;
            if (values[length - 2] == propertyName)
                return values[length - 1];
        }
        return null;
    }
#>
<#+
    private void ProcessTemplate(string templateFileName, string outputFileName)
    {
        string template = File.ReadAllText(Host.ResolvePath(templateFileName));
        Engine engine = new Engine();
        string output = engine.ProcessTemplate(template, Host);
        File.WriteAllText(outputFileName, output);
    }
#>
<#+
    private void SetData(string name, object data)
    {
        CallContext.SetData(name, data);
    }
#>
<#+
    private object GetData(string name)
    {
        return CallContext.GetData(name);
    }
#>
<#+
    private string ParameterDeclaration(MethodInfo method)
    {
        string decl = "";
        foreach (ParameterInfo param in method.GetParameters())
        {
            decl +=
                SharpType(param.ParameterType) + " "
                + param.Name + ", ";
        }
        return decl;
    }
#>
<#+
    private string ParameterList(MethodInfo method)
    {
        string decl = "";
        foreach (ParameterInfo param in method.GetParameters())
        {
            decl += param.Name + ", ";
        }
        return decl;
    }
#>
<#+
    private string StripTrailingComma(string list)
    {
        return list.TrimEnd(", ".ToCharArray());
    }
#>
<#+
    private string SharpType(Type type)
    {
        if (!type.IsGenericType)
            return type.FullName;
        
        string name = type.FullName;
        name = name.Substring(0, name.IndexOf("`")) + "<";
        
        foreach (Type param in type.GetGenericArguments())
        {
            name += SharpType(param) + ", ";
        }
        name = name.TrimEnd(", ".ToCharArray());

        return name + ">";
    }
#>
<#+
    private string FieldToProperty(string fieldName)
    {
        string propertyName = fieldName;
        propertyName =
            propertyName
                .Replace(">k__BackingField", "")
                .Replace("<", "")
                .Replace("_", "");
        propertyName = ToPascalCase(propertyName);
        return propertyName;
    }
#>
<#+
    private string ToPascalCase(string camelCase)
    {
        string pascalCase =
            camelCase.Substring(0, 1).ToUpper()
            + camelCase.Substring(1, camelCase.Length - 1);
        return pascalCase;
    }
#>

<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>System.Runtime.Serialization</name>
	</assembly>
	<members>
		<member name="N:System.Runtime.Serialization">
			<summary>The <see cref="N:System.Runtime.Serialization"></see> namespace contains classes that can be used for serializing and deserializing objects. </summary>
		</member>
		<member name="T:System.Runtime.Serialization.CollectionDataContractAttribute">
			<summary>When applied to a collection type, enables custom specification of the collection item elements. This attribute can be applied only to types that are recognized by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> as valid, serializable collections.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.CollectionDataContractAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.CollectionDataContractAttribute"></see> class. </summary>
		</member>
		<member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.ItemName">
			<summary>Gets or sets a custom name for a collection element.</summary>
			<returns>The name to apply to collection elements.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.KeyName">
			<summary>Gets or sets the custom name for a dictionary key name.</summary>
			<returns>The name to use instead of the default dictionary key name.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.Name">
			<summary>Gets or sets the data contract name for the collection type.</summary>
			<returns>The data contract name for the collection type.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.Namespace">
			<summary>Gets or sets the namespace for the data contract.</summary>
			<returns>The namespace of the data contract.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.ValueName">
			<summary>Gets or sets the custom name for a dictionary value name.</summary>
			<returns>The name to use instead of the default dictionary value name.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.ContractNamespaceAttribute">
			<summary>Specifies the CLR namespace and XML namespace of the data contract. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.ContractNamespaceAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.ContractNamespaceAttribute"></see> class using the supplied namespace. </summary>
			<param name="contractNamespace">The namespace of the contract.</param>
		</member>
		<member name="P:System.Runtime.Serialization.ContractNamespaceAttribute.ClrNamespace">
			<summary>Gets or sets the CLR namespace of the data contract type. </summary>
			<returns>The CLR-legal namespace of a type. </returns>
		</member>
		<member name="P:System.Runtime.Serialization.ContractNamespaceAttribute.ContractNamespace">
			<summary>Gets the namespace of the data contract members.</summary>
			<returns>The namespace of the data contract members.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.DataContractAttribute">
			<summary>Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>. To make their type serializable, type authors must define a data contract for their type.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> class. </summary>
		</member>
		<member name="P:System.Runtime.Serialization.DataContractAttribute.Name">
			<summary>Gets or sets the name of the data contract for the type.</summary>
			<returns>The local name of a data contract. The default is the name of the class that the attribute is applied to. </returns>
		</member>
		<member name="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
			<summary>Gets or sets the namespace for the data contract for the type.</summary>
			<returns>The namespace of the contract. </returns>
		</member>
		<member name="T:System.Runtime.Serialization.DataContractSerializer">
			<summary>Serializes and deserializes an instance of a type into an XML stream or document using a supplied data contract. This class cannot be inherited. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> class to serialize or deserialize an object of the specified type.</summary>
			<param name="type">A <see cref="T:System.Type"></see> that specifies the type of the instances that will be serialized or deserialized.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> class to serialize or deserialize an object of the specified type, and a collection of known types that may be present in the object graph.</summary>
			<param name="type">A <see cref="T:System.Type"></see> that specifies the type of the instances that will be serialized or deserialized.</param>
			<param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see>  of <see cref="T:System.Type"></see> that contains the types that may be present in the object graph.</param>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> class to serialize or deserialize an object of the specified type using the supplied XML root element and namespace.</summary>
			<param name="type">A <see cref="T:System.Type"></see> that specifies the type of the instances that will be serialized or deserialized.</param>
			<param name="rootNamespace">The namespace of the XML element enclosing the content to serialize or deserialize.</param>
			<param name="rootName">The name of the XML element enclosing the content to serialize or deserialize.</param>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> class to serialize or deserialize an object of the specified type using the XML root element and namespace specified through the parameters of type <see cref="T:System.Xml.XmlDictionaryString"></see>.</summary>
			<param name="type">A <see cref="T:System.Type"></see> that specifies the type of the instances that will be serialized or deserialized.</param>
			<param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString"></see> that contains the namespace of the root element.</param>
			<param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString"></see> that contains the root element name of the content.</param>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type})">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two string parameters as well as a list of known types that may be present in the object graph.</summary>
			<param name="type">A <see cref="T:System.Type"></see> that specifies the type of the instances that will be serialized or deserialized.</param>
			<param name="rootNamespace">A string that contains the namespace of the root element.</param>
			<param name="rootName">A string that contains the root element name of the content.</param>
			<param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see>  of <see cref="T:System.Type"></see> that contains the types that may be present in the object graph.</param>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two <see cref="T:System.Xml.XmlDictionaryString"></see> parameters as well as a list of known types that may be present in the object graph.</summary>
			<param name="type">A <see cref="T:System.Type"></see> that specifies the type of the instances that will be serialized or deserialized.</param>
			<param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString"></see> that contains the namespace of the root element.</param>
			<param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString"></see> that contains the root element name of the content.</param>
			<param name="knownTypes">A <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Type"></see> that contains the known types that may be present in the object graph.</param>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> class to serialize or deserialize an object of the specified type. This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether or not to use non-standard XML constructs to preserve object reference data in the graph, and a surrogate for custom serialization.</summary>
			<param name="type">A <see cref="T:System.Type"></see> that specifies the type of the instances that will be serialized or deserialized.</param>
			<param name="preserveObjectReferences">true to use non-standard XML constructs to preserve object reference data; otherwise, false.</param>
			<param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize. The default is the value returned by the <see cref="F:System.Int32.MaxValue"></see> property.</param>
			<param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, false.</param>
			<param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate"></see> to customize the serialization process.</param>
			<param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Type"></see> that contains the known types that may be present in the object graph.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">the number of items exceeds the maximum value.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> class to serialize or deserialize an object of the specified type. This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether or not to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, and strings that specify the XML element and namespace that contain the content.</summary>
			<param name="type">A <see cref="T:System.Type"></see> that specifies the type of the instances that will be serialized or deserialized.</param>
			<param name="rootNamespace">The namespace of the XML element that encloses the content to serialize or deserialize.</param>
			<param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize.</param>
			<param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, false.</param>
			<param name="rootName">The XML element that encloses the content to serialize or deserialize.</param>
			<param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate"></see> to customize the serialization process.</param>
			<param name="preserveObjectReferences">true to use non-standard XML constructs to preserve object reference data; otherwise, false.</param>
			<param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Type"></see> that contains the known types that may be present in the object graph.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">the number of items exceeds the maximum value.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> class to serialize or deserialize an object of the specified type. This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether or not to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, and parameters of <see cref="T:System.Xml.XmlDictionaryString"></see> that specify the XML element and namespace that contain the content.</summary>
			<param name="type">A <see cref="T:System.Type"></see> that specifies the type of the instances that will be serialized or deserialized.</param>
			<param name="rootNamespace">The <see cref="T:System.Xml.XmlDictionaryString"></see>  that specifies the XML namespace of the root.</param>
			<param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize.</param>
			<param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, false.</param>
			<param name="rootName">The <see cref="T:System.Xml.XmlDictionaryString"></see> that specifies the XML element that encloses the content to serialize or deserialize.</param>
			<param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate"></see> to customize the serialization process.</param>
			<param name="preserveObjectReferences">true to use non-standard XML constructs to preserve object reference data; otherwise, false.</param>
			<param name="knownTypes">A <see cref="T:System.Collections.Generic.IEnumerable`1"></see> of <see cref="T:System.Type"></see> that contains the known types that may be present in the object graph.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">the number of items exceeds the maximum value.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
			<summary>Determines whether the <see cref="T:System.Xml.XmlDictionaryReader"></see> is positioned on an object that can be deserialized.</summary>
			<returns>true if the reader is at the start element of the stream to read; otherwise, false.</returns>
			<param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader"></see>  used to read the XML stream.</param>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlReader)">
			<summary>Determines whether the <see cref="T:System.Xml.XmlReader"></see> is positioned on an object that can be deserialized.</summary>
			<returns>true if the reader is at the start element of the stream to read; otherwise, false.</returns>
			<param name="reader">The <see cref="T:System.Xml.XmlReader"></see> used to read the XML stream.</param>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader)">
			<summary>Reads the XML stream with an <see cref="T:System.Xml.XmlReader"></see> and returns the deserialized object.</summary>
			<returns>The deserialized object.</returns>
			<param name="reader">The <see cref="T:System.Xml.XmlReader"></see> used to read the XML stream.</param>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
			<summary>Reads the XML stream with an <see cref="T:System.Xml.XmlDictionaryReader"></see> and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value. </summary>
			<returns>The deserialized object.</returns>
			<param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader"></see>  used to read the XML stream.</param>
			<param name="verifyObjectName">true to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, false. </param>
			<exception cref="T:System.Runtime.Serialization.SerializationException">if the verifyObjectName parameter is set to true, and the element name and namespace do not correspond to the values set in the constructor. </exception>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
			<summary>Reads the XML stream with an <see cref="T:System.Xml.XmlReader"></see> and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value.</summary>
			<returns>The deserialized object.</returns>
			<param name="reader">The <see cref="T:System.Xml.XmlReader"></see> used to read the XML stream.</param>
			<param name="verifyObjectName">true to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, false.</param>
			<exception cref="T:System.Runtime.Serialization.SerializationException">if the verifyObjectName parameter is set to true, and the element name and namespace do not correspond to the values set in the constructor. </exception>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
			<summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter"></see> used to write the stream.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being written.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlWriter)">
			<summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> used to write the stream.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being written.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
			<summary>Writes all the object data (starting XML element, content, and closing element) to an XML document or stream with an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> used to write the XML document or stream.</param>
			<param name="graph">The object that contains the data to write to the stream.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being written.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
			<summary>Writes the XML content using an <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter"></see>  used to write the stream.</param>
			<param name="graph">The object to write to the stream.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being written.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
			<summary>Writes the XML content using an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> used to write the stream.</param>
			<param name="graph">The object to write to the stream.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being written.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
			<summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter"></see> used to write the XML start element.</param>
			<param name="graph">The object to write.</param>
		</member>
		<member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
			<summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> used to write the XML start element.</param>
			<param name="graph">The object to write.</param>
		</member>
		<member name="P:System.Runtime.Serialization.DataContractSerializer.DataContractSurrogate">
			<summary>Gets a surrogate type that can extend the serialization or deserialization process.</summary>
			<returns>An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate"></see> class.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.DataContractSerializer.IgnoreExtensionDataObject">
			<summary>Gets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.</summary>
			<returns>true to omit the extension data; otherwise, false.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.DataContractSerializer.KnownTypes">
			<summary>Gets a collection of types that may be present in the object graph serialized using this instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>.</summary>
			<returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"></see> that contains the expected types passed in as known types to the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> constructor.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph">
			<summary>Gets the maximum number of items in an object graph to serialize or deserialize.</summary>
			<returns>The maximum number of items to serialize or deserialize. The default is <see cref="F:System.Int32.MaxValue"></see>.</returns>
			<exception cref="T:System.ArgumentOutOfRangeException">the number of items exceeds the maximum value.</exception>
		</member>
		<member name="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences">
			<summary>Gets a value that specifies whether to use non-standard XML constructs to preserve object reference data.</summary>
			<returns>true to keep the references; otherwise, false.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.DataMemberAttribute">
			<summary>When applied to the member of a type, specifies that the member is part of a data contract and is serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.DataMemberAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataMemberAttribute"></see> class. </summary>
		</member>
		<member name="P:System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue">
			<summary>Gets or sets a value that specifies whether to serialize the default value for a field or property being serialized. </summary>
			<returns>true if the default value for a member should be generated in the serialization stream; otherwise, false. The default is true.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.DataMemberAttribute.IsRequired">
			<summary>Gets or sets a value that instructs the serialization engine that the member must be present when reading or deserializing.</summary>
			<returns>true, if the member is required; otherwise, false.</returns>
			<exception cref="T:System.Runtime.Serialization.SerializationException">the member is not present.</exception>
		</member>
		<member name="P:System.Runtime.Serialization.DataMemberAttribute.Name">
			<summary>Gets or sets a data member name. </summary>
			<returns>The name of the data member. The default is the name of the target that the attribute is applied to. </returns>
		</member>
		<member name="P:System.Runtime.Serialization.DataMemberAttribute.Order">
			<summary>Gets or sets the order of serialization and deserialization of a member.</summary>
			<returns>The numeric order of serialization or deserialization.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.EnumMemberAttribute">
			<summary>Specifies that the field is an enumeration member and should be serialized.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.EnumMemberAttribute.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.EnumMemberAttribute"></see> class. </summary>
		</member>
		<member name="P:System.Runtime.Serialization.EnumMemberAttribute.Value">
			<summary>Gets or sets the value associated with the enumeration member the attribute is applied to.</summary>
			<returns>The value associated with the enumeration member.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.ExportOptions">
			<summary>Represents the options that can be set for an <see cref="T:System.Runtime.Serialization.XsdDataContractExporter"></see>. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.ExportOptions.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.ExportOptions"></see> class.</summary>
		</member>
		<member name="P:System.Runtime.Serialization.ExportOptions.DataContractSurrogate">
			<summary>Gets or sets a serialization surrogate. </summary>
			<returns>An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate"></see> interface that can be used to customize how an XML schema representation is exported for a specific type. </returns>
		</member>
		<member name="P:System.Runtime.Serialization.ExportOptions.KnownTypes">
			<summary>Gets the collection of types that may be encountered during serialization or deserialization. </summary>
			<returns>A <see cref="T:System.Runtime.Serialization.KnownTypeCollection"></see> that contains types that may be encountered during serialization or deserialization. XML schema representations are exported for all the types specified in this collection by the <see cref="T:System.Runtime.Serialization.XsdDataContractExporter"></see>.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.ExtensionDataObject">
			<summary>Stores data from a versioned data contract that has been extended by adding new members. </summary>
		</member>
		<member name="T:System.Runtime.Serialization.IDataContractSurrogate">
			<summary>Provides the methods needed to substitute one type for another by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> during serialization, deserialization, and export and import of XML schema documents (XSD). </summary>
		</member>
		<member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)">
			<summary>During schema export operations, inserts annotations into the schema for non-null return values. </summary>
			<returns>An object that represents the annotation to be inserted into the XML schema definition. </returns>
			<param name="memberInfo">A <see cref="T:System.Reflection.MemberInfo"></see> that describes the member. </param>
			<param name="dataContractType">A <see cref="T:System.Type"></see>. </param>
		</member>
		<member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)">
			<summary>During schema export operations, inserts annotations into the schema for non-null return values. </summary>
			<returns>An object that represents the annotation to be inserted into the XML schema definition. </returns>
			<param name="clrType">The CLR type to be replaced. </param>
			<param name="dataContractType">The data contract type to be annotated. </param>
		</member>
		<member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)">
			<summary>During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type. </summary>
			<returns>The <see cref="T:System.Type"></see> to substitute for the type value. This type must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>. For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute or other mechanisms that the serializer recognizes.</returns>
			<param name="type">The CLR type <see cref="T:System.Type"></see> to substitute. </param>
		</member>
		<member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)">
			<summary>During deserialization, returns an object that is a substitute for the specified object.</summary>
			<returns>The substituted deserialized object. This object must be of a type that is serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>. For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute or other mechanisms that the serializer recognizes.</returns>
			<param name="obj">The deserialized object to be substituted.</param>
			<param name="targetType">The <see cref="T:System.Type"></see> that the substituted object should be assigned to. </param>
		</member>
		<member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})">
			<summary>Sets the collection of known types to use for serialization and deserialization of the custom data objects. </summary>
			<param name="customDataTypes">A <see cref="T:System.Collections.ObjectModel.Collection`1"></see>  of <see cref="T:System.Type"></see> to add known types to.</param>
		</member>
		<member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)">
			<summary>During serialization, returns an object that substitutes the specified object. </summary>
			<returns>The substituted object that will be serialized. The object must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>. For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute or other mechanisms that the serializer recognizes.</returns>
			<param name="obj">The object to substitute. </param>
			<param name="targetType">The <see cref="T:System.Type"></see> that the substituted object should be assigned to.</param>
		</member>
		<member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)">
			<summary>During schema import, returns the type referenced by the schema.</summary>
			<returns>The <see cref="T:System.Type"></see> to use for the referenced type.</returns>
			<param name="customData">The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type.</param>
			<param name="typeName">The name of the type in schema.</param>
			<param name="typeNamespace">The namespace of the type in schema.</param>
		</member>
		<member name="M:System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)">
			<summary>Processes the type that has been generated from the imported schema.</summary>
			<returns>A <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> that contains the processed type.</returns>
			<param name="typeDeclaration">A <see cref="T:System.CodeDom.CodeTypeDeclaration"></see> to process that represents the type declaration generated during schema import.</param>
			<param name="compileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit"></see> that contains the other code generated during schema import.</param>
		</member>
		<member name="T:System.Runtime.Serialization.IExtensibleDataObject">
			<summary>Provides a data structure to store extra data encountered by the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"></see> during deserialization of a type marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute. </summary>
		</member>
		<member name="P:System.Runtime.Serialization.IExtensibleDataObject.ExtensionData">
			<summary>Gets or sets the structure that contains extra data.</summary>
			<returns>An <see cref="T:System.Runtime.Serialization.ExtensionDataObject"></see> that contains data that is not recognized as belonging to the data contract.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.ImportOptions">
			<summary>Represents the options that can be set on an <see cref="T:System.Runtime.Serialization.XsdDataContractImporter"></see>. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.ImportOptions.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.ImportOptions"></see> class.</summary>
		</member>
		<member name="P:System.Runtime.Serialization.ImportOptions.CodeProvider">
			<summary>Gets or sets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> instance that provides the means to check whether particular options for a target language are supported.</summary>
			<returns>A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> that provides the means to check whether particular options for a target language are supported.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.ImportOptions.DataContractSurrogate">
			<summary>Gets or sets a data contract surrogate that can be used to modify the code generated during an import operation. </summary>
			<returns>An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate"></see> interface that handles schema import. </returns>
		</member>
		<member name="P:System.Runtime.Serialization.ImportOptions.EnableDataBinding">
			<summary>Gets or sets a value that specifies whether types in generated code should implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged"></see> interface.</summary>
			<returns>true if the generated code should implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged"></see> interface; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.ImportOptions.GenerateInternal">
			<summary>Gets or sets a value that specifies whether generated code will be marked internal or public.</summary>
			<returns>true if the code will be marked internal; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.ImportOptions.GenerateSerializable">
			<summary>Gets or sets a value that specifies whether generated data contract classes will be marked with the <see cref="T:System.SerializableAttribute"></see> attribute in addition to the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute.</summary>
			<returns>true to generate classes with the <see cref="T:System.SerializableAttribute"></see> applied; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.ImportOptions.ImportXmlType">
			<summary>Gets or sets a value that determines whether all XML schema types, even those that do not conform to a data contract schema, will be imported.</summary>
			<returns>true to import all schema types; otherwise, false. The default is false.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.ImportOptions.Namespaces">
			<summary>Gets a dictionary that contains the mapping of data contract namespaces to the CLR namespaces that must be used to generate code during an import operation.</summary>
			<returns>A <see cref="T:System.Collections.Generic.IDictionary`2"></see> that contains the namespace mappings. </returns>
		</member>
		<member name="P:System.Runtime.Serialization.ImportOptions.ReferencedCollectionTypes">
			<summary>Gets a collection of types that represents data contract collections that should be referenced when generating code for collections, such as lists or dictionaries of items.</summary>
			<returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> that contains the referenced collection types.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.ImportOptions.ReferencedTypes">
			<summary>Gets a <see cref="T:System.Collections.Generic.IList`1"></see> containing types referenced in generated code. </summary>
			<returns>A <see cref="T:System.Collections.Generic.IList`1"></see> that contains the referenced types. </returns>
		</member>
		<member name="T:System.Runtime.Serialization.InvalidDataContractException">
			<summary>The exception that is thrown when the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> or <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"></see> encounters an invalid data contract during serialization and deserialization. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException"></see> class with the specified error message. </summary>
			<param name="message">A description of the error. </param>
		</member>
		<member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException"></see> class with the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> and <see cref="T:System.Runtime.Serialization.StreamingContext"></see>. </summary>
			<param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that specifies user context during serialization and deserialization.</param>
			<param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that contains data needed to serialize and deserialize an object. </param>
		</member>
		<member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String,System.Exception)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException"></see> class with the specified error message and inner exception. </summary>
			<param name="message">A description of the error. </param>
			<param name="innerException">The original <see cref="T:System.Exception"></see>. </param>
		</member>
		<member name="T:System.Runtime.Serialization.KnownTypeAttribute">
			<summary>Specifies types that should be recognized by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see> when serializing or deserializing a given type. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"></see> class with the name of a method that returns an <see cref="T:System.Collections.IEnumerable"></see> of known types.</summary>
			<param name="methodName">The name of the method that returns an <see cref="T:System.Collections.IEnumerable"></see> of types used when serializing or deserializing data.</param>
		</member>
		<member name="M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"></see> class with the specified type. </summary>
			<param name="type">The <see cref="T:System.Type"></see> that is included as a known type when serializing or deserializing data.</param>
		</member>
		<member name="P:System.Runtime.Serialization.KnownTypeAttribute.MethodName">
			<summary>Gets the name of a method that will return a list of types that should be recognized during serialization or deserialization. </summary>
			<returns>A <see cref="T:System.String"></see> that contains the name of the method on the type defined by the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"></see> class.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.KnownTypeAttribute.Type">
			<summary>Gets the type that should be recognized during serialization or deserialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>. </summary>
			<returns>The <see cref="T:System.Type"></see> that is used during serialization or deserialization. </returns>
		</member>
		<member name="T:System.Runtime.Serialization.NetDataContractSerializer">
			<summary>Serializes and deserializes an instance of a type into XML stream or document using the supplied  types. This class cannot be inherited.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Runtime.Serialization.StreamingContext)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"></see> class with the supplied streaming context data. </summary>
			<param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains context data.</param>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.String,System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"></see> class with the supplied XML root element and namespace.</summary>
			<param name="rootNamespace">The namespace of the XML element that encloses the content to serialize or deserialize.</param>
			<param name="rootName">The name of the XML element that encloses the content to serialize or deserialize.</param>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"></see> class with two parameters of type <see cref="T:System.Xml.XmlDictionaryString"></see> that contain the root element and namespace used to specify the content.</summary>
			<param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString"></see> that contains the namespace of the XML element that encloses the content to serialize or deserialize.</param>
			<param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString"></see> that contains the name of the XML element that encloses the content to serialize or deserialize.</param>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Runtime.Serialization.StreamingContext,System.Int32,System.Boolean,System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.ISurrogateSelector)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"></see> class with the supplied context data; in addition, specifies the maximum number of items in the object to be serialized, and parameters to specify whether extra data is ignored, the assembly loading method, and a surrogate selector.</summary>
			<param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type; otherwise, false.</param>
			<param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize. </param>
			<param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains context data.</param>
			<param name="assemblyFormat">A <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"></see> enumeration value that specifies a method for locating and loading assemblies.</param>
			<param name="surrogateSelector">An implementation of the <see cref="T:System.Runtime.Serialization.ISurrogateSelector"></see>.</param>
			<exception cref="T:System.ArgumentNullException">maxItemsInObjectGraph value is less than 0.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.String,System.String,System.Runtime.Serialization.StreamingContext,System.Int32,System.Boolean,System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.ISurrogateSelector)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"></see> class with the supplied context data and root name and namespace; in addition, specifies the maximum number of items in the object to be serialized, and parameters to specify whether extra data is ignored, the assembly loading method, and a surrogate selector.</summary>
			<param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type; otherwise, false.</param>
			<param name="rootNamespace">The namespace of the XML element that encloses the content to serialize or deserialize.</param>
			<param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize. </param>
			<param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains context data.</param>
			<param name="rootName">The name of the XML element that encloses the content to serialize or deserialize.</param>
			<param name="assemblyFormat">A <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"></see> enumeration value that specifies a method for locating and loading assemblies.</param>
			<param name="surrogateSelector">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate"></see> to handle the legacy type.</param>
			<exception cref="T:System.ArgumentNullException">maxItemsInObjectGraph value is less than 0.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Runtime.Serialization.StreamingContext,System.Int32,System.Boolean,System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.ISurrogateSelector)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"></see> class with the supplied context data, and root name and namespace (as <see cref="T:System.Xml.XmlDictionaryString"></see>  parameters); in addition, specifies the maximum number of items in the object to be serialized, and parameters to specify whether extra data found is ignored, assembly loading method, and a surrogate selector.</summary>
			<param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type; otherwise, false.</param>
			<param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString"></see> that contains the namespace of the root element.</param>
			<param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize. </param>
			<param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains context data.</param>
			<param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString"></see> that contains the root element of the content.</param>
			<param name="assemblyFormat">A <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"></see> enumeration value that specifies a method for locating and loading assemblies.</param>
			<param name="surrogateSelector">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate"></see> to handle the legacy type.</param>
			<exception cref="T:System.ArgumentNullException">maxItemsInObjectGraph value is less than 0.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.Deserialize(System.IO.Stream)">
			<summary>Deserializes an XML document or stream into an object.</summary>
			<returns>The deserialized object.</returns>
			<param name="stream">A <see cref="T:System.IO.Stream"></see> that contains the XML to deserialize.</param>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
			<summary>Determines whether the <see cref="T:System.Xml.XmlDictionaryReader"></see> is positioned on an object that can be deserialized using the specified reader.</summary>
			<returns>true, if the reader is at the start element of the stream to read; otherwise, false.</returns>
			<param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader"></see> that contains the XML to read.</param>
			<exception cref="T:System.ArgumentNullException">the reader is set to null.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.IsStartObject(System.Xml.XmlReader)">
			<summary>Determines whether the <see cref="T:System.Xml.XmlReader"></see> is positioned on an object that can be deserialized using the specified reader.</summary>
			<returns>true if the reader is at the start element of the stream to read; otherwise, false.</returns>
			<param name="reader">An <see cref="T:System.Xml.XmlReader"></see> that contains the XML to read.</param>
			<exception cref="T:System.ArgumentNullException">the reader is set to null.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.ReadObject(System.Xml.XmlReader)">
			<summary>Reads the XML stream or document with an <see cref="T:System.Xml.XmlDictionaryReader"></see> and returns the deserialized object.</summary>
			<returns>The deserialized object.</returns>
			<param name="reader">The <see cref="T:System.Xml.XmlReader"></see> used to read the XML stream or document.</param>
			<exception cref="T:System.ArgumentNullException">the reader is set to null.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
			<summary>Reads the XML stream or document with an <see cref="T:System.Xml.XmlDictionaryReader"></see> and returns the deserialized object; also checks whether the object data conforms to the name and namespace used to create the serializer.</summary>
			<returns>The deserialized object.</returns>
			<param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader"></see> used to read the XML stream or document.</param>
			<param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace used to construct the serializer; false to skip the verification.</param>
			<exception cref="T:System.ArgumentNullException">the reader is set to null.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
			<summary>Reads the XML stream or document with an <see cref="T:System.Xml.XmlDictionaryReader"></see> and returns the deserialized object; also checks whether the object data conforms to the name and namespace used to create the serializer.</summary>
			<returns>The deserialized object.</returns>
			<param name="reader">The <see cref="T:System.Xml.XmlReader"></see> used to read the XML stream or document.</param>
			<param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace used to construct the serializer; false to skip the verification.</param>
			<exception cref="T:System.ArgumentNullException">the reader is set to null.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.Serialize(System.IO.Stream,System.Object)">
			<summary>Serializes the specified object graph using the specified writer.</summary>
			<param name="stream">The <see cref="T:System.IO.Stream"></see> to serialize with.</param>
			<param name="graph">The object to serialize. All child objects of this root object are automatically serialized.</param>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
			<summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter"></see> used to write the XML document or stream.</param>
			<exception cref="T:System.ArgumentNullException">the writer is set to null.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteEndObject(System.Xml.XmlWriter)">
			<summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> used to write the XML document or stream.</param>
			<exception cref="T:System.ArgumentNullException">the writer is set to null.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
			<summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> used to write the XML document or stream.</param>
			<param name="graph">The object containing the content to write.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of object to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
			<summary>Writes the XML content using an <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter"></see> used to write the XML content.</param>
			<param name="graph">The object to serialize. All child objects of this root object are automatically serialized.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of object to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
			<summary>Writes the XML content using an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlWriter"></see> used to write the XML content.</param>
			<param name="graph">The object to serialize. All child objects of this root object are automatically serialized.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of object to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
			<summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter"></see> used to write the XML element.</param>
			<param name="graph">The object to serialize. All child objects of this root object are automatically serialized.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of object to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
			<summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter"></see> used to write the XML element.</param>
			<param name="graph">The object to serialize. All child objects of this root object are automatically serialized.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of object to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
		</member>
		<member name="P:System.Runtime.Serialization.NetDataContractSerializer.AssemblyFormat">
			<summary>Gets a value that specifies a method for locating and loading assemblies.</summary>
			<returns>A <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"></see> enumeration value that specifies a method for locating and loading assemblies.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.NetDataContractSerializer.Binder">
			<summary>Gets or sets an object that controls class loading.</summary>
			<returns>The <see cref="T:System.Runtime.Serialization.SerializationBinder"></see> used with the current formatter.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.NetDataContractSerializer.Context">
			<summary>Gets or sets the object that enables the passing of context data that is useful while serializing or deserializing.</summary>
			<returns>A <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains the context data.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.NetDataContractSerializer.IgnoreExtensionDataObject">
			<summary>Gets a value that specifies whether data supplied by an extension of the object is ignored.</summary>
			<returns>true to ignore the data supplied by an extension of the type; otherwise, false.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.NetDataContractSerializer.MaxItemsInObjectGraph">
			<summary>Gets the maximum number of items allowed in the object to be serialized.</summary>
			<returns>The maximum number of items allowed in the object. The default is <see cref="F:System.Int32.MaxValue"></see>.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.NetDataContractSerializer.SurrogateSelector">
			<summary>Gets or sets an object that assists the formatter when selecting a surrogate for serialization.</summary>
			<returns>An <see cref="T:System.Runtime.Serialization.ISurrogateSelector"></see> for selecting a surrogate.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.XmlObjectSerializer" />
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
			<summary>Gets a value that specifies whether the <see cref="T:System.Xml.XmlDictionaryReader"></see> is positioned over an XML element that can be read.</summary>
			<returns>true if the reader can read the data; otherwise, false.</returns>
			<param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader"></see> used to read the XML stream or document.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlReader)">
			<summary>Gets a value that specifies whether the <see cref="T:System.Xml.XmlReader"></see> is positioned over an XML element that can be read.</summary>
			<returns>true if the reader is positioned over the starting element; otherwise, false.</returns>
			<param name="reader">An <see cref="T:System.Xml.XmlReader"></see> used to read the XML stream or document.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.IO.Stream)">
			<summary>Reads the XML stream or document with a <see cref="T:System.IO.Stream"></see> and returns the deserialized object.</summary>
			<returns>The deserialized object.</returns>
			<param name="stream">A <see cref="T:System.IO.Stream"></see> used to read the XML stream or document.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
			<summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlDictionaryReader"></see> and returns the deserialized object.</summary>
			<returns>The deserialized object.</returns>
			<param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader"></see> used to read the XML document.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader)">
			<summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlReader"></see> and returns the deserialized object.</summary>
			<returns>The deserialized object.</returns>
			<param name="reader">An <see cref="T:System.Xml.XmlReader"></see> used to read the XML stream or document.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
			<summary>Reads the XML stream or document with an <see cref="T:System.Xml.XmlDictionaryReader"></see> and returns the deserialized object; it also enables you to specify whether the serializer can read the data before attempting to read it.</summary>
			<returns>The deserialized object.</returns>
			<param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader"></see> used to read the XML document.</param>
			<param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; otherwise, false to skip the verification.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
			<summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlReader"></see> and returns the deserialized object; it also enables you to specify whether the serializer can read the data before attempting to read it.</summary>
			<returns>The deserialized object.</returns>
			<param name="reader">An <see cref="T:System.Xml.XmlReader"></see> used to read the XML document or stream.</param>
			<param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; false to skip the verification.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
			<summary>Writes the end of the object data as a closing XML element to the XML document or stream with an <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</summary>
			<param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter"></see> used to write the XML document or stream.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlWriter)">
			<summary>Writes the end of the object data as a closing XML element to the XML document or stream with an <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> used to write the XML document or stream.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.IO.Stream,System.Object)">
			<summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.IO.Stream"></see>.</summary>
			<param name="stream">A <see cref="T:System.IO.Stream"></see> used to write the XML document or stream.</param>
			<param name="graph">The object that contains the data to write to the stream.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
			<summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</summary>
			<param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter"></see> used to write the content to the XML document or stream.</param>
			<param name="graph">The object that contains the content to write.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
			<summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> used to write the XML document or stream.</param>
			<param name="graph">The object that contains the content to write.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
			<summary>Writes only the content of the object to the XML document or stream using the specified <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</summary>
			<param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter"></see> used to write the XML document or stream.</param>
			<param name="graph">The object that contains the content to write.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
			<summary>Writes only the content of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> used to write the XML document or stream.</param>
			<param name="graph">The object that contains the content to write.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
			<summary>Writes the start of the object's data as an opening XML element using the specified <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</summary>
			<param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter"></see> used to write the XML document.</param>
			<param name="graph">The object to serialize.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
			<summary>Writes the start of the object's data as an opening XML element using the specified <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<param name="writer">An <see cref="T:System.Xml.XmlWriter"></see> used to write the XML document.</param>
			<param name="graph">The object to serialize.</param>
			<exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute"></see> attribute has not been applied to the type.</exception>
			<exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
			<exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph"></see> property.</exception>
		</member>
		<member name="T:System.Runtime.Serialization.XmlSerializableServices">
			<summary>Contains methods for reading and writing XML. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.XmlSerializableServices.AddDefaultSchema(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
			<summary>Generates a default schema type given the specified type name and adds it to the specified schema set.</summary>
			<param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to add the generated schema type to.</param>
			<param name="typeQName">An <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the type name to assign the schema to. </param>
		</member>
		<member name="M:System.Runtime.Serialization.XmlSerializableServices.ReadNodes(System.Xml.XmlReader)">
			<summary>Reads a set of XML nodes from the specified reader and returns the result.</summary>
			<returns>An array of type <see cref="T:System.Xml.XmlNode"></see>.</returns>
			<param name="xmlReader">An <see cref="T:System.Xml.XmlReader"></see> used for reading.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XmlSerializableServices.WriteNodes(System.Xml.XmlWriter,System.Xml.XmlNode[])">
			<summary>Writes the supplied nodes using the specified writer.</summary>
			<param name="nodes">An array of type <see cref="T:System.Xml.XmlNode"></see> to write.</param>
			<param name="xmlWriter">An <see cref="T:System.Xml.XmlWriter"></see> used for writing.</param>
		</member>
		<member name="T:System.Runtime.Serialization.XsdDataContractExporter">
			<summary>Allows the transformation of a set of  types that are used in data contracts into an XML schema file (.xsd). </summary>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractExporter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractExporter"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractExporter.#ctor(System.Xml.Schema.XmlSchemaSet)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractExporter"></see> class with the specified set of schemas. </summary>
			<param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> that contains the schemas to be exported. </param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Type})">
			<summary>Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a <see cref="T:System.Collections.Generic.ICollection`1"></see> can be exported. </summary>
			<returns>true if the types can be exported; otherwise, false.</returns>
			<param name="types">A <see cref="T:System.Collections.Generic.ICollection`1"></see>   that contains the specified types to export.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Reflection.Assembly})">
			<summary>Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a set of assemblies can be exported. </summary>
			<returns>true if the types can be exported; otherwise, false.</returns>
			<param name="assemblies">A <see cref="T:System.Collections.Generic.ICollection`1"></see>   of <see cref="T:System.Reflection.Assembly"></see> that contains the assemblies with the types to export.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Type)">
			<summary>Gets a value that indicates whether the specified common language runtime (CLR) type can be exported. </summary>
			<returns>true if the type can be exported; otherwise, false. </returns>
			<param name="type">The <see cref="T:System.Type"></see> to export. </param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Reflection.Assembly})">
			<summary>Transforms the types contained in the specified collection of assemblies. </summary>
			<param name="assemblies">A <see cref="T:System.Collections.Generic.ICollection`1"></see>   (of <see cref="T:System.Reflection.Assembly"></see>) that contains the types to export.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Type})">
			<summary>Transforms the types contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see> passed to this method.</summary>
			<param name="types">A  <see cref="T:System.Collections.Generic.ICollection`1"></see> (of <see cref="T:System.Type"></see>) that contains the types to export.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Type)">
			<summary>Transforms the specified  type into an XML schema definition language (XSD) schema. </summary>
			<param name="type">The <see cref="T:System.Type"></see> to transform into an XML schema. </param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName(System.Type)">
			<summary>Returns the top-level name and namespace for the <see cref="T:System.Type"></see>.</summary>
			<returns>The <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the top-level name and namespace for this <see cref="T:System.Type"></see>, which is written to the stream when writing this object.</returns>
			<param name="type">The <see cref="T:System.Type"></see> to query.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType(System.Type)">
			<summary>Returns the XML schema type for the specified type.</summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaType"></see> that contains the XML schema.</returns>
			<param name="type">The type to return a schema for.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName(System.Type)">
			<summary>Returns the contract name and contract namespace for the <see cref="T:System.Type"></see>.</summary>
			<returns>An <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the contract name of the type and its namespace.</returns>
			<param name="type">The <see cref="T:System.Type"></see> that was exported. </param>
		</member>
		<member name="P:System.Runtime.Serialization.XsdDataContractExporter.Options">
			<summary>Gets or sets an <see cref="T:System.Runtime.Serialization.ExportOptions"></see> that contains options that can be set for the export operation. </summary>
			<returns>An <see cref="T:System.Runtime.Serialization.ExportOptions"></see> that contains options used to customize how types are exported to schemas.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.XsdDataContractExporter.Schemas">
			<summary>Gets the collection of exported XML schemas. </summary>
			<returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> that contains the schemas transformed from the set of common language runtime (CLR) types after calling the <see cref="Overload:System.Runtime.Serialization.XsdDataContractExporter.Export"></see> method.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.XsdDataContractImporter">
			<summary>Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter"></see> class with the <see cref="T:System.CodeDom.CodeCompileUnit"></see> that will be used to generate CLR code.</summary>
			<param name="codeCompileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit"></see> that will be used to store the code. </param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
			<summary>Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit"></see>. </summary>
			<returns>true if the schemas can be transformed to data contract types; otherwise, false. </returns>
			<param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> that contains the schemas to transform. </param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
			<summary>Gets a value that indicates whether the specified set of types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> can be transformed into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit"></see>.</summary>
			<returns>true if the schemas can be transformed; otherwise, false. </returns>
			<param name="typeNames">An <see cref="T:System.Collections.Generic.ICollection`1"></see> of <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the set of schema types to import.</param>
			<param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> that contains the schemas to transform.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
			<summary>Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit"></see>. </summary>
			<returns>true if the schemas can be transformed to data contract types; otherwise, false.</returns>
			<param name="typeName">An <see cref="T:System.Collections.IList"></see> of <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the names of the schema types that need to be imported from the <see cref="T:System.Xml.Schema.XmlSchemaSet"></see>.</param>
			<param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> that contains the schema representations. </param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
			<summary>Gets a value that indicates whether a specific schema element contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> can be imported.</summary>
			<returns>true if the element can be imported; otherwise, false.</returns>
			<param name="element">A specific <see cref="T:System.Xml.Schema.XmlSchemaElement"></see> to check in the set of schemas.</param>
			<param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> to import.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
			<summary>Returns a <see cref="T:System.CodeDom.CodeTypeReference"></see> to the CLR type generated for the schema type with the specified <see cref="T:System.Xml.XmlQualifiedName"></see>.</summary>
			<returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> reference to the CLR type generated for the schema type with the typeName specified.</returns>
			<param name="typeName">The <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the schema type to look up.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
			<summary>Returns a <see cref="T:System.CodeDom.CodeTypeReference"></see> for the specified XML qualified element and schema element.</summary>
			<returns>A <see cref="T:System.CodeDom.CodeTypeReference"></see> that represents the type that was generated for the specified schema type.</returns>
			<param name="typeName">An <see cref="T:System.Xml.XmlQualifiedName"></see> that specifies the XML qualified name of the schema type to look up.</param>
			<param name="element">An <see cref="T:System.Xml.Schema.XmlSchemaElement"></see> that specifies an element in an XML schema.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
			<summary>Returns a list of <see cref="T:System.CodeDom.CodeTypeReference"></see> objects that represents the known types generated when generating code for the specified schema type.</summary>
			<returns>A <see cref="T:System.Collections.Generic.IList`1"></see> of type <see cref="T:System.CodeDom.CodeTypeReference"></see>.</returns>
			<param name="typeName">An <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the schema type to look up known types for.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
			<summary>Transforms the specified set of XML schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> into a <see cref="T:System.CodeDom.CodeCompileUnit"></see>. </summary>
			<param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> that contains the schema representations to generate CLR types for.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
			<summary>Transforms the specified set of schema types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit"></see>.</summary>
			<param name="typeNames">A <see cref="T:System.Collections.Generic.ICollection`1"></see>  (of <see cref="T:System.Xml.XmlQualifiedName"></see>) that represents the set of schema types to import.</param>
			<param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> that contains the schema representations.</param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
			<summary>Transforms the specified XML schema type contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> into a <see cref="T:System.CodeDom.CodeCompileUnit"></see>.</summary>
			<param name="typeName">A <see cref="T:System.Xml.XmlQualifiedName"></see> that represents a specific schema type to import.</param>
			<param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> that contains the schema representations. </param>
		</member>
		<member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
			<summary>Transforms the specified schema element in the set of specified XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit"></see> and returns an <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the data contract name for the specified element.</summary>
			<returns>An <see cref="T:System.Xml.XmlQualifiedName"></see> that represents the specified element.</returns>
			<param name="element">An <see cref="T:System.Xml.Schema.XmlSchemaElement"></see> that represents the specific schema element to transform. </param>
			<param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet"></see> that contains the schemas to transform.</param>
		</member>
		<member name="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
			<summary>Gets a <see cref="T:System.CodeDom.CodeCompileUnit"></see> used for storing the CLR types generated.</summary>
			<returns>A <see cref="T:System.CodeDom.CodeCompileUnit"></see> used to store the CLR types generated.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.XsdDataContractImporter.Options">
			<summary>Gets or sets an <see cref="T:System.Runtime.Serialization.ImportOptions"></see> that contains settable options for the import operation. </summary>
			<returns>A <see cref="T:System.Runtime.Serialization.ImportOptions"></see> that contains settable options. </returns>
		</member>
		<member name="N:System.Runtime.Serialization.Configuration">
			<summary>The <see cref="N:System.Runtime.Serialization.Configuration"></see> namespace contains classes used to read the values found in application configuration under system.xml.serialization section.</summary>
		</member>
		<member name="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection">
			<summary>Handles the XML elements used to configure serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.DataContractSerializerSection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection"></see> class. </summary>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.DataContractSerializerSection.DeclaredTypes">
			<summary>Gets a collection of types added to the <see cref="P:System.Runtime.Serialization.DataContractSerializer.KnownTypes"></see> property.</summary>
			<returns>A <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection"></see> that contains the known types.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement">
			<summary>Handles the XML elements used to the known types used for serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElement.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElement.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement"></see> class with the specified type name.</summary>
			<param name="typeName">The name of the type that requires a collection of known types.</param>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElement.KnownTypes">
			<summary>Gets the collection of known types.</summary>
			<returns>A <see cref="T:System.Runtime.Serialization.Configuration.TypeElementCollection"></see> that contains the known types.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElement.Type">
			<summary>Gets or sets the name of the declared type that requires a collection of known types.</summary>
			<returns>The name of the declared type.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection">
			<summary>Handles the XML elements used to configure XML serialization using the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Add(System.Runtime.Serialization.Configuration.DeclaredTypeElement)">
			<summary>Adds an element to the collection of types.</summary>
			<param name="element">The element to add.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Clear">
			<summary>Removes all members of the collection.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Contains(System.String)">
			<summary>Returns a value that specifies whether the element is in the collection.</summary>
			<returns>true if the element is in the collection; otherwise, false.</returns>
			<param name="typeName">The name of the type to check for.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.IndexOf(System.Runtime.Serialization.Configuration.DeclaredTypeElement)">
			<summary>Returns the position of the specified element in the collection.</summary>
			<returns>The index of the specified element.</returns>
			<param name="element">The element to find in the collection.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Remove(System.Runtime.Serialization.Configuration.DeclaredTypeElement)">
			<summary>Removes the specified element from the collection of known types.</summary>
			<param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement"></see> to remove.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Remove(System.String)">
			<summary>Removes the specified element from the collection of known types.</summary>
			<param name="typeName">The name of the type to remove from the collection.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.RemoveAt(System.Int32)">
			<summary>Removes the element at the specified position.</summary>
			<param name="index">The position of the element to remove.</param>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Item(System.Int32)">
			<summary>Gets or sets a specific member of the collection object by its position.</summary>
			<returns>A <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement"></see> that represents the type.</returns>
			<param name="index">An expression that specifies the position of a member in the collection.</param>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Item(System.String)">
			<summary>Gets or sets the element in the collection of types by its key.</summary>
			<returns>The specified element (when used to get the element).</returns>
			<param name="typeName">The name (that functions as a key) of the type to get or set.</param>
		</member>
		<member name="T:System.Runtime.Serialization.Configuration.ParameterElement">
			<summary>Handles the XML elements used to configure XML serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.ParameterElement.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.ParameterElement.#ctor(System.Int32)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement"></see> class with the specified index.</summary>
			<param name="index">Specifies a position in the collection of parameters.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.ParameterElement.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement"></see> class with the specified type name.</summary>
			<param name="typeName">The name of the parameter's type.</param>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.ParameterElement.Index">
			<summary>Gets or sets the position of the generic known type.</summary>
			<returns>The position of the parameter in the containing generic declared type.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.ParameterElement.Parameters">
			<summary>Gets the collection of parameters.</summary>
			<returns>A <see cref="T:System.Runtime.Serialization.Configuration.ParameterElementCollection"></see> that contains all parameters.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.ParameterElement.Type">
			<summary>Gets or sets the type name of the parameter of the generic known type.</summary>
			<returns>The type name of the parameter.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.Configuration.ParameterElementCollection">
			<summary>Handles the XML elements used to configure serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.ParameterElementCollection"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Add(System.Runtime.Serialization.Configuration.ParameterElement)">
			<summary>Adds an element to the collection of parameter elements.</summary>
			<param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement"></see> element to add to the collection.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Clear">
			<summary>Removes all members of the collection.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Contains(System.String)">
			<summary>Gets or sets a value specifying whether the named type is found in the collection.</summary>
			<returns>true if the element is present; otherwise, false.</returns>
			<param name="typeName">The name of the type to find.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.IndexOf(System.Runtime.Serialization.Configuration.ParameterElement)">
			<summary>Gets the position of the specified element in the collection.</summary>
			<returns>The position of the specified element.</returns>
			<param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement"></see> element to find.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Remove(System.Runtime.Serialization.Configuration.ParameterElement)">
			<summary>Removes the specified element from the collection.</summary>
			<param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement"></see> to remove.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.RemoveAt(System.Int32)">
			<summary>Removes the element at the specified position.</summary>
			<param name="index">The position of the element to remove.</param>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.ParameterElementCollection.CollectionType">
			<summary>Gets the type of the parameters collection in configuration.</summary>
			<returns>A <see cref="T:System.Configuration.ConfigurationElementCollectionType"></see> that contains the type of the parameters collection in configuration.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.ParameterElementCollection.Item(System.Int32)">
			<summary>Gets or sets the element in the collection at the specified position.</summary>
			<returns>A <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement"></see> from the collection.</returns>
			<param name="index">The position of the element in the collection to get or set.</param>
		</member>
		<member name="T:System.Runtime.Serialization.Configuration.SerializationSectionGroup">
			<summary>Handles the XML elements used to configure serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.SerializationSectionGroup.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.SerializationSectionGroup"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.SerializationSectionGroup.GetSectionGroup(System.Configuration.Configuration)">
			<summary>Gets the serialization configuration section for the specified configuration.</summary>
			<returns>A <see cref="T:System.Runtime.Serialization.Configuration.SerializationSectionGroup"></see> that represents the configuration section.</returns>
			<param name="config">A <see cref="T:System.Configuration.Configuration"></see> that represents the configuration to retrieve.</param>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.SerializationSectionGroup.DataContractSerializer">
			<summary>Gets the <see cref="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection"></see> used to set up the known types collection.</summary>
			<returns>The <see cref="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection"></see> used for the serialization configuration section.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.Configuration.TypeElement">
			<summary>Handles the XML elements used to configure serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.TypeElement.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.TypeElement"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.TypeElement.#ctor(System.String)">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.TypeElement"></see> class with the specified type name. </summary>
			<param name="typeName">The name of the type that uses known types.</param>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.TypeElement.Index">
			<summary>Gets or sets the position of the element.</summary>
			<returns>The position of the element.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.TypeElement.Parameters">
			<summary>Gets a collection of parameters.</summary>
			<returns>A <see cref="T:System.Runtime.Serialization.Configuration.ParameterElementCollection"></see> that contains the parameters for the type.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.TypeElement.Type">
			<summary>Gets or sets the name of the type.</summary>
			<returns>The name of the type.</returns>
		</member>
		<member name="T:System.Runtime.Serialization.Configuration.TypeElementCollection">
			<summary>Handles the XML elements used to configure the known types used for serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer"></see>.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.#ctor">
			<summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.TypeElementCollection"></see> class. </summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.Add(System.Runtime.Serialization.Configuration.TypeElement)">
			<summary>Adds the specified element to the collection.</summary>
			<param name="element">A <see cref="T:System.Runtime.Serialization.Configuration.TypeElement"></see> that represents the known type to add.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.Clear">
			<summary>Removes all members of the collection.</summary>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.IndexOf(System.Runtime.Serialization.Configuration.TypeElement)">
			<summary>Returns the position of the specified element.</summary>
			<returns>The position of the specified element.</returns>
			<param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.TypeElement"></see> to find in the collection.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.Remove(System.Runtime.Serialization.Configuration.TypeElement)">
			<summary>Removes the specified element from the collection.</summary>
			<param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.TypeElement"></see> to remove.</param>
		</member>
		<member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.RemoveAt(System.Int32)">
			<summary>Removes the element at the specified position.</summary>
			<param name="index">The position in the collection from which to remove the element.</param>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.TypeElementCollection.CollectionType">
			<summary>Gets the collection of elements that represents the types using known types.</summary>
			<returns>A <see cref="T:System.Configuration.ConfigurationElementCollectionType"></see> that contains the element objects.</returns>
		</member>
		<member name="P:System.Runtime.Serialization.Configuration.TypeElementCollection.Item(System.Int32)">
			<summary>Returns a specific member of the collection by its position.</summary>
			<returns>The element at the specified position.</returns>
			<param name="index">The position of the item to return.</param>
		</member>
		<member name="T:System.Xml.IFragmentCapableXmlDictionaryWriter">
			<summary>Contains properties and methods that when implemented by a <see cref="T:System.Xml.XmlDictionaryWriter"></see>, allows processing of XML fragments.</summary>
		</member>
		<member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment">
			<summary>Ends the processing of an XML fragment.</summary>
		</member>
		<member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)">
			<summary>Starts the processing of an XML fragment.</summary>
			<param name="generateSelfContainedTextFragment">if true, any namespaces declared outside the fragment will be redeclared if used inside of it; if false the namespaces will not be redeclared.</param>
			<param name="stream">The stream to write to.</param>
		</member>
		<member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)">
			<summary>Writes an XML fragment to the underlying stream of the writer.</summary>
			<param name="offset">Starting position from which to write in buffer.</param>
			<param name="count">Number of bytes to be written to the buffer.</param>
			<param name="buffer">The buffer to write to.</param>
		</member>
		<member name="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment">
			<summary>Gets a value indicating whether this <see cref="T:System.Xml.XmlDictionaryWriter"></see> can process XML fragments. </summary>
			<returns>true if this <see cref="T:System.Xml.XmlDictionaryWriter"></see> can process XML fragments; otherwise, false.</returns>
		</member>
		<member name="T:System.Xml.IStreamProvider">
			<summary>An interface that can be implemented by classes providing streams.</summary>
		</member>
		<member name="M:System.Xml.IStreamProvider.GetStream">
			<summary>Gets a stream.</summary>
			<returns>A <see cref="T:System.IO.Stream"></see>.</returns>
		</member>
		<member name="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)">
			<summary>Releases a stream to output.</summary>
			<param name="stream">The stream being released.</param>
		</member>
		<member name="T:System.Xml.IXmlBinaryReaderInitializer">
			<summary>Provides methods for reinitializing a binary reader to read a new document.</summary>
		</member>
		<member name="M:System.Xml.IXmlBinaryReaderInitializer.SetInput(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Reinitializes the binary reader using the given input stream.</summary>
			<param name="session"><see cref="T:System.Xml.XmlBinaryReaderSession"></see> to use.</param>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas"><see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply.</param>
			<param name="onClose">Delegate to call when the reader is closed.</param>
		</member>
		<member name="M:System.Xml.IXmlBinaryReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Reinitializes the binary reader using the given input buffer.</summary>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="session"><see cref="T:System.Xml.XmlBinaryReaderSession"></see> to use.</param>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use.</param>
			<param name="quotas"><see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply.</param>
			<param name="onClose">Delegate to call when the reader is closed.</param>
		</member>
		<member name="T:System.Xml.IXmlBinaryWriterInitializer">
			<summary>Specifies implementation requirements for XML binary writers that derive from this interface.</summary>
		</member>
		<member name="M:System.Xml.IXmlBinaryWriterInitializer.SetOutput(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)">
			<summary>Specifies initialization requirements for XML binary writers that implement this method.</summary>
			<param name="session"><see cref="T:System.Xml.XmlBinaryWriterSession"></see> to use.</param>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use.</param>
			<param name="stream">The stream to write to.</param>
			<param name="ownsStream">If true, stream will be closed by the writer when done; otherwise false.</param>
		</member>
		<member name="M:System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
			<summary>Attempts to look up an entry in the dictionary.</summary>
			<returns>true if key is in the dictionary, otherwise false.</returns>
			<param name="result">If key is defined, the <see cref="T:System.Xml.XmlDictionaryString"></see> that is mapped to the key; otherwise null.</param>
			<param name="key">Key to look up.</param>
		</member>
		<member name="M:System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
			<summary>Checks the dictionary for a specified string value.</summary>
			<returns>true if value is in the dictionary, otherwise false.</returns>
			<param name="result">The corresponding <see cref="T:System.Xml.XmlDictionaryString"></see>, if found; otherwise null.</param>
			<param name="value">String value being checked for.</param>
		</member>
		<member name="M:System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
			<summary>Checks the dictionary for a specified <see cref="T:System.Xml.XmlDictionaryString"></see>.</summary>
			<returns>true if <see cref="T:System.Xml.XmlDictionaryString"></see> is in the dictionary, otherwise false.</returns>
			<param name="result">The matching <see cref="T:System.Xml.XmlDictionaryString"></see>, if found; otherwise null.</param>
			<param name="value">The <see cref="T:System.Xml.XmlDictionaryString"></see> being checked for.</param>
		</member>
		<member name="T:System.Xml.IXmlMtomReaderInitializer">
			<summary>Specifies implementation requirements for XML MTOM readers that derive from this interface.</summary>
		</member>
		<member name="M:System.Xml.IXmlMtomReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Specifies initialization requirements for XML MTOM readers that read a stream.</summary>
			<param name="maxBufferSize">The maximum allowed size of the buffer.</param>
			<param name="contentType">The Content-Type of the message. Can be &lt;null&gt; if the MIME type is present in the document being read.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="encod ings">The possible character encodings of the stream.</param>
			<param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply to the reader.</param>
			<param name="onClose">Delegate to use when onClose event happens.</param>
		</member>
		<member name="M:System.Xml.IXmlMtomReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Specifies initialization requirements for XML MTOM readers that read a buffer.</summary>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="maxBufferSize">The maximum allowed size of the buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="contentType">The Content-Type of the message. Can be &lt;null&gt; if the MIME type is present in the document being read.</param>
			<param name="encodings">The possible character encodings of the input.</param>
			<param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply to the reader.</param>
			<param name="onClose">Delegate to use when onClose event happens.</param>
		</member>
		<member name="T:System.Xml.IXmlMtomWriterInitializer">
			<summary>When implemented by an MTOM writer, this interface ensures initialization for an MTOM writer.</summary>
		</member>
		<member name="M:System.Xml.IXmlMtomWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)">
			<summary>When implemented by an MTOM writer, initializes an MTOM writer.</summary>
			<param name="boundary">MIME boundary string.</param>
			<param name="maxSizeInBytes">Maximum number of bytes that will be buffered in the writer.</param>
			<param name="startInfo">An attribute in the ContentType SOAP header, set to "Application/soap+xml".</param>
			<param name="encoding">The character encoding of the stream.</param>
			<param name="stream">The stream to write to.</param>
			<param name="writeMessageHeaders">If true, write message headers.</param>
			<param name="ownsStream">If true, stream will be closed by the writer when done; otherwise false.</param>
			<param name="startUri">URI for MIME section.</param>
		</member>
		<member name="T:System.Xml.IXmlTextReaderInitializer">
			<summary>Specifies implementation requirements for XML text readers that derive from this interface.</summary>
		</member>
		<member name="M:System.Xml.IXmlTextReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Specifies initialization requirements for XML text readers that read a stream.</summary>
			<param name="encoding">The character encoding of the stream.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas"><see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply.</param>
			<param name="onClose">Delegate to be called when the reader is closed..</param>
		</member>
		<member name="M:System.Xml.IXmlTextReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Specifies initialization requirements for XML text readers that read a buffer.</summary>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="encoding">The character encoding of the stream.</param>
			<param name="quotas"><see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply.</param>
			<param name="onClose">Delegate to be called when the reader is closed..</param>
		</member>
		<member name="T:System.Xml.IXmlTextWriterInitializer">
			<summary>Specifies implementation requirements for XML text writers that derive from this interface.</summary>
		</member>
		<member name="M:System.Xml.IXmlTextWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
			<summary>Specifies initialization requirements for XML text writers that implement this method.</summary>
			<param name="encoding">The character encoding of the stream.</param>
			<param name="stream">The stream to read to.</param>
			<param name="ownsStream">If true, stream will be closed by the writer when done; otherwise false.</param>
		</member>
		<member name="T:System.Xml.OnXmlDictionaryReaderClose" />
		<member name="M:System.Xml.UniqueId.#ctor">
			<summary>Creates a new instance of this class with a new, unique Guid.</summary>
		</member>
		<member name="M:System.Xml.UniqueId.#ctor(System.Byte[])">
			<summary>Creates a new instance of this class using a byte array that represents a <see cref="T:System.Guid"></see>.</summary>
			<param name="guid">A byte array that represents a <see cref="T:System.Guid"></see>.</param>
			<exception cref="T:System.ArgumentException">guid provides less than 16 valid bytes.</exception>
			<exception cref="T:System.ArgumentNullException">guid is null.</exception>
		</member>
		<member name="M:System.Xml.UniqueId.#ctor(System.Guid)">
			<summary>Creates a new instance of this class using a <see cref="T:System.Guid"></see>.</summary>
			<param name="guid">A <see cref="T:System.Guid"></see>.</param>
			<exception cref="T:System.ArgumentNullException">guid is null.</exception>
		</member>
		<member name="M:System.Xml.UniqueId.#ctor(System.String)">
			<summary>Creates a new instance of this class using a string.</summary>
			<param name="value">A string used to generate the <see cref="T:System.Xml.UniqueId"></see>.</param>
			<exception cref="T:System.FormatException">Length of value is zero.</exception>
			<exception cref="T:System.ArgumentNullException">value is null.</exception>
		</member>
		<member name="M:System.Xml.UniqueId.#ctor(System.Byte[],System.Int32)">
			<summary>Creates a new instance of this class starting from an offset within a byte array that represents a <see cref="T:System.Guid"></see>.</summary>
			<param name="offset">Offset position within the byte array that represents a <see cref="T:System.Guid"></see>.</param>
			<param name="guid">A byte array that represents a <see cref="T:System.Guid"></see>.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">offset less than zero or greater than the length of the array.</exception>
			<exception cref="T:System.ArgumentNullException">guid is null.</exception>
			<exception cref="T:System.ArgumentException">guid and offset provide less than 16 valid bytes.</exception>
		</member>
		<member name="M:System.Xml.UniqueId.#ctor(System.Char[],System.Int32,System.Int32)">
			<summary>Creates a new instance of this class starting from an offset within a char using a specified number of entries.</summary>
			<param name="offset">Offset position within the char array that represents a <see cref="T:System.Guid"></see>.</param>
			<param name="chars">A char array that represents a <see cref="T:System.Guid"></see>.</param>
			<param name="count">Number of array entries to use, starting from offset.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">offset less than zero or greater than the length of the array.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">count less than zero or greater than the length of the array minus offset.</exception>
			<exception cref="T:System.ArgumentNullException">chars is null.</exception>
			<exception cref="T:System.FormatException">count equals zero.</exception>
		</member>
		<member name="M:System.Xml.UniqueId.Equals(System.Object)">
			<summary>Tests whether an object equals this <see cref="T:System.Xml.UniqueId"></see>.</summary>
			<returns>true if the object equals this <see cref="T:System.Xml.UniqueId"></see>; otherwise false.</returns>
			<param name="obj">The object to compare.</param>
		</member>
		<member name="M:System.Xml.UniqueId.GetHashCode">
			<summary>Creates a hash-code representation of this <see cref="T:System.Xml.UniqueId"></see>.</summary>
			<returns>An integer hash-code representation of this <see cref="T:System.Xml.UniqueId"></see>.</returns>
		</member>
		<member name="M:System.Xml.UniqueId.op_Equality(System.Xml.UniqueId,System.Xml.UniqueId)">
			<summary>Overrides the equality operator to test for equality of two <see cref="T:System.Xml.UniqueId"></see>s.</summary>
			<returns>true if the two <see cref="T:System.Xml.UniqueId"></see>s are equal, or are both null; false if they are not equal, or if only one of them is null.</returns>
			<param name="id2">The second <see cref="T:System.Xml.UniqueId"></see>.</param>
			<param name="id1">The first <see cref="T:System.Xml.UniqueId"></see>.</param>
		</member>
		<member name="M:System.Xml.UniqueId.op_Inequality(System.Xml.UniqueId,System.Xml.UniqueId)">
			<summary>Overrides the equality operator to test for inequality of two <see cref="T:System.Xml.UniqueId"></see>s.</summary>
			<returns>true if the overridden equality operator returns false; otherwise false.</returns>
			<param name="id2">The second <see cref="T:System.Xml.UniqueId"></see>.</param>
			<param name="id1">The first <see cref="T:System.Xml.UniqueId"></see>.</param>
		</member>
		<member name="M:System.Xml.UniqueId.ToCharArray(System.Char[],System.Int32)">
			<summary>Puts the <see cref="T:System.Xml.UniqueId"></see> value into a char array.</summary>
			<returns>Number of entries in the char array filled by the <see cref="T:System.Xml.UniqueId"></see> value.</returns>
			<param name="offset">Position in the char array to start inserting the <see cref="T:System.Xml.UniqueId"></see> value.</param>
			<param name="chars">The char array.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">offset less than zero or greater than the length of the array.</exception>
			<exception cref="T:System.ArgumentException">guid and offset provide less than 16 valid bytes.</exception>
			<exception cref="T:System.ArgumentNullException">chars is null.</exception>
		</member>
		<member name="M:System.Xml.UniqueId.ToString">
			<summary>Displays the <see cref="T:System.Xml.UniqueId"></see> value in string format.</summary>
			<returns>A string representation of the <see cref="T:System.Xml.UniqueId"></see> value.</returns>
		</member>
		<member name="M:System.Xml.UniqueId.TryGetGuid(System.Guid@)">
			<summary>Tries to get the value of the <see cref="T:System.Xml.UniqueId"></see> as a <see cref="T:System.Guid"></see>.</summary>
			<returns>true if the UniqueId represents a <see cref="T:System.Guid"></see>; otherwise false.</returns>
			<param name="guid">The <see cref="T:System.Guid"></see> if successful; otherwise <see cref="F:System.Guid.Empty"></see>.</param>
		</member>
		<member name="M:System.Xml.UniqueId.TryGetGuid(System.Byte[],System.Int32)">
			<summary>Tries to get the value of the <see cref="T:System.Xml.UniqueId"></see> as a <see cref="T:System.Guid"></see> and store it in the given byte array at the specified offest.</summary>
			<returns>true if the value stored in this instance of <see cref="T:System.Xml.UniqueId"></see> is a <see cref="T:System.Guid"></see>; otherwise false.</returns>
			<param name="offset">Position in the byte array to start inserting the <see cref="T:System.Guid"></see> value.</param>
			<param name="buffer">byte array that will contain the <see cref="T:System.Guid"></see>.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">offset less than zero or greater than the length of the array.</exception>
			<exception cref="T:System.ArgumentException">buffer and offset provide less than 16 valid bytes.</exception>
			<exception cref="T:System.ArgumentNullException">buffer is null.</exception>
		</member>
		<member name="P:System.Xml.UniqueId.CharArrayLength">
			<summary>Gets the length of the string representation of the <see cref="T:System.Xml.UniqueId"></see>.</summary>
			<returns>The length of the string representation of the <see cref="T:System.Xml.UniqueId"></see>.</returns>
		</member>
		<member name="P:System.Xml.UniqueId.IsGuid">
			<summary>Indicates whether the <see cref="T:System.Xml.UniqueId"></see> is a <see cref="T:System.Guid"></see>.</summary>
			<returns>true if the <see cref="T:System.Xml.UniqueId"></see> is a <see cref="T:System.Guid"></see>; otherwise false.</returns>
		</member>
		<member name="M:System.Xml.XmlBinaryReaderSession.#ctor">
			<summary>Creates an instance of this class.</summary>
		</member>
		<member name="M:System.Xml.XmlBinaryReaderSession.Add(System.Int32,System.String)">
			<summary>Creates an <see cref="T:System.Xml.XmlDictionaryString"></see> from the input parameters and adds it to an internal collection</summary>
			<returns>An <see cref="T:System.Xml.XmlDictionaryString"></see>.</returns>
			<param name="value">The value.</param>
			<param name="id">The key value.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">id is less than zero.</exception>
			<exception cref="T:System.ArgumentNullException">value is null.</exception>
			<exception cref="T:System.InvalidOperationException">An entry with key = id already exists.</exception>
		</member>
		<member name="M:System.Xml.XmlBinaryReaderSession.Clear">
			<summary>Clears the internal collection of all contents.</summary>
		</member>
		<member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
			<summary>Checks whether the internal collection contains an entry matching a key.</summary>
			<returns>true if an entry matching the key was found; otherwise false.</returns>
			<param name="result">The <see cref="T:System.Xml.XmlDictionaryString"></see>, if found; otherwise null.</param>
			<param name="key">The key to search on.</param>
		</member>
		<member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
			<summary>Checks whether the internal collection contains an entry matching a value.</summary>
			<returns>true if an entry matching the value was found; otherwise false.</returns>
			<param name="result">The <see cref="T:System.Xml.XmlDictionaryString"></see>, if found; otherwise null.</param>
			<param name="value">The value to search for.</param>
			<exception cref="T:System.ArgumentNullException">value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
			<summary>Checks whether the internal collection contains an entry matching a value.</summary>
			<returns>true if an entry matching the value was found; otherwise false.</returns>
			<param name="result">The <see cref="T:System.Xml.XmlDictionaryString"></see>, if found; otherwise null.</param>
			<param name="value">The value to search for.</param>
			<exception cref="T:System.ArgumentNullException">value is null.</exception>
		</member>
		<member name="T:System.Xml.XmlBinaryWriterSession">
			<summary>Enables using a dynamic dictionary to compress common strings appearing in a message and maintain state.</summary>
		</member>
		<member name="M:System.Xml.XmlBinaryWriterSession.#ctor">
			<summary>Creates an instance of this class.</summary>
		</member>
		<member name="M:System.Xml.XmlBinaryWriterSession.Reset">
			<summary>Clears out the internal collections.</summary>
		</member>
		<member name="M:System.Xml.XmlBinaryWriterSession.TryAdd(System.Xml.XmlDictionaryString,System.Int32@)">
			<summary>Tries to add an <see cref="T:System.Xml.XmlDictionaryString"></see> to the internal collection.</summary>
			<returns>true, unless an exception was thrown.</returns>
			<param name="value">The <see cref="T:System.Xml.XmlDictionaryString"></see> to add.</param>
			<param name="key">The key of the <see cref="T:System.Xml.XmlDictionaryString"></see> that was successfully added.</param>
			<exception cref="T:System.ArgumentNullException">value is null.</exception>
			<exception cref="T:System.InvalidOperationException">An entry with key = key already exists.</exception>
		</member>
		<member name="T:System.Xml.XmlDictionary">
			<summary>Implements a dictionary used to optimize 's XML reader/writer implementations.</summary>
		</member>
		<member name="M:System.Xml.XmlDictionary.#ctor">
			<summary>Creates an empty <see cref="T:System.Xml.XmlDictionary"></see>.</summary>
		</member>
		<member name="M:System.Xml.XmlDictionary.#ctor(System.Int32)">
			<summary>Creates a <see cref="T:System.Xml.XmlDictionary"></see> with an initial capacity.</summary>
			<param name="capacity">The initial size of the dictionary.</param>
		</member>
		<member name="M:System.Xml.XmlDictionary.Add(System.String)">
			<summary>Adds a string to the <see cref="T:System.Xml.XmlDictionary"></see>.</summary>
			<returns>The <see cref="T:System.Xml.XmlDictionaryString"></see> that was added.</returns>
			<param name="value">String to add to the dictionary.</param>
		</member>
		<member name="M:System.Xml.XmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
			<summary>Attempts to look up an entry in the dictionary.</summary>
			<returns>true if key is in the dictionary, otherwise false.</returns>
			<param name="result">If key is defined, the <see cref="T:System.Xml.XmlDictionaryString"></see> that is mapped to the key; otherwise null.</param>
			<param name="key">Key to look up.</param>
		</member>
		<member name="M:System.Xml.XmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
			<summary>Checks the dictionary for a specified string value.</summary>
			<returns>true if value is in the dictionary, otherwise false.</returns>
			<param name="result">The corresponding <see cref="T:System.Xml.XmlDictionaryString"></see>, if found; otherwise null.</param>
			<param name="value">String value being checked for.</param>
		</member>
		<member name="M:System.Xml.XmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
			<summary>Checks the dictionary for a specified <see cref="T:System.Xml.XmlDictionaryString"></see>.</summary>
			<returns>true if <see cref="T:System.Xml.XmlDictionaryString"></see> is in the dictionary, otherwise false.</returns>
			<param name="result">The matching <see cref="T:System.Xml.XmlDictionaryString"></see>, if found; otherwise null.</param>
			<param name="value">The <see cref="T:System.Xml.XmlDictionaryString"></see> being checked for.</param>
			<exception cref="T:System.ArgumentNullException">value is null.</exception>
		</member>
		<member name="P:System.Xml.XmlDictionary.Empty">
			<summary>Gets a static empty <see cref="T:System.Xml.IXmlDictionary"></see>.</summary>
			<returns>A static empty <see cref="T:System.Xml.IXmlDictionary"></see>.</returns>
		</member>
		<member name="T:System.Xml.XmlDictionaryReader">
			<summary>An abstract class that the  derives from in order to do serialization and deserialization.</summary>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.#ctor">
			<summary>Creates an instance of this class. Invoked only by its subclasses.</summary>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read .NET Binary XML Format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="buffer">The buffer from which to read.</param>
			<param name="quotas">The quotas that apply to this operation.</param>
			<exception cref="T:System.ArgumentNullException">buffer is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read .NET Binary XML Format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas">The quotas that apply to this operation.</param>
			<exception cref="T:System.ArgumentNullException">stream is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read .NET Binary XML Format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas">The quotas that apply to this operation.</param>
			<exception cref="T:System.ArgumentNullException">stream or quotas is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read .NET Binary XML Format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="quotas">The quotas that apply to this operation.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is less than zero or greater than the buffer length.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">count is less than zero or greater than the buffer length minus the offset.</exception>
			<exception cref="T:System.ArgumentNullException">buffer is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read .NET Binary XML Format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="session"><see cref="T:System.Xml.XmlBinaryReaderSession"></see> to use.</param>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas">The quotas that apply to this operation.</param>
			<exception cref="T:System.ArgumentNullException">stream is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read .NET Binary XML Format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use.</param>
			<param name="quotas">The quotas that apply to this operation.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is less than zero or greater than the buffer length.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">count is less than zero or greater than the buffer length minus the offset.</exception>
			<exception cref="T:System.ArgumentNullException">buffer is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read .NET Binary XML Format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="session"><see cref="T:System.Xml.XmlBinaryReaderSession"></see> to use.</param>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas"><see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply.</param>
			<param name="onClose">Delegate to be called when the reader is closed.</param>
			<exception cref="T:System.ArgumentNullException">stream is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read .NET Binary XML Format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="session"><see cref="T:System.Xml.XmlBinaryReaderSession"></see> to use.</param>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use.</param>
			<param name="quotas"><see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is less than zero or greater than the buffer length.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">count is less than zero or greater than the buffer length minus the offset.</exception>
			<exception cref="T:System.ArgumentNullException">buffer is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that can read .NET Binary XML Format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="session"><see cref="T:System.Xml.XmlBinaryReaderSession"></see> to use.</param>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use.</param>
			<param name="quotas"><see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply.</param>
			<param name="onClose">Delegate to be called when the reader is closed.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is less than zero or greater than the buffer length.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">count is less than zero or greater than the buffer length minus the offset.</exception>
			<exception cref="T:System.ArgumentNullException">buffer is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateDictionaryReader(System.Xml.XmlReader)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> from an existing <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="reader">An instance of <see cref="T:System.Xml.XmlReader"></see>.</param>
			<exception cref="T:System.ArgumentNullException">reader is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that reads Xml in the MTOM format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="encoding">The possible character encoding of the stream.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas">The quotas to apply to this reader.</param>
			<exception cref="T:System.ArgumentNullException">encoding is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that reads Xml in the MTOM format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="encodings">The possible character encodings of the stream.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas">The quotas to apply to this reader.</param>
			<exception cref="T:System.ArgumentNullException">encoding is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that reads Xml in the MTOM format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="contentType">The Content-Type MIME type of the message.</param>
			<param name="encodings">The possible character encodings of the stream.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas">The quotas to apply to this reader.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that reads Xml in the MTOM format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="encoding">The possible character encoding of the input.</param>
			<param name="quotas">The quotas to apply to this reader.</param>
			<exception cref="T:System.ArgumentNullException">encoding is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that reads Xml in the MTOM format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="encodings">The possible character encodings of the input.</param>
			<param name="quotas">The quotas to apply to this reader.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that reads Xml in the MTOM format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="contentType">The Content-Type MIME type of the message.</param>
			<param name="encodings">The possible character encodings of the input.</param>
			<param name="quotas">The quotas to apply to this reader.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that reads Xml in the MTOM format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="maxBufferSize">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply to the reader.</param>
			<param name="contentType">The Content-Type MIME type of the message.</param>
			<param name="encodings">The possible character encodings of the stream.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas">The MIME type of the message.</param>
			<param name="onClose">Delegate to be called when the reader is closed.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see> that reads Xml in the MTOM format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="maxBufferSize">The maximum allowed size of the buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="contentType">The Content-Type MIME type of the message.</param>
			<param name="encodings">The possible character encodings of the input.</param>
			<param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply to the reader.</param>
			<param name="onClose">Delegate to be called when the reader is closed.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="buffer">The buffer from which to read.</param>
			<param name="quotas">The quotas applied to the reader.</param>
			<exception cref="T:System.ArgumentNullException">buffer is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas">The quotas applied to the reader.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="quotas">The quotas applied to the reader.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="encoding">The <see cref="T:System.Text.Encoding"></see> object that specifies the encoding properties to apply.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="quotas"><see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply.</param>
			<param name="onClose">Delegate to be called when the reader is closed.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader"></see>.</returns>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<param name="encoding">The <see cref="T:System.Text.Encoding"></see> object that specifies the encoding properties to apply.</param>
			<param name="quotas"><see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> to apply.</param>
			<param name="onClose">Delegate to be called when the reader is closed.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.EndCanonicalization">
			<summary>This method is not yet implemented.</summary>
			<exception cref="T:System.NotSupportedException">Always.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.GetAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>When overridden in a derived class, gets the value of an attribute.</summary>
			<returns>The value of the attribute.</returns>
			<param name="localName">An <see cref="T:System.Xml.XmlDictionaryString"></see> representing the local name of the attribute.</param>
			<param name="namespaceUri">An <see cref="T:System.Xml.XmlDictionaryString"></see> representing the namespace of the attribute.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String[],System.String)">
			<summary>Gets the index of the local name of the current node within an array of names.</summary>
			<returns>The index of the local name of the current node within an array of names.</returns>
			<param name="namespaceUri">Namespace of current node.</param>
			<param name="localNames">String array of local names to be searched.</param>
			<exception cref="T:System.ArgumentNullException">localNames or any of the names in the array is null.</exception>
			<exception cref="T:System.ArgumentNullException">namespaceUri is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString[],System.Xml.XmlDictionaryString)">
			<summary>Gets the index of the local name of the current node within an array of names.</summary>
			<returns>The index of the local name of the current node within an array of names.</returns>
			<param name="namespaceUri">Namespace of current node.</param>
			<param name="localNames"><see cref="T:System.Xml.XmlDictionaryString"></see> array of local names to be searched.</param>
			<exception cref="T:System.ArgumentNullException">localNames or any of the names in the array is null.</exception>
			<exception cref="T:System.ArgumentNullException">namespaceUri is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.String)">
			<summary>Checks whether parameter is the local name of the current node.</summary>
			<returns>true if localName matches local name of the current node; otherwise false.</returns>
			<param name="localName">A string representing the local name of the current node.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.Xml.XmlDictionaryString)">
			<summary>Checks whether parameter is the local name of the current node.</summary>
			<returns>true if localName matches local name of the current node; otherwise false.</returns>
			<param name="localName">An <see cref="T:System.Xml.XmlDictionaryString"></see> representing the local name of the current node.</param>
			<exception cref="T:System.ArgumentNullException">localName is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.String)">
			<summary>Checks whether parameter is the namespace of the current node.</summary>
			<returns>true if namespaceUri matches namespace of the current node; otherwise false.</returns>
			<param name="namespaceUri">Namespace of current node.</param>
			<exception cref="T:System.ArgumentNullException">namespaceUri is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.Xml.XmlDictionaryString)">
			<summary>Checks whether parameter is the namespace of the current node.</summary>
			<returns>true if namespaceUri matches namespace of the current node; otherwise false.</returns>
			<param name="namespaceUri">Namespace of current node.</param>
			<exception cref="T:System.ArgumentNullException">namespaceUri is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.IsStartArray(System.Type@)">
			<summary>Checks whether or not the reader is positioned at the start of an array. This class will return false, but subclasses that have the concept of arrays might return true.</summary>
			<returns>true if the reader is positioned at the start of an array node; otherwise false.</returns>
			<param name="type">Type of the node, if a valid node; otherwise null.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Tests if the first tag is a start tag or empty element tag and if the local name and namespace URI match those of the current node.</summary>
			<returns>true if the first tag in the array is a start tag or empty element tag and matches localName and namespaceUri; otherwise false.</returns>
			<param name="localName">An <see cref="T:System.Xml.XmlDictionaryString"></see> representing the local name of the attribute.</param>
			<param name="namespaceUri">An <see cref="T:System.Xml.XmlDictionaryString"></see> representing the namespace of the attribute.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.IsTextNode(System.Xml.XmlNodeType)">
			<summary>Tests whether the current node is a text node.</summary>
			<returns>true if the node type is <see cref="F:System.Xml.XmlNodetype.Text"></see>, <see cref="F:System.Xml.XmlNodetype.Whitespace"></see>, <see cref="F:System.Xml.XmlNodetype.SignificantWhitespace"></see>, <see cref="F:System.Xml.XmlNodetype.CDATA"></see>, or <see cref="F:System.Xml.XmlNodetype.Attribute"></see>; otherwise false.</returns>
			<param name="nodeType">Type of the node being tested.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement">
			<summary>Tests whether the current content node is a start element or an empty element.</summary>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String)">
			<summary>Tests whether the current content node is a start element or an empty element and if the <see cref="P:System.Xml.XmlReader.Name"></see> property of the element matches the given argument.</summary>
			<param name="name"><see cref="P:System.Xml.XmlReader.Name"></see> property of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String,System.String)">
			<summary>Tests whether the current content node is a start element or an empty element and if the <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see> properties of the element matches the given arguments.</summary>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Tests whether the current content node is a start element or an empty element and if the <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see> properties of the element matches the given argument.</summary>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.Boolean"></see> nodes into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The local name of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.DateTime"></see> nodes into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.Decimal"></see> nodes into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Double[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.Double"></see> nodes into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Guid[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.Guid"></see> nodes into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int16[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of short integers into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int32[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of integers into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int64[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of long integers into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Single[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of float numbers into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.TimeSpan"></see> nodes into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.Boolean"></see> nodes into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.DateTime"></see> nodes into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.Decimal"></see> nodes into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.Double"></see> nodes type into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.Guid"></see> nodes into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of short integers into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of integers into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of long integers into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of float numbers into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
			<summary>Reads repeated occurrences of <see cref="T:System.TimeSpan"></see> nodes into a typed array.</summary>
			<returns>Number of nodes put in the array.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.String,System.String)">
			<summary>Reads repeated occurrences of <see cref="T:System.Boolean"></see> nodes into a typed array.</summary>
			<returns>A <see cref="T:System.Boolean"></see> array of the <see cref="T:System.Boolean"></see> nodes.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Reads repeated occurrences of <see cref="T:System.Boolean"></see> nodes into a typed array.</summary>
			<returns>A <see cref="T:System.Boolean"></see> array of the <see cref="T:System.Boolean"></see> nodes.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
			<summary>Converts a node's content to a specified type.</summary>
			<returns>The concatenated text content or attribute value converted to the requested type.</returns>
			<param name="type">The <see cref="T:System.Type"></see> of the value to be returned.</param>
			<param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <see cref="T:System.Xml.XmlQualifiedName"></see> object to an xs:string. This value can be a null reference.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBase64">
			<summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
			<returns>A byte array containing the Base64 decoded binary bytes.</returns>
			<exception cref="T:System.Xml.XmlException">Array size is greater than the MaxArrayLength quota for this reader.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex">
			<summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
			<returns>A byte array containing the BinHex decoded binary bytes.</returns>
			<exception cref="T:System.Xml.XmlException">Array size is greater than <see cref="F:System.Int32.MaxValue"></see>.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex(System.Int32)">
			<summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
			<returns>A byte array containing the BinHex decoded binary bytes.</returns>
			<param name="maxByteArrayContentLength">Maximum array length.</param>
			<exception cref="T:System.Xml.XmlException">Array size is greater than maxByteArrayContentLength.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char[],System.Int32,System.Int32)">
			<summary>Reads the content into a char array.</summary>
			<returns>Number of characters read.</returns>
			<param name="offset">Starting index in the array.</param>
			<param name="chars">char array into which the nodes are put.</param>
			<param name="count">Number of nodes to put in the array.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsDecimal">
			<summary>Converts a node's content to decimal.</summary>
			<returns>decimal representation of node's content.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsFloat">
			<summary>Converts a node's content to float.</summary>
			<returns>float representation of node's content.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsGuid">
			<summary>Converts a node's content to guid.</summary>
			<returns>guid representation of node's content.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(System.String@,System.String@)">
			<summary>Converts a node's content to qualified name representation.</summary>
			<param name="localName"><see cref="P:System.Xml.XmlReader.LocalName"></see> part of the qualified name (out parameter).</param>
			<param name="namespaceUri"><see cref="P:System.Xml.XmlReader.NamespaceURI"></see> part of the qualified name (out parameter).</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString">
			<summary>Converts a node's content to a string.</summary>
			<returns>Node content in string representation.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Int32)">
			<summary>Converts a node's content to a string.</summary>
			<returns>Node content in string representation.</returns>
			<param name="maxStringContentLength">Maximum string length.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.String[],System.Int32@)">
			<summary>Converts a node's content to a string.</summary>
			<returns>Node content in string representation.</returns>
			<param name="index">Index of the entry in strings that matches the content.</param>
			<param name="strings">Array of strings to match content against.</param>
			<exception cref="T:System.ArgumentNullException">An entry in strings is null.</exception>
			<exception cref="T:System.ArgumentNullException">strings is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString[],System.Int32@)">
			<summary>Converts a node's content to a string.</summary>
			<returns>Node content in string representation.</returns>
			<param name="index">Index of the entry in strings that matches the content.</param>
			<param name="strings">Array of <see cref="T:System.Xml.XmlDictionaryString"></see> objects to match content against.</param>
			<exception cref="T:System.ArgumentNullException">An entry in strings is null.</exception>
			<exception cref="T:System.ArgumentNullException">strings is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsTimeSpan">
			<summary>Converts a node's content to <see cref="T:System.TimeSpan"></see>.</summary>
			<returns><see cref="T:System.TimeSpan"></see> representation of node's content.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadContentAsUniqueId">
			<summary>Converts a node's content to a unique identifier.</summary>
			<returns>The node's content represented as a unique identifier.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.String,System.String)">
			<summary>Converts a node's content to a <see cref="T:System.DateTime"></see> array.</summary>
			<returns>The node's content represented as a <see cref="T:System.DateTime"></see> array.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Converts a node's content to a <see cref="T:System.DateTime"></see> array.</summary>
			<returns>The node's content represented as a <see cref="T:System.DateTime"></see> array.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.String,System.String)">
			<summary>Converts a node's content to a <see cref="T:System.DateTime"></see> array.</summary>
			<returns>The node's content represented as a <see cref="T:System.Decimal"></see> array.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Converts a node's content to a <see cref="T:System.DateTime"></see> array.</summary>
			<returns>The node's content represented as a <see cref="T:System.Decimal"></see> array.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.String,System.String)">
			<summary>Converts a node's content to a <see cref="T:System.DateTime"></see> array.</summary>
			<returns>The node's content represented as a <see cref="T:System.Double"></see> array.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Converts a node's content to a <see cref="T:System.DateTime"></see> array.</summary>
			<returns>The node's content represented as a <see cref="T:System.Double"></see> array.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBase64">
			<summary>Converts a node's content to a array of Base64 bytes.</summary>
			<returns>The node's content represented as an array of Base64 bytes.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBinHex">
			<summary>Converts a node's content to an array of BinHex bytes.</summary>
			<returns>The node's content represented as an array of BinHex bytes.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBoolean">
			<summary>Converts an element's content to a <see cref="T:System.Boolean"></see>.</summary>
			<returns>The node's content represented as a <see cref="T:System.Boolean"></see>.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDateTime">
			<summary>Converts an element's content to a <see cref="T:System.DateTime"></see>.</summary>
			<returns>The node's content represented as a <see cref="T:System.DateTime"></see>.</returns>
			<exception cref="T:System.ArgumentException">Element is not in valid format.</exception>
			<exception cref="T:System.FormatException">Element is not in valid format.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDecimal">
			<summary>Converts an element's content to a <see cref="T:System.Decimal"></see>.</summary>
			<returns>The node's content represented as a <see cref="T:System.Decimal"></see>.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDouble">
			<summary>Converts an element's content to a <see cref="T:System.Double"></see>.</summary>
			<returns>The node's content represented as a <see cref="T:System.Double"></see>.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsFloat">
			<summary>Converts an element's content to a floating point number (<see cref="T:System.Single"></see>).</summary>
			<returns>The node's content represented as a floating point number (<see cref="T:System.Single"></see>).</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsGuid">
			<summary>Converts an element's content to a <see cref="T:System.Guid"></see>.</summary>
			<returns>The node's content represented as a <see cref="T:System.Guid"></see>.</returns>
			<exception cref="T:System.ArgumentException">Element is not in valid format.</exception>
			<exception cref="T:System.FormatException">Element is not in valid format.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsInt">
			<summary>Converts an element's content to an integer (<see cref="T:System.Int32"></see>).</summary>
			<returns>The node's content represented as an integer (<see cref="T:System.Int32"></see>).</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsLong">
			<summary>Converts an element's content to a long integer (<see cref="T:System.Int64"></see>).</summary>
			<returns>The node's content represented as a long integer (<see cref="T:System.Int64"></see>).</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsString">
			<summary>Converts an element's content to a <see cref="T:System.String"></see>.</summary>
			<returns>The node's content represented as a <see cref="T:System.String"></see>.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsTimeSpan">
			<summary>Converts an element's content to a <see cref="T:System.TimeSpan"></see>.</summary>
			<returns>The node's content represented as a <see cref="T:System.TimeSpan"></see>.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsUniqueId">
			<summary>Converts an element's content to a unique identifier.</summary>
			<returns>The node's content represented as a unique identifier.</returns>
			<exception cref="T:System.ArgumentException">Element is not in valid format.</exception>
			<exception cref="T:System.FormatException">Element is not in valid format.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement">
			<summary>Checks that the current node is an element and advances the reader to the next node.</summary>
			<exception cref="T:System.Xml.XmlException"><see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)"></see> returns false.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String)">
			<summary>Checks that the current node is an element with the given name and advances the reader to the next node.</summary>
			<param name="name">The qualified name of the element.</param>
			<exception cref="T:System.Xml.XmlException"><see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)"></see> returns false.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String,System.String)">
			<summary>Checks that the current node is an element with the given localName and namespaceUri and advances the reader to the next node.</summary>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.Xml.XmlException"><see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)"></see> returns false.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Checks that the current node is an element with the given localName and namespaceUri and advances the reader to the next node.</summary>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.Xml.XmlException"><see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)"></see> returns false.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.String,System.String)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into an array of <see cref="T:System.Guid"></see>.</summary>
			<returns>An array of <see cref="T:System.Guid"></see>.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into an array of <see cref="T:System.Guid"></see>.</summary>
			<returns>An array of <see cref="T:System.Guid"></see>.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.String,System.String)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into an array of shortints (<see cref="T:System.Int16"></see>).</summary>
			<returns>An array of shortints (<see cref="T:System.Int16"></see>).</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into an array of shortints (<see cref="T:System.Int16"></see>).</summary>
			<returns>An array of shortints (<see cref="T:System.Int16"></see>).</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.String,System.String)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into an array of ints (<see cref="T:System.Int32"></see>).</summary>
			<returns>An array of ints (<see cref="T:System.Int32"></see>).</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into an array of ints (<see cref="T:System.Int32"></see>).</summary>
			<returns>An array of ints (<see cref="T:System.Int32"></see>).</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.String,System.String)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into an array of longints (<see cref="T:System.Int64"></see>).</summary>
			<returns>An array of longints (<see cref="T:System.Int64"></see>).</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into an array of longints (<see cref="T:System.Int64"></see>).</summary>
			<returns>An array of longints (<see cref="T:System.Int64"></see>).</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.String,System.String)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into an array of floats (<see cref="T:System.Single"></see>).</summary>
			<returns>An array of floats (<see cref="T:System.Single"></see>).</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into an array of floats (<see cref="T:System.Single"></see>).</summary>
			<returns>An array of floats (<see cref="T:System.Single"></see>).</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Checks that the current node is an element with the given localName and namespaceUri and advances the reader to the next node.</summary>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadString">
			<summary>Reads the contents of the current node into a string.</summary>
			<returns>A string containing the contents of the current node.</returns>
			<exception cref="T:System.InvalidOperationException">Unable to read the contents of the current node.</exception>
			<exception cref="T:System.Xml.XmlException">Maximum allowed string length exceeded.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadString(System.Int32)">
			<summary>Reads the contents of the current node into a string with a given maximum length.</summary>
			<returns>A string containing the contents of the current node.</returns>
			<param name="maxStringContentLength">Maximum allowed string length.</param>
			<exception cref="T:System.InvalidOperationException">Unable to read the contents of the current node.</exception>
			<exception cref="T:System.Xml.XmlException">Maximum allowed string length exceeded.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.String,System.String)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into a <see cref="T:System.TimeSpan"></see> array.</summary>
			<returns>A <see cref="T:System.TimeSpan"></see> array.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Reads the contents of a series of nodes with the given localName and namespaceUri into a <see cref="T:System.TimeSpan"></see> array.</summary>
			<returns>A <see cref="T:System.TimeSpan"></see> array.</returns>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte[],System.Int32,System.Int32)">
			<summary>Not implemented.</summary>
			<returns>Not implemented.</returns>
			<param name="offset">Starting position from which to read in buffer.</param>
			<param name="count">Number of bytes that can be read from buffer.</param>
			<param name="buffer">The buffer from which to read.</param>
			<exception cref="T:System.NotSupportedException">Always.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
			<summary>This method is not yet implemented.</summary>
			<param name="stream">The stream to read from.</param>
			<param name="inclusivePrefixes">Prefixes to be included.</param>
			<param name="includeComments">Determines whether comments are included.</param>
			<exception cref="T:System.NotSupportedException">Always.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.TryGetArrayLength(System.Int32@)">
			<summary>Not implemented in this class (it always returns false). May be overridden in subclasses.</summary>
			<returns>false, unless overridden in a subclass.</returns>
			<param name="count">Returns 0, unless overridden in a subclass.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(System.Int32@)">
			<summary>Not implemented in this class (it always returns false). May be overridden in subclasses.</summary>
			<returns>false, unless overridden in a subclass.</returns>
			<param name="length">Returns 0, unless overridden in a subclass.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(System.Xml.XmlDictionaryString@)">
			<summary>Not implemented in this class (it always returns false). May be overridden in subclasses.</summary>
			<returns>false, unless overridden in a subclass.</returns>
			<param name="localName">Returns null, unless overridden in a subclass..</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(System.Xml.XmlDictionaryString@)">
			<summary>Not implemented in this class (it always returns false). May be overridden in subclasses.</summary>
			<returns>false, unless overridden in a subclass.</returns>
			<param name="namespaceUri">Returns null, unless overridden in a subclass.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(System.Xml.XmlDictionaryString@)">
			<summary>Not implemented in this class (it always returns false). May be overridden in subclasses..</summary>
			<returns>false, unless overridden in a subclass.</returns>
			<param name="value">Returns null, unless overridden in a subclass.</param>
		</member>
		<member name="P:System.Xml.XmlDictionaryReader.CanCanonicalize">
			<summary>This property always returns false. Its subclasses can override to return true if they support canonicalization.</summary>
			<returns>Returns false.</returns>
		</member>
		<member name="P:System.Xml.XmlDictionaryReader.Quotas">
			<summary>Gets the quota values that apply to the current instance of this class.</summary>
			<returns>The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> that applies to the current instance of this class.</returns>
		</member>
		<member name="T:System.Xml.XmlDictionaryReaderQuotas">
			<summary>Contains configurable quota values for XmlDictionaryReaders.</summary>
		</member>
		<member name="M:System.Xml.XmlDictionaryReaderQuotas.#ctor">
			<summary>Creates a new instance of this class.</summary>
		</member>
		<member name="M:System.Xml.XmlDictionaryReaderQuotas.CopyTo(System.Xml.XmlDictionaryReaderQuotas)">
			<summary>Sets the properties on passed in quotas instance, based on the values in this instance.</summary>
			<param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> instance to which to copy values.</param>
			<exception cref="T:System.ArgumentNullException">Passed in target quota is null.</exception>
			<exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for the passed in instance.</exception>
		</member>
		<member name="P:System.Xml.XmlDictionaryReaderQuotas.Max">
			<summary>Gets an instance of this class with all properties set to maximum values.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryReaderQuotas"></see> with properties set to <see cref="F:System.Int32.MaxValue"></see>.</returns>
		</member>
		<member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength">
			<summary>Gets and sets the maximum allowed array length.</summary>
			<returns>The maximum allowed array length. The default is 16384.</returns>
			<exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
			<exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
		</member>
		<member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead">
			<summary>Gets and sets the maximum allowed bytes returned per read.</summary>
			<returns>The maximum allowed bytes returned per read. The default is 4096;</returns>
			<exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
			<exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
		</member>
		<member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxDepth">
			<summary>Gets and sets the maximum nested node depth.</summary>
			<returns>The maximum nested node depth. The default is 32;</returns>
			<exception cref="T:System.ArgumentException">Trying to set the value is less than zero.</exception>
			<exception cref="T:System.InvalidOperationException">Trying to set the value and quota values are read-only for this instance.</exception>
		</member>
		<member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount">
			<summary>Gets and sets the maximum characters allowed in a table name.</summary>
			<returns>The maximum characters allowed in a table name. The default is 16384</returns>
			<exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
			<exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
		</member>
		<member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength">
			<summary>Gets and sets the maximum string length returned by the reader.</summary>
			<returns>The maximum string length returned by the reader. The default is 8192;</returns>
			<exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
			<exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryString.#ctor(System.Xml.IXmlDictionary,System.String,System.Int32)">
			<summary>Creates an instance of this class.</summary>
			<param name="dictionary">The <see cref="T:System.Xml.IXmlDictionary"></see> containing this instance.</param>
			<param name="value">The string that is the value of the dictionary entry.</param>
			<param name="key">The integer that is the key of the dictionary entry.</param>
			<exception cref="T:System.ArgumentNullException">dictionary is null.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">key is less than 0 or greater than <see cref="F:System.Int32.MaxValue"></see> / 4.</exception>
			<exception cref="T:System.ArgumentNullException">value is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryString.ToString">
			<summary>Displays a text representation of this object.</summary>
			<returns>The string value for this instance of the class.</returns>
		</member>
		<member name="P:System.Xml.XmlDictionaryString.Dictionary">
			<summary>Represents the <see cref="T:System.Xml.IXmlDictionary"></see> passed to the constructor of this instance of <see cref="T:System.Xml.XmlDictionaryString"></see>.</summary>
			<returns>The <see cref="T:System.Xml.IXmlDictionary"></see> for this dictionary entry.</returns>
		</member>
		<member name="P:System.Xml.XmlDictionaryString.Empty">
			<summary>Gets an <see cref="T:System.Xml.XmlDictionaryString"></see> representing the empty string.</summary>
			<returns>An <see cref="T:System.Xml.XmlDictionaryString"></see> representing the empty string.</returns>
		</member>
		<member name="P:System.Xml.XmlDictionaryString.Key">
			<summary>Gets the integer key for this instance of the class. </summary>
			<returns>The integer key for this instance of the class.</returns>
		</member>
		<member name="P:System.Xml.XmlDictionaryString.Value">
			<summary>Gets the string value for this instance of the class. </summary>
			<returns>The string value for this instance of the class.</returns>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.#ctor">
			<summary>Creates an instance of this class. Invoked only by its subclasses since this class is abstract.</summary>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes  binary XML format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</returns>
			<param name="stream">The stream to write to.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes  binary XML format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</returns>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use as the shared dictionary.</param>
			<param name="stream">The stream to write to.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes  binary XML format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</returns>
			<param name="session"><see cref="T:System.Xml.XmlBinaryWriterSession"></see> to use.</param>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use as the shared dictionary.</param>
			<param name="stream">The stream to write to.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes  binary XML format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</returns>
			<param name="session"><see cref="T:System.Xml.XmlBinaryWriterSession"></see> to use.</param>
			<param name="dictionary"><see cref="T:System.Xml.XmlDictionary"></see> to use as the shared dictionary.</param>
			<param name="stream">The stream from which to read.</param>
			<param name="ownsStream">If true, stream will be closed by the writer when done; otherwise false.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see> from an existing <see cref="T:System.Xml.XmlWriter"></see>.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</returns>
			<param name="writer">An instance of <see cref="T:System.Xml.XmlWriter"></see>.</param>
			<exception cref="T:System.ArgumentNullException">writer is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.CreateMtomWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.String)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes XML in the MTOM format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</returns>
			<param name="maxSizeInBytes">Maximum number of bytes that will be buffered in the writer.</param>
			<param name="startInfo">An attribute in the ContentType SOAP header.</param>
			<param name="encoding">The character encoding of the stream.</param>
			<param name="stream">The stream to write to.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.CreateMtomWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes X in the MTOM format.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</returns>
			<param name="boundary">The MIME boundary in the message.</param>
			<param name="maxSizeInBytes">Maximum number of bytes that will be buffered in the writer.</param>
			<param name="startInfo">The content-type of the MIME part containing the Infoset.</param>
			<param name="encoding">The character encoding of the stream.</param>
			<param name="stream">The stream to write to.</param>
			<param name="writeMessageHeaders">If true, write message headers.</param>
			<param name="ownsStream">If true, stream will be closed by the writer when done; otherwise false.</param>
			<param name="startUri">The content-id URI of the MIME part containing the Infoset.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes text XML. </summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</returns>
			<param name="stream">The stream to write to.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes text Xml.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</returns>
			<param name="encoding">The character encoding of the output.</param>
			<param name="stream">The stream to write to.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
			<summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see> that writes text Xml.</summary>
			<returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter"></see>.</returns>
			<param name="encoding">The character encoding of the stream.</param>
			<param name="stream">The stream to write to.</param>
			<param name="ownsStream">If true, stream will be closed by the writer when done; otherwise false.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.EndCanonicalization">
			<summary>This method is not yet implemented. </summary>
			<exception cref="T:System.NotSupportedException">Method isn't implemented yet.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
			<summary>This method is not yet implemented. </summary>
			<param name="stream">The stream to write to.</param>
			<param name="inclusivePrefixes">Prefixes to be included.</param>
			<param name="includeComments">Determines whether comments are included.</param>
			<exception cref="T:System.NotSupportedException">Method isn't implemented yet.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
			<summary>Writes values from a <see cref="T:System.Boolean"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the data.</param>
			<param name="count">Number of values to write from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.DateTime"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Decimal"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Double"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Guid[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Guid"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Int16"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Int32"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Int64"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Single"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.TimeSpan"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Boolean"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.DateTime"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Decimal"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Double"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Guid"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Int16"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Int32"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Int64"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.Single"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
			<summary>Writes nodes from a <see cref="T:System.TimeSpan"></see> array.</summary>
			<param name="offset">Starting index in the array.</param>
			<param name="array">Array containing the nodes.</param>
			<param name="count">Number of nodes to get from the array.</param>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">Namespace prefix.</param>
			<exception cref="T:System.ArgumentOutOfRangeException">count is &lt; 0 or &gt; array length minus offset.</exception>
			<exception cref="T:System.ArgumentOutOfRangeException">offset is &lt; 0 or &gt; array length.</exception>
			<exception cref="T:System.ArgumentNullException">array is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
			<summary>Writes an attribute qualified name and value.</summary>
			<param name="localName">The local name of the attribute.</param>
			<param name="namespaceUri">The namespace URI of the attribute.</param>
			<param name="value">The string value of the attribute.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
			<summary>Writes an attribute qualified name and value.</summary>
			<param name="localName">The local name of the attribute.</param>
			<param name="namespaceUri">The namespace URI of the attribute.</param>
			<param name="prefix">The prefix of the attribute.</param>
			<param name="value">The string value of the attribute.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
			<summary>Writes an element with a text content.</summary>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="value">The string value of the element content.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
			<summary>Writes an element with a text content.</summary>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">The prefix of the element.</param>
			<param name="value">The string value of the element content.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlDictionaryReader,System.Boolean)">
			<summary>Writes the current Xml node from an <see cref="T:System.Xml.XmlDictionaryReader"></see>.</summary>
			<param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader"></see>.</param>
			<param name="defattr">If true, copy the default attributes from the XmlReader; otherwise If true, use default attributes; otherwise false.</param>
			<exception cref="T:System.ArgumentNullException">reader is null. </exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
			<summary>Writes the current Xml node from an <see cref="T:System.Xml.XmlReader"></see>.</summary>
			<param name="reader">The <see cref="T:System.Xml.XmlReader"></see>.</param>
			<param name="defattr">If true, copy the default attributes from the XmlReader; otherwise false.If true, use default attributes; otherwise false.</param>
			<exception cref="T:System.ArgumentNullException">reader is null. </exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteQualifiedName(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</summary>
			<param name="localName">The local name of the qualified name.</param>
			<param name="namespaceUri">The namespace URI of the qualified name.</param>
			<exception cref="T:System.ArgumentNullException">localName is null. </exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Writes the start of an attribute with the specified local name, and namespace URI.</summary>
			<param name="localName">The local name of the attribute.</param>
			<param name="namespaceUri">The namespace URI of the attribute.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Writes the start of an attribute with the specified prefix, local name, and namespace URI.</summary>
			<param name="localName">The local name of the attribute.</param>
			<param name="namespaceUri">The namespace URI of the attribute.</param>
			<param name="prefix">Namespace prefix.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Writes the specified start tag and associates it with the given namespace.</summary>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Writes the specified start tag and associates it with the given namespace and prefix.</summary>
			<param name="localName">The local name of the element.</param>
			<param name="namespaceUri">The namespace URI of the element.</param>
			<param name="prefix">The prefix of the element.</param>
			<exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteString(System.Xml.XmlDictionaryString)">
			<summary>Writes the given text content.</summary>
			<param name="value">The text to write.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteTextNode(System.Xml.XmlDictionaryReader,System.Boolean)">
			<summary>Writes the text node an <see cref="T:System.Xml.XmlDictionaryReader"></see> is currently positioned on.</summary>
			<param name="reader"><see cref="T:System.Xml.XmlDictionaryReader"></see> to get the text value from.</param>
			<param name="isAttribute">Specifies whether the reader is positioned on an attribute value or element content.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Guid)">
			<summary>Writes a <see cref="T:System.Guid"></see> value.</summary>
			<param name="value">The <see cref="T:System.Guid"></see> value to write.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.IStreamProvider)">
			<summary>Writes a value from an <see cref="T:System.Xml.IStreamProvider"></see>.</summary>
			<param name="value">The <see cref="T:System.Xml.IStreamProvider"></see>.</param>
			<exception cref="T:System.Xml.XmlException">value returns a null stream object.</exception>
			<exception cref="T:System.ArgumentNullException">value is null. </exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.TimeSpan)">
			<summary>Writes a <see cref="T:System.TimeSpan"></see> value.</summary>
			<param name="value">The <see cref="T:System.TimeSpan"></see> value to write.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.UniqueId)">
			<summary>Writes a Unique Id value.</summary>
			<param name="value">The Unique Id value to write.</param>
			<exception cref="T:System.ArgumentNullException">value is null. </exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.XmlDictionaryString)">
			<summary>Writes a <see cref="T:System.Xml.XmlDictionaryString"></see> value.</summary>
			<param name="value">The <see cref="T:System.Xml.XmlDictionaryString"></see> value.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)">
			<summary>Writes a standard XML attribute in the current node.</summary>
			<param name="localName">The local name of the attribute.</param>
			<param name="value">The value of the attribute.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
			<summary>Writes an XML attribute in the current node.</summary>
			<param name="localName">The local name of the attribute.</param>
			<param name="value">The value of the attribute.</param>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)">
			<summary>Writes a namespace declaration attribute.</summary>
			<param name="namespaceUri">The namespace to which the prefix is bound.</param>
			<param name="prefix">The prefix that will be bound to the given namespace.</param>
			<exception cref="T:System.ArgumentNullException">namespaceUri is null.</exception>
		</member>
		<member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.Xml.XmlDictionaryString)">
			<summary>Writes a namespace declaration attribute.</summary>
			<param name="namespaceUri">The namespace to which the prefix is bound.</param>
			<param name="prefix">The prefix that will be bound to the given namespace.</param>
			<exception cref="T:System.ArgumentNullException">namespaceUri is null.</exception>
		</member>
		<member name="P:System.Xml.XmlDictionaryWriter.CanCanonicalize">
			<summary>This property always returns false. Its subclasses can override to return true if they support canonicalization.</summary>
			<returns>false.</returns>
		</member>
	</members>
</doc>